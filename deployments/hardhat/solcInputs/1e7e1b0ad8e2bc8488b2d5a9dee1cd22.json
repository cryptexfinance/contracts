{
  "language": "Solidity",
  "sources": {
    "contracts/governance/GovernorAlpha.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.7.5;\n\npragma experimental ABIEncoderV2;\n\ncontract GovernorAlpha {\n  /// @notice The name of this contract\n  string public constant name = \"Cryptex Governor Alpha\";\n\n  /// @notice The number of votes in support of a proposal required in order for a quorum to be reached and for a vote to succeed\n  function quorumVotes() public pure returns (uint256) {\n    return 400_000e18;\n  } // 4% of Ctx\n\n  /// @notice The number of votes required in order for a voter to become a proposer\n  function proposalThreshold() public pure returns (uint256) {\n    return 100_000e18;\n  } // 1% of Ctx\n\n  /// @notice The maximum number of actions that can be included in a proposal\n  function proposalMaxOperations() public pure returns (uint256) {\n    return 10;\n  } // 10 actions\n\n  /// @notice The delay before voting on a proposal may take place, once proposed\n  function votingDelay() public pure returns (uint256) {\n    return 1;\n  } // 1 block\n\n  /// @notice The duration of voting on a proposal, in blocks\n  function votingPeriod() public pure returns (uint256) {\n    return 17_280;\n  } // ~3 days in blocks (assuming 15s blocks)\n\n  /// @notice The address of the Ctx Protocol Timelock\n  TimelockInterface public timelock;\n\n  /// @notice The address of the Ctx governance token\n  CtxInterface public ctx;\n\n  /// @notice The total number of proposals\n  uint256 public proposalCount;\n\n  /// @param id Unique id for looking up a proposal\n  /// @param proposer Creator of the proposal\n  /// @param eta The timestamp that the proposal will be available for execution, set once the vote succeeds\n  /// @param targets the ordered list of target addresses for calls to be made\n  /// @param values The ordered list of values (i.e. msg.value) to be passed to the calls to be made\n  /// @param signatures The ordered list of function signatures to be called\n  /// @param calldatas The ordered list of calldata to be passed to each call\n  /// @param startBlock The block at which voting begins: holders must delegate their votes prior to this block\n  /// @param endBlock The block at which voting ends: votes must be cast prior to this block\n  /// @param forVotes Current number of votes in favor of this proposal\n  /// @param againstVotes Current number of votes in opposition to this proposal\n  /// @param canceled Flag marking whether the proposal has been canceled\n  /// @param executed Flag marking whether the proposal has been executed\n  struct Proposal {\n    uint256 id;\n    address proposer;\n    uint256 eta;\n    address[] targets;\n    uint256[] values;\n    string[] signatures;\n    bytes[] calldatas;\n    uint256 startBlock;\n    uint256 endBlock;\n    uint256 forVotes;\n    uint256 againstVotes;\n    bool canceled;\n    bool executed;\n  }\n\n  /// @notice Receipts of ballots for the entire set of voters\n  mapping(uint256 => mapping(address => Receipt)) public receipts;\n\n  /// @notice Ballot receipt record for a voter\n  /// @param hasVoted or not a vote has been cast\n  /// @param support or not the voter supports the proposal\n  /// @param votes number of votes the voter had, which were cast\n  struct Receipt {\n    bool hasVoted;\n    bool support;\n    uint96 votes;\n  }\n\n  /// @notice Possible states that a proposal may be in\n  enum ProposalState {\n    Pending,\n    Active,\n    Canceled,\n    Defeated,\n    Succeeded,\n    Queued,\n    Expired,\n    Executed\n  }\n\n  /// @notice The official record of all proposals ever proposed\n  mapping(uint256 => Proposal) public proposals;\n\n  /// @notice The latest proposal for each proposer\n  mapping(address => uint256) public latestProposalIds;\n\n  /// @notice The EIP-712 typehash for the contract's domain\n  bytes32 public constant DOMAIN_TYPEHASH =\n    keccak256(\n      \"EIP712Domain(string name,uint256 chainId,address verifyingContract)\"\n    );\n\n  /// @notice The EIP-712 typehash for the ballot struct used by the contract\n  bytes32 public constant BALLOT_TYPEHASH =\n    keccak256(\"Ballot(uint256 proposalId,bool support)\");\n\n  /// @notice An event emitted when a new proposal is created\n  event ProposalCreated(\n    uint256 id,\n    address proposer,\n    address[] targets,\n    uint256[] values,\n    string[] signatures,\n    bytes[] calldatas,\n    uint256 startBlock,\n    uint256 endBlock,\n    string description\n  );\n\n  /// @notice An event emitted when a vote has been cast on a proposal\n  event VoteCast(\n    address voter,\n    uint256 proposalId,\n    bool support,\n    uint256 votes\n  );\n\n  /// @notice An event emitted when a proposal has been canceled\n  event ProposalCanceled(uint256 id);\n\n  /// @notice An event emitted when a proposal has been queued in the Timelock\n  event ProposalQueued(uint256 id, uint256 eta);\n\n  /// @notice An event emitted when a proposal has been executed in the Timelock\n  event ProposalExecuted(uint256 id);\n\n  constructor(address timelock_, address ctx_) {\n    timelock = TimelockInterface(timelock_);\n    ctx = CtxInterface(ctx_);\n  }\n\n  function propose(\n    address[] memory targets,\n    uint256[] memory values,\n    string[] memory signatures,\n    bytes[] memory calldatas,\n    string memory description\n  ) public returns (uint256) {\n    require(\n      ctx.getPriorVotes(msg.sender, sub256(block.number, 1)) >\n        proposalThreshold(),\n      \"GovernorAlpha::propose: proposer votes below proposal threshold\"\n    );\n    require(\n      targets.length == values.length &&\n        targets.length == signatures.length &&\n        targets.length == calldatas.length,\n      \"GovernorAlpha::propose: proposal function information arity mismatch\"\n    );\n    require(\n      targets.length != 0,\n      \"GovernorAlpha::propose: must provide actions\"\n    );\n    require(\n      targets.length <= proposalMaxOperations(),\n      \"GovernorAlpha::propose: too many actions\"\n    );\n\n    uint256 latestProposalId = latestProposalIds[msg.sender];\n    if (latestProposalId != 0) {\n      ProposalState proposersLatestProposalState = state(latestProposalId);\n      require(\n        proposersLatestProposalState != ProposalState.Active,\n        \"GovernorAlpha::propose: one live proposal per proposer, found an already active proposal\"\n      );\n      require(\n        proposersLatestProposalState != ProposalState.Pending,\n        \"GovernorAlpha::propose: one live proposal per proposer, found an already pending proposal\"\n      );\n    }\n\n    uint256 startBlock = add256(block.number, votingDelay());\n    uint256 endBlock = add256(startBlock, votingPeriod());\n\n    proposalCount++;\n    Proposal memory newProposal =\n      Proposal({\n        id: proposalCount,\n        proposer: msg.sender,\n        eta: 0,\n        targets: targets,\n        values: values,\n        signatures: signatures,\n        calldatas: calldatas,\n        startBlock: startBlock,\n        endBlock: endBlock,\n        forVotes: 0,\n        againstVotes: 0,\n        canceled: false,\n        executed: false\n      });\n\n    proposals[newProposal.id] = newProposal;\n    latestProposalIds[newProposal.proposer] = newProposal.id;\n\n    emit ProposalCreated(\n      newProposal.id,\n      msg.sender,\n      targets,\n      values,\n      signatures,\n      calldatas,\n      startBlock,\n      endBlock,\n      description\n    );\n    return newProposal.id;\n  }\n\n  function queue(uint256 proposalId) public {\n    require(\n      state(proposalId) == ProposalState.Succeeded,\n      \"GovernorAlpha::queue: proposal can only be queued if it is succeeded\"\n    );\n    Proposal storage proposal = proposals[proposalId];\n    uint256 eta = add256(block.timestamp, timelock.delay());\n    for (uint256 i = 0; i < proposal.targets.length; i++) {\n      _queueOrRevert(\n        proposal.targets[i],\n        proposal.values[i],\n        proposal.signatures[i],\n        proposal.calldatas[i],\n        eta\n      );\n    }\n    proposal.eta = eta;\n    emit ProposalQueued(proposalId, eta);\n  }\n\n  function _queueOrRevert(\n    address target,\n    uint256 value,\n    string memory signature,\n    bytes memory data,\n    uint256 eta\n  ) internal {\n    require(\n      !timelock.queuedTransactions(\n        keccak256(abi.encode(target, value, signature, data, eta))\n      ),\n      \"GovernorAlpha::_queueOrRevert: proposal action already queued at eta\"\n    );\n    timelock.queueTransaction(target, value, signature, data, eta);\n  }\n\n  function execute(uint256 proposalId) public payable {\n    require(\n      state(proposalId) == ProposalState.Queued,\n      \"GovernorAlpha::execute: proposal can only be executed if it is queued\"\n    );\n    Proposal storage proposal = proposals[proposalId];\n    proposal.executed = true;\n    for (uint256 i = 0; i < proposal.targets.length; i++) {\n      timelock.executeTransaction{value: proposal.values[i]}(\n        proposal.targets[i],\n        proposal.values[i],\n        proposal.signatures[i],\n        proposal.calldatas[i],\n        proposal.eta\n      );\n    }\n    emit ProposalExecuted(proposalId);\n  }\n\n  function cancel(uint256 proposalId) public {\n    ProposalState currentState = state(proposalId);\n    require(\n      currentState != ProposalState.Executed,\n      \"GovernorAlpha::cancel: cannot cancel executed proposal\"\n    );\n\n    Proposal storage proposal = proposals[proposalId];\n    require(\n      ctx.getPriorVotes(proposal.proposer, sub256(block.number, 1)) <\n        proposalThreshold(),\n      \"GovernorAlpha::cancel: proposer above threshold\"\n    );\n\n    proposal.canceled = true;\n    for (uint256 i = 0; i < proposal.targets.length; i++) {\n      timelock.cancelTransaction(\n        proposal.targets[i],\n        proposal.values[i],\n        proposal.signatures[i],\n        proposal.calldatas[i],\n        proposal.eta\n      );\n    }\n\n    emit ProposalCanceled(proposalId);\n  }\n\n  function getActions(uint256 proposalId)\n    public\n    view\n    returns (\n      address[] memory targets,\n      uint256[] memory values,\n      string[] memory signatures,\n      bytes[] memory calldatas\n    )\n  {\n    Proposal storage p = proposals[proposalId];\n    return (p.targets, p.values, p.signatures, p.calldatas);\n  }\n\n  function getReceipt(uint256 proposalId, address voter)\n    public\n    view\n    returns (Receipt memory)\n  {\n    require(\n      proposalCount >= proposalId && proposalId > 0,\n      \"GovernorAlpha::getReceipt: invalid proposal id\"\n    );\n    return receipts[proposalId][voter];\n  }\n\n  function state(uint256 proposalId) public view returns (ProposalState) {\n    require(\n      proposalCount >= proposalId && proposalId > 0,\n      \"GovernorAlpha::state: invalid proposal id\"\n    );\n    Proposal storage proposal = proposals[proposalId];\n    if (proposal.canceled) {\n      return ProposalState.Canceled;\n    } else if (block.number <= proposal.startBlock) {\n      return ProposalState.Pending;\n    } else if (block.number <= proposal.endBlock) {\n      return ProposalState.Active;\n    } else if (\n      proposal.forVotes <= proposal.againstVotes ||\n      proposal.forVotes < quorumVotes()\n    ) {\n      return ProposalState.Defeated;\n    } else if (proposal.eta == 0) {\n      return ProposalState.Succeeded;\n    } else if (proposal.executed) {\n      return ProposalState.Executed;\n    } else if (\n      block.timestamp >= add256(proposal.eta, timelock.GRACE_PERIOD())\n    ) {\n      return ProposalState.Expired;\n    } else {\n      return ProposalState.Queued;\n    }\n  }\n\n  function castVote(uint256 proposalId, bool support) public {\n    return _castVote(msg.sender, proposalId, support);\n  }\n\n  function castVoteBySig(\n    uint256 proposalId,\n    bool support,\n    uint8 v,\n    bytes32 r,\n    bytes32 s\n  ) public {\n    bytes32 domainSeparator =\n      keccak256(\n        abi.encode(\n          DOMAIN_TYPEHASH,\n          keccak256(bytes(name)),\n          getChainId(),\n          address(this)\n        )\n      );\n    bytes32 structHash =\n      keccak256(abi.encode(BALLOT_TYPEHASH, proposalId, support));\n    bytes32 digest =\n      keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    address signatory = ecrecover(digest, v, r, s);\n    require(\n      signatory != address(0),\n      \"GovernorAlpha::castVoteBySig: invalid signature\"\n    );\n    return _castVote(signatory, proposalId, support);\n  }\n\n  function _castVote(\n    address voter,\n    uint256 proposalId,\n    bool support\n  ) internal {\n    require(\n      state(proposalId) == ProposalState.Active,\n      \"GovernorAlpha::_castVote: voting is closed\"\n    );\n    Proposal storage proposal = proposals[proposalId];\n    Receipt storage receipt = receipts[proposalId][voter];\n    require(\n      receipt.hasVoted == false,\n      \"GovernorAlpha::_castVote: voter already voted\"\n    );\n    uint96 votes = ctx.getPriorVotes(voter, proposal.startBlock);\n\n    if (support) {\n      proposal.forVotes = add256(proposal.forVotes, votes);\n    } else {\n      proposal.againstVotes = add256(proposal.againstVotes, votes);\n    }\n\n    receipt.hasVoted = true;\n    receipt.support = support;\n    receipt.votes = votes;\n\n    emit VoteCast(voter, proposalId, support, votes);\n  }\n\n  function add256(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    require(c >= a, \"addition overflow\");\n    return c;\n  }\n\n  function sub256(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b <= a, \"subtraction underflow\");\n    return a - b;\n  }\n\n  function getChainId() internal pure returns (uint256) {\n    uint256 chainId;\n    assembly {\n      chainId := chainid()\n    }\n    return chainId;\n  }\n}\n\ninterface TimelockInterface {\n  function delay() external view returns (uint256);\n\n  function GRACE_PERIOD() external view returns (uint256);\n\n  function acceptAdmin() external;\n\n  function queuedTransactions(bytes32 hash) external view returns (bool);\n\n  function queueTransaction(\n    address target,\n    uint256 value,\n    string calldata signature,\n    bytes calldata data,\n    uint256 eta\n  ) external returns (bytes32);\n\n  function cancelTransaction(\n    address target,\n    uint256 value,\n    string calldata signature,\n    bytes calldata data,\n    uint256 eta\n  ) external;\n\n  function executeTransaction(\n    address target,\n    uint256 value,\n    string calldata signature,\n    bytes calldata data,\n    uint256 eta\n  ) external payable returns (bytes memory);\n}\n\ninterface CtxInterface {\n  function getPriorVotes(address account, uint256 blockNumber)\n    external\n    view\n    returns (uint96);\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}