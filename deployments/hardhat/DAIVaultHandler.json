{
  "address": "0x443366a7a5821619D8d57405511E4fadD9964771",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract Orchestrator",
          "name": "_orchestrator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_divisor",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_ratio",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_burnFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_liquidationPenalty",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_tcapOracle",
          "type": "address"
        },
        {
          "internalType": "contract TCAP",
          "name": "_tcapAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_collateralAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_collateralOracle",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_ethOracle",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_rewardHandler",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "CollateralAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "CollateralRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_burnFee",
          "type": "uint256"
        }
      ],
      "name": "NewBurnFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_liquidationPenalty",
          "type": "uint256"
        }
      ],
      "name": "NewLiquidationPenalty",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_ratio",
          "type": "uint256"
        }
      ],
      "name": "NewRatio",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_tresury",
          "type": "address"
        }
      ],
      "name": "NewTreasury",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "Recovered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "TokensBurned",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "TokensMinted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "VaultCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_vaultId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_liquidator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_liquidationCollateral",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_reward",
          "type": "uint256"
        }
      ],
      "name": "VaultLiquidated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ETHPriceOracle",
      "outputs": [
        {
          "internalType": "contract ChainlinkOracle",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_FEE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_RATIO",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TCAPPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TCAPToken",
      "outputs": [
        {
          "internalType": "contract TCAP",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "addCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "burnFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collateralContract",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collateralPriceOracle",
      "outputs": [
        {
          "internalType": "contract ChainlinkOracle",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "counter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "createVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "divisor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "getFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ChainlinkOracle",
          "name": "_oracle",
          "type": "address"
        }
      ],
      "name": "getOraclePrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getRoleMember",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "getVault",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_vaultId",
          "type": "uint256"
        }
      ],
      "name": "getVaultRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "currentRatio",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_vaultId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxTCAP",
          "type": "uint256"
        }
      ],
      "name": "liquidateVault",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidationPenalty",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_vaultId",
          "type": "uint256"
        }
      ],
      "name": "liquidationReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "rewardCollateral",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracleDigits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ratio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "recoverERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "removeCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "requiredCollateral",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "collateral",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_vaultId",
          "type": "uint256"
        }
      ],
      "name": "requiredLiquidationTCAP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardHandler",
      "outputs": [
        {
          "internalType": "contract IRewardHandler",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_burnFee",
          "type": "uint256"
        }
      ],
      "name": "setBurnFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_liquidationPenalty",
          "type": "uint256"
        }
      ],
      "name": "setLiquidationPenalty",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_ratio",
          "type": "uint256"
        }
      ],
      "name": "setRatio",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        }
      ],
      "name": "setTreasury",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "_interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tcapOracle",
      "outputs": [
        {
          "internalType": "contract ChainlinkOracle",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasury",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userToVault",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "vaults",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "Id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "Collateral",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "Debt",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "Owner",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x5c33f991ed35645c2f1e9ab79cfbac500eb8b4e410e4698d86a1317a91e52a55",
  "receipt": {
    "to": null,
    "from": "0x294CB241EBF6fe95bbb76071c7cDa8DD62EB138e",
    "contractAddress": "0x443366a7a5821619D8d57405511E4fadD9964771",
    "transactionIndex": 37,
    "gasUsed": "3760650",
    "logsBloom": "0x
    "blockHash": "0x40fb1b29e3e43a16ecec40322e4ee97cbc86844c7dde096c0e59bf7019850f8c",
    "transactionHash": "0x5c33f991ed35645c2f1e9ab79cfbac500eb8b4e410e4698d86a1317a91e52a55",
    "logs": [
      {
        "transactionIndex": 37,
        "blockNumber": 12184055,
        "transactionHash": "0x5c33f991ed35645c2f1e9ab79cfbac500eb8b4e410e4698d86a1317a91e52a55",
        "address": "0x443366a7a5821619D8d57405511E4fadD9964771",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000294cb241ebf6fe95bbb76071c7cda8dd62eb138e"
        ],
        "data": "0x",
        "logIndex": 50,
        "blockHash": "0x40fb1b29e3e43a16ecec40322e4ee97cbc86844c7dde096c0e59bf7019850f8c"
      },
      {
        "transactionIndex": 37,
        "blockNumber": 12184055,
        "transactionHash": "0x5c33f991ed35645c2f1e9ab79cfbac500eb8b4e410e4698d86a1317a91e52a55",
        "address": "0x443366a7a5821619D8d57405511E4fadD9964771",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000294cb241ebf6fe95bbb76071c7cda8dd62eb138e",
          "0x000000000000000000000000294cb241ebf6fe95bbb76071c7cda8dd62eb138e"
        ],
        "data": "0x",
        "logIndex": 51,
        "blockHash": "0x40fb1b29e3e43a16ecec40322e4ee97cbc86844c7dde096c0e59bf7019850f8c"
      },
      {
        "transactionIndex": 37,
        "blockNumber": 12184055,
        "transactionHash": "0x5c33f991ed35645c2f1e9ab79cfbac500eb8b4e410e4698d86a1317a91e52a55",
        "address": "0x443366a7a5821619D8d57405511E4fadD9964771",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x000000000000000000000000294cb241ebf6fe95bbb76071c7cda8dd62eb138e",
          "0x000000000000000000000000373c74bce7893097ab26d22f05691907d4f2c18e"
        ],
        "data": "0x",
        "logIndex": 52,
        "blockHash": "0x40fb1b29e3e43a16ecec40322e4ee97cbc86844c7dde096c0e59bf7019850f8c"
      }
    ],
    "blockNumber": 12184055,
    "cumulativeGasUsed": "5948788",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x373C74BcE7893097ab26d22f05691907D4f2c18e",
    "10000000000",
    "200",
    "1",
    "10",
    "0xa4e581BD159B869e8290707A7FBF841fe7FE97b6",
    "0x16c52CeeCE2ed57dAd87319D91B5e3637d50aFa4",
    "0x6B175474E89094C44Da98b954EedeAC495271d0F",
    "0x6b5a75f38BeA1Ef59Bc43A5d9602e77Bcbe65e46",
    "0x2cFeaf282FE9ae050b210e7BDa65D288C40c6104",
    "0xE0c99C503c4AE5eC50aC63C59C7eF4725C355fdD",
    "0xa54074b2cc0e96a43048d4a68472F7F046aC0DA8"
  ],
  "solcInputHash": "7a2ec06170535469f280147f73cb3aa1",
  "metadata": "{\"compiler\":{\"version\":\"0.7.5+commit.eb77ed08\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract Orchestrator\",\"name\":\"_orchestrator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_divisor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ratio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_burnFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidationPenalty\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tcapOracle\",\"type\":\"address\"},{\"internalType\":\"contract TCAP\",\"name\":\"_tcapAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collateralAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collateralOracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ethOracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardHandler\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"CollateralAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"CollateralRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_burnFee\",\"type\":\"uint256\"}],\"name\":\"NewBurnFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_liquidationPenalty\",\"type\":\"uint256\"}],\"name\":\"NewLiquidationPenalty\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_ratio\",\"type\":\"uint256\"}],\"name\":\"NewRatio\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_tresury\",\"type\":\"address\"}],\"name\":\"NewTreasury\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Recovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"TokensBurned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"TokensMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"VaultCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_vaultId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_liquidator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_liquidationCollateral\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_reward\",\"type\":\"uint256\"}],\"name\":\"VaultLiquidated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ETHPriceOracle\",\"outputs\":[{\"internalType\":\"contract ChainlinkOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_RATIO\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TCAPPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TCAPToken\",\"outputs\":[{\"internalType\":\"contract TCAP\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"addCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralContract\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralPriceOracle\",\"outputs\":[{\"internalType\":\"contract ChainlinkOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"counter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"divisor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ChainlinkOracle\",\"name\":\"_oracle\",\"type\":\"address\"}],\"name\":\"getOraclePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getVault\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vaultId\",\"type\":\"uint256\"}],\"name\":\"getVaultRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"currentRatio\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vaultId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxTCAP\",\"type\":\"uint256\"}],\"name\":\"liquidateVault\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidationPenalty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vaultId\",\"type\":\"uint256\"}],\"name\":\"liquidationReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardCollateral\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracleDigits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ratio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"removeCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"requiredCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vaultId\",\"type\":\"uint256\"}],\"name\":\"requiredLiquidationTCAP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardHandler\",\"outputs\":[{\"internalType\":\"contract IRewardHandler\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_burnFee\",\"type\":\"uint256\"}],\"name\":\"setBurnFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_liquidationPenalty\",\"type\":\"uint256\"}],\"name\":\"setLiquidationPenalty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ratio\",\"type\":\"uint256\"}],\"name\":\"setRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tcapOracle\",\"outputs\":[{\"internalType\":\"contract ChainlinkOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userToVault\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"vaults\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"Id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Collateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Debt\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"Owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Cryptex.finance\",\"kind\":\"dev\",\"methods\":{\"TCAPPrice()\":{\"details\":\"TCAP token is 18 decimalsoracle totalMarketPrice must be in wei formatP = T / d P = TCAP Token Price T = Total Crypto Market Cap d = Divisor\",\"returns\":{\"price\":\"of the TCAP Token\"}},\"addCollateral(uint256)\":{\"details\":\"_amount should be higher than 0ERC20 token must be approved first\",\"params\":{\"_amount\":\"of collateral to be added\"}},\"burn(uint256)\":{\"details\":\"_amount should be higher than 0A fee of exactly burnFee must be sent as value on ETHThe fee goes to the treasury contractif reward handler is set exit rewards\",\"params\":{\"_amount\":\"of tokens to burn\"}},\"constructor\":{\"params\":{\"_burnFee\":\"uint256\",\"_collateralAddress\":\"address\",\"_collateralOracle\":\"address\",\"_divisor\":\"uint256\",\"_ethOracle\":\"address\",\"_liquidationPenalty\":\"uint256\",\"_orchestrator\":\"address\",\"_ratio\":\"uint256\",\"_rewardHandler\":\"address\",\"_tcapAddress\":\"address\",\"_tcapOracle\":\"address\",\"_treasury\":\"address\"}},\"createVault()\":{\"details\":\"Only one vault per address can be created\"},\"getFee(uint256)\":{\"details\":\"The returned value is returned in weif = (((P * A * b)/ 100))/ EP f = Burn Fee Value P = TCAP Token Price A = Amount to Burn b = Burn Fee % EP = ETH Price\",\"params\":{\"_amount\":\"to burn\"},\"returns\":{\"fee\":\"fee\"}},\"getOraclePrice(address)\":{\"params\":{\"_oracle\":\"to be the price called\"},\"returns\":{\"price\":\"price\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"getVault(uint256)\":{\"params\":{\"_id\":\"of vault\"},\"returns\":{\"_0\":\"Id, Collateral, Owner, Debt\"}},\"getVaultRatio(uint256)\":{\"details\":\"vr = (cp * (C * 100)) / D * P vr = Vault Ratio C = Vault Collateral cp = Collateral Price D = Vault Debt P = TCAP Token Price\",\"params\":{\"_vaultId\":\"id of vault\"},\"returns\":{\"currentRatio\":\"currentRatio\"}},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"liquidateVault(uint256,uint256)\":{\"details\":\"Resulting ratio must be above or equal minimun ratioA fee of exactly burnFee must be sent as value on ETHThe fee goes to the treasury contract\",\"params\":{\"_maxTCAP\":\"max amount of TCAP the liquidator is willing to pay to liquidate vault\",\"_vaultId\":\"to liquidate\"}},\"liquidationReward(uint256)\":{\"details\":\"the returned value is returned as collateral currencyR = (LT * (p  + 100)) / 100 R = Liquidation Reward LT = Required Liquidation TCAP p = liquidation penalty\",\"params\":{\"_vaultId\":\"of the vault to liquidate\"},\"returns\":{\"rewardCollateral\":\"for liquidating Vault\"}},\"mint(uint256)\":{\"details\":\"_amount should be higher than 0requires to have a vault ratio above the minimum ratioif reward handler is set stake to earn rewards\",\"params\":{\"_amount\":\"of tokens to mint\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"recoverERC20(address,uint256)\":{\"details\":\"Only owner  can call it\",\"params\":{\"_tokenAddress\":\"address\",\"_tokenAmount\":\"uint\"}},\"removeCollateral(uint256)\":{\"details\":\"reverts if the resulting ratio is less than the minimun ratio_amount should be higher than 0transfers the collateral back to the user\",\"params\":{\"_amount\":\"of collateral to remove\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"requiredCollateral(uint256)\":{\"details\":\"TCAP token is 18 decimalsC = ((P * A * r) / 100) / cp C = Required Collateral P = TCAP Token Price A = Amount to Mint cp = Collateral Price r = Minimun Ratio for Liquidation Is only divided by 100 as eth price comes in wei to cancel the additional 0s\",\"params\":{\"_amount\":\"uint amount to mint\"},\"returns\":{\"collateral\":\"of the TCAP Token\"}},\"requiredLiquidationTCAP(uint256)\":{\"details\":\"LT = ((((D * r) / 100) - cTcap) * 100) / (r - (p + 100)) cTcap = ((C * cp) / P) LT = Required TCAP D = Vault Debt C = Required Collateral P = TCAP Token Price cp = Collateral Price r = Min Vault Ratio p = Liquidation Penalty\",\"params\":{\"_vaultId\":\"of the vault to liquidate\"},\"returns\":{\"amount\":\"required of the TCAP Token\"}},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"setBurnFee(uint256)\":{\"details\":\"Only owner can call it\",\"params\":{\"_burnFee\":\"uint\"}},\"setLiquidationPenalty(uint256)\":{\"details\":\"Only owner can call itrecommended value is between 1-15% and can't be above 100%\",\"params\":{\"_liquidationPenalty\":\"uint\"}},\"setRatio(uint256)\":{\"details\":\"Only owner can call it\",\"params\":{\"_ratio\":\"uint\"}},\"setTreasury(address)\":{\"details\":\"Only owner can call it\",\"params\":{\"_treasury\":\"address\"}},\"supportsInterface(bytes4)\":{\"params\":{\"_interfaceId\":\"bytes of interface\"},\"returns\":{\"_0\":\"bool\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"ERC-20 TCAP Vault\",\"version\":1},\"userdoc\":{\"events\":{\"CollateralAdded(address,uint256,uint256)\":{\"notice\":\"An event emitted when collateral is added to a vault\"},\"CollateralRemoved(address,uint256,uint256)\":{\"notice\":\"An event emitted when collateral is removed from a vault\"},\"NewBurnFee(address,uint256)\":{\"notice\":\"An event emitted when the burn fee is updated\"},\"NewLiquidationPenalty(address,uint256)\":{\"notice\":\"An event emitted when the liquidation penalty is updated\"},\"NewRatio(address,uint256)\":{\"notice\":\"An event emitted when the ratio is updated\"},\"NewTreasury(address,address)\":{\"notice\":\"An event emitted when the treasury contract is updated\"},\"Recovered(address,uint256)\":{\"notice\":\"An event emitted when a erc20 token is recovered\"},\"TokensBurned(address,uint256,uint256)\":{\"notice\":\"An event emitted when tokens are burned\"},\"TokensMinted(address,uint256,uint256)\":{\"notice\":\"An event emitted when tokens are minted\"},\"VaultCreated(address,uint256)\":{\"notice\":\"An event emitted when a vault is created\"},\"VaultLiquidated(uint256,address,uint256,uint256)\":{\"notice\":\"An event emitted when a vault is liquidated\"}},\"kind\":\"user\",\"methods\":{\"ETHPriceOracle()\":{\"notice\":\"ETH/USD Oracle Address\"},\"MAX_FEE()\":{\"notice\":\"Maximum value that the burn fee can be set to\"},\"MIN_RATIO()\":{\"notice\":\"Minimum value that the ratio can be set to\"},\"TCAPPrice()\":{\"notice\":\"Returns the price of the TCAP token\"},\"TCAPToken()\":{\"notice\":\"TCAP Token Address\"},\"addCollateral(uint256)\":{\"notice\":\"Allows users to add collateral to their vaults\"},\"burn(uint256)\":{\"notice\":\"Pays the debt of TCAP tokens resulting them on burn, this releases collateral up to minimun vault ratio\"},\"burnFee()\":{\"notice\":\"Fee percentage of the total amount to burn charged on ETH when burning TCAP Tokens\"},\"collateralContract()\":{\"notice\":\"Collateral Token Address\"},\"collateralPriceOracle()\":{\"notice\":\"Collateral/USD Oracle Address\"},\"constructor\":{\"notice\":\"Constructor\"},\"counter()\":{\"notice\":\"Vault Id counter\"},\"createVault()\":{\"notice\":\"Allows an user to create an unique Vault\"},\"divisor()\":{\"notice\":\"Value used as divisor with the total market cap, just like the S&P 500 or any major financial index would to define the final tcap token price\"},\"getFee(uint256)\":{\"notice\":\"Returns the required fee of ETH to burn the TCAP tokens\"},\"getOraclePrice(address)\":{\"notice\":\"Returns the price of the chainlink oracle multiplied by the digits to get 18 decimals format\"},\"getVault(uint256)\":{\"notice\":\"Returns the Vault information of specified identifier\"},\"getVaultRatio(uint256)\":{\"notice\":\"Returns the Collateral Ratio of the Vault\"},\"liquidateVault(uint256,uint256)\":{\"notice\":\"Allow users to burn TCAP tokens to liquidate vaults with vault collateral ratio under the minium ratio, the liquidator receives the staked collateral of the liquidated vault at a premium\"},\"liquidationPenalty()\":{\"notice\":\"Penalty charged to vault owner when a vault is liquidated, this value goes to the liquidator\"},\"liquidationReward(uint256)\":{\"notice\":\"Returns the Reward for liquidating a vault\"},\"mint(uint256)\":{\"notice\":\"Uses collateral to generate debt on TCAP Tokens which are minted and assigend to caller\"},\"oracleDigits()\":{\"notice\":\"value used to multiply chainlink oracle for handling decimals\"},\"pause()\":{\"notice\":\"Allows the owner to Pause the Contract\"},\"ratio()\":{\"notice\":\"Minimun ratio required to prevent liquidation of vault\"},\"recoverERC20(address,uint256)\":{\"notice\":\"Added to support recovering LP Rewards from other systems such as BAL to be distributed to holders\"},\"removeCollateral(uint256)\":{\"notice\":\"Allows users to remove collateral currently not being used to generate TCAP tokens from their vaults\"},\"requiredCollateral(uint256)\":{\"notice\":\"Returns the minimal required collateral to mint TCAP token\"},\"requiredLiquidationTCAP(uint256)\":{\"notice\":\"Returns the minimal required TCAP to liquidate a Vault\"},\"rewardHandler()\":{\"notice\":\"Address of the contract that gives rewards to minters of TCAP, rewards are only given if address is set in constructor\"},\"setBurnFee(uint256)\":{\"notice\":\"Sets the burn fee percentage an user pays when burning tcap tokens\"},\"setLiquidationPenalty(uint256)\":{\"notice\":\"Sets the liquidation penalty % charged on liquidation\"},\"setRatio(uint256)\":{\"notice\":\"Sets the collateral ratio needed to mint tokens\"},\"setTreasury(address)\":{\"notice\":\"Sets the treasury contract address where fees are transfered to\"},\"supportsInterface(bytes4)\":{\"notice\":\"ERC165 Standard for support of interfaces\"},\"tcapOracle()\":{\"notice\":\"Total Market Cap/USD Oracle Address\"},\"treasury()\":{\"notice\":\"Address of the treasury contract (usually the timelock) where the funds generated by the protocol are sent\"},\"unpause()\":{\"notice\":\"Allows the owner to Unpause the Contract\"},\"userToVault(address)\":{\"notice\":\"Owner address to Vault Id\"},\"vaults(uint256)\":{\"notice\":\"Id To Vault\"}},\"notice\":\"Contract in charge of handling the TCAP Vault and stake using a Collateral ERC20\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ERC20VaultHandler.sol\":\"ERC20VaultHandler\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.6/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0;\\n\\ninterface AggregatorV3Interface {\\n\\n  function decimals() external view returns (uint8);\\n  function description() external view returns (string memory);\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n}\\n\",\"keccak256\":\"0x1862840d741dedb36e774534b877a13b5187555e3b78b8d2815f898b0dc02268\",\"license\":\"MIT\"},\"@openzeppelin/contracts/GSN/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/EnumerableSet.sol\\\";\\nimport \\\"../utils/Address.sol\\\";\\nimport \\\"../GSN/Context.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using Address for address;\\n\\n    struct RoleData {\\n        EnumerableSet.AddressSet members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping (bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view returns (bool) {\\n        return _roles[role].members.contains(account);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\\n        return _roles[role].members.length();\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {\\n        return _roles[role].members.at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to grant\\\");\\n\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to revoke\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (_roles[role].members.add(account)) {\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (_roles[role].members.remove(account)) {\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x37ff88aa5ca8f533e31b9e1cb5354816b15bb7d41c904ea1c8f5dd5a78d6da25\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0xf7c39c7e6d06ed3bda90cfefbcbf2ddc32c599c3d6721746546ad64946efccaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/introspection/ERC165Checker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Library used to query support of an interface declared via {IERC165}.\\n *\\n * Note that these functions return the actual result of the query: they do not\\n * `revert` if an interface is not supported. It is up to the caller to decide\\n * what to do in these cases.\\n */\\nlibrary ERC165Checker {\\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\\n    bytes4 private constant _INTERFACE_ID_INVALID = 0xffffffff;\\n\\n    /*\\n     * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\\n\\n    /**\\n     * @dev Returns true if `account` supports the {IERC165} interface,\\n     */\\n    function supportsERC165(address account) internal view returns (bool) {\\n        // Any contract that implements ERC165 must explicitly indicate support of\\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\\n        return _supportsERC165Interface(account, _INTERFACE_ID_ERC165) &&\\n            !_supportsERC165Interface(account, _INTERFACE_ID_INVALID);\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports the interface defined by\\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // query support of both ERC165 as per the spec and support of _interfaceId\\n        return supportsERC165(account) &&\\n            _supportsERC165Interface(account, interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports all the interfaces defined in\\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * Batch-querying can lead to gas savings by skipping repeated checks for\\n     * {IERC165} support.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\\n        // query support of ERC165 itself\\n        if (!supportsERC165(account)) {\\n            return false;\\n        }\\n\\n        // query support of each interface in _interfaceIds\\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\\n            if (!_supportsERC165Interface(account, interfaceIds[i])) {\\n                return false;\\n            }\\n        }\\n\\n        // all interfaces supported\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Query if a contract implements an interface, does not check ERC165 support\\n     * @param account The address of the contract to query for support of an interface\\n     * @param interfaceId The interface identifier, as specified in ERC-165\\n     * @return true if the contract at account indicates support of the interface with\\n     * identifier interfaceId, false otherwise\\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\\n     * the behavior of this method is undefined. This precondition can be checked\\n     * with {supportsERC165}.\\n     * Interface identification is specified in ERC-165.\\n     */\\n    function _supportsERC165Interface(address account, bytes4 interfaceId) private view returns (bool) {\\n        // success determines whether the staticcall succeeded and result determines\\n        // whether the contract at account indicates support of _interfaceId\\n        (bool success, bool result) = _callERC165SupportsInterface(account, interfaceId);\\n\\n        return (success && result);\\n    }\\n\\n    /**\\n     * @notice Calls the function with selector 0x01ffc9a7 (ERC165) and suppresses throw\\n     * @param account The address of the contract to query for support of an interface\\n     * @param interfaceId The interface identifier, as specified in ERC-165\\n     * @return success true if the STATICCALL succeeded, false otherwise\\n     * @return result true if the STATICCALL succeeded and the contract at account\\n     * indicates support of the interface with identifier interfaceId, false otherwise\\n     */\\n    function _callERC165SupportsInterface(address account, bytes4 interfaceId)\\n        private\\n        view\\n        returns (bool, bool)\\n    {\\n        bytes memory encodedParams = abi.encodeWithSelector(_INTERFACE_ID_ERC165, interfaceId);\\n        (bool success, bytes memory result) = account.staticcall{ gas: 30000 }(encodedParams);\\n        if (result.length < 32) return (false, false);\\n        return (success, abi.decode(result, (bool)));\\n    }\\n}\\n\",\"keccak256\":\"0xc75470a6e775d4023131c9e40974af58129f95989d835d60b48313f470ed71f3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xf70bc25d981e4ec9673a995ad2995d5d493ea188d3d8f388bba9c227ce09fb82\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x3b21f2c8d626de3b9925ae33e972d8bf5c8b1bffb3f4ee94daeed7d0679036e6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../GSN/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\",\"keccak256\":\"0xcbd85c86627a47fd939f1f4ee3ba626575ff2a182e1804b29f5136394449b538\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa6a15ddddcbf29d2922a1e0d4151b5d2d33da24b93cc9ebc12390e0d855532f8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../math/SafeMath.sol\\\";\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented or decremented by one. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n * Since it is not possible to overflow a 256 bit integer with increments of one, `increment` can skip the {SafeMath}\\n * overflow check, thereby saving gas. This does assume however correct usage, in that the underlying `_value` is never\\n * directly accessed.\\n */\\nlibrary Counters {\\n    using SafeMath for uint256;\\n\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        // The {SafeMath} overflow check can be skipped here, see the comment at the top\\n        counter._value += 1;\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        counter._value = counter._value.sub(1);\\n    }\\n}\\n\",\"keccak256\":\"0x21662e4254ce4ac8570b30cc7ab31435966b3cb778a56ba4d09276881cfb2437\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint256(_at(set._inner, index)));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\",\"keccak256\":\"0xae0992eb1ec30fd1ecdf2e04a6036decfc9797bf11dc1ec84b546b74318d5ec2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor () internal {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!_paused, \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(_paused, \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x065360ef3924db6b63c2160886b5de737497dd64a917e362dd8d857cda1f5ae2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x8bbbc2f5c10065ee272592ae0a7a6ceb23de2fbd81564ee0bb015ecf404d5f61\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value < 2**128, \\\"SafeCast: value doesn\\\\'t fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value < 2**64, \\\"SafeCast: value doesn\\\\'t fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value < 2**32, \\\"SafeCast: value doesn\\\\'t fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value < 2**16, \\\"SafeCast: value doesn\\\\'t fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value < 2**8, \\\"SafeCast: value doesn\\\\'t fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= -2**127 && value < 2**127, \\\"SafeCast: value doesn\\\\'t fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= -2**63 && value < 2**63, \\\"SafeCast: value doesn\\\\'t fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= -2**31 && value < 2**31, \\\"SafeCast: value doesn\\\\'t fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= -2**15 && value < 2**15, \\\"SafeCast: value doesn\\\\'t fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= -2**7 && value < 2**7, \\\"SafeCast: value doesn\\\\'t fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        require(value < 2**255, \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x7b2b8baa20fd60ab4a328c8e34c64a353651b80ba4b5b157cbb61813f6f85d55\",\"license\":\"MIT\"},\"contracts/ERC20VaultHandler.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.5;\\n\\nimport \\\"./IVaultHandler.sol\\\";\\nimport \\\"./Orchestrator.sol\\\";\\n\\n/**\\n * @title ERC-20 TCAP Vault\\n * @author Cryptex.finance\\n * @notice Contract in charge of handling the TCAP Vault and stake using a Collateral ERC20\\n */\\ncontract ERC20VaultHandler is IVaultHandler {\\n  /**\\n   * @notice Constructor\\n   * @param _orchestrator address\\n   * @param _divisor uint256\\n   * @param _ratio uint256\\n   * @param _burnFee uint256\\n   * @param _liquidationPenalty uint256\\n   * @param _tcapOracle address\\n   * @param _tcapAddress address\\n   * @param _collateralAddress address\\n   * @param _collateralOracle address\\n   * @param _ethOracle address\\n   * @param _rewardHandler address\\n   * @param _treasury address\\n   */\\n  constructor(\\n    Orchestrator _orchestrator,\\n    uint256 _divisor,\\n    uint256 _ratio,\\n    uint256 _burnFee,\\n    uint256 _liquidationPenalty,\\n    address _tcapOracle,\\n    TCAP _tcapAddress,\\n    address _collateralAddress,\\n    address _collateralOracle,\\n    address _ethOracle,\\n    address _rewardHandler,\\n    address _treasury\\n  )\\n    IVaultHandler(\\n      _orchestrator,\\n      _divisor,\\n      _ratio,\\n      _burnFee,\\n      _liquidationPenalty,\\n      _tcapOracle,\\n      _tcapAddress,\\n      _collateralAddress,\\n      _collateralOracle,\\n      _ethOracle,\\n      _rewardHandler,\\n      _treasury\\n    )\\n  {}\\n}\\n\",\"keccak256\":\"0x256b6570ee1987fe86893c56c9d80f73c90ec5099ddd77ab243a4f6d35737218\",\"license\":\"MIT\"},\"contracts/IVaultHandler.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.5;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/SafeCast.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/introspection/IERC165.sol\\\";\\nimport \\\"./TCAP.sol\\\";\\nimport \\\"./Orchestrator.sol\\\";\\nimport \\\"./oracles/ChainlinkOracle.sol\\\";\\n\\ninterface IRewardHandler {\\n  function stake(address _staker, uint256 amount) external;\\n\\n  function withdraw(address _staker, uint256 amount) external;\\n\\n  function getRewardFromVault(address _staker) external;\\n}\\n\\n/**\\n * @title TCAP Vault Handler Abstract Contract\\n * @author Cryptex.Finance\\n * @notice Contract in charge of handling the TCAP Token and stake\\n */\\nabstract contract IVaultHandler is\\n  Ownable,\\n  AccessControl,\\n  ReentrancyGuard,\\n  Pausable,\\n  IERC165\\n{\\n  /// @notice Open Zeppelin libraries\\n  using SafeMath for uint256;\\n  using SafeCast for int256;\\n  using Counters for Counters.Counter;\\n  using SafeERC20 for IERC20;\\n\\n  /**\\n   * @notice Vault object created to manage the mint and burns of TCAP tokens\\n   * @param Id, unique identifier of the vault\\n   * @param Collateral, current collateral on vault\\n   * @param Debt, current amount of TCAP tokens minted\\n   * @param Owner, owner of the vault\\n   */\\n  struct Vault {\\n    uint256 Id;\\n    uint256 Collateral;\\n    uint256 Debt;\\n    address Owner;\\n  }\\n\\n  /// @notice Vault Id counter\\n  Counters.Counter public counter;\\n\\n  /// @notice TCAP Token Address\\n  TCAP public immutable TCAPToken;\\n\\n  /// @notice Total Market Cap/USD Oracle Address\\n  ChainlinkOracle public immutable tcapOracle;\\n\\n  /// @notice Collateral Token Address\\n  IERC20 public immutable collateralContract;\\n\\n  /// @notice Collateral/USD Oracle Address\\n  ChainlinkOracle public immutable collateralPriceOracle;\\n\\n  /// @notice ETH/USD Oracle Address\\n  ChainlinkOracle public immutable ETHPriceOracle;\\n\\n  /// @notice Value used as divisor with the total market cap, just like the S&P 500 or any major financial index would to define the final tcap token price\\n  uint256 public divisor;\\n\\n  /// @notice Minimun ratio required to prevent liquidation of vault\\n  uint256 public ratio;\\n\\n  /// @notice Fee percentage of the total amount to burn charged on ETH when burning TCAP Tokens\\n  uint256 public burnFee;\\n\\n  /// @notice Penalty charged to vault owner when a vault is liquidated, this value goes to the liquidator\\n  uint256 public liquidationPenalty;\\n\\n  /// @notice Address of the contract that gives rewards to minters of TCAP, rewards are only given if address is set in constructor\\n  IRewardHandler public immutable rewardHandler;\\n\\n  /// @notice Address of the treasury contract (usually the timelock) where the funds generated by the protocol are sent\\n  address public treasury;\\n\\n  /// @notice Owner address to Vault Id\\n  mapping(address => uint256) public userToVault;\\n\\n  /// @notice Id To Vault\\n  mapping(uint256 => Vault) public vaults;\\n\\n  /// @notice value used to multiply chainlink oracle for handling decimals\\n  uint256 public constant oracleDigits = 10000000000;\\n\\n  /// @notice Minimum value that the ratio can be set to\\n  uint256 public constant MIN_RATIO = 150;\\n\\n  /// @notice Maximum value that the burn fee can be set to\\n  uint256 public constant MAX_FEE = 10;\\n\\n  /**\\n   * @dev the computed interface ID according to ERC-165. The interface ID is a XOR of interface method selectors.\\n   * setRatio.selector ^\\n   * setBurnFee.selector ^\\n   * setLiquidationPenalty.selector ^\\n   * pause.selector ^\\n   * unpause.selector =>  0x9e75ab0c\\n   */\\n  bytes4 private constant _INTERFACE_ID_IVAULT = 0x9e75ab0c;\\n\\n  /**\\n   * @dev the computed interface ID according to ERC-165. The interface ID is a XOR of interface method selectors.\\n   * queueTransaction.selector ^\\n   * cancelTransaction.selector ^\\n   * executeTransaction.selector  =>  0x6b5cc770\\n   */\\n  bytes4 private constant _INTERFACE_ID_TIMELOCK = 0x6b5cc770;\\n\\n  /// @dev bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\\n  bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\\n\\n  /// @notice An event emitted when the ratio is updated\\n  event NewRatio(address indexed _owner, uint256 _ratio);\\n\\n  /// @notice An event emitted when the burn fee is updated\\n  event NewBurnFee(address indexed _owner, uint256 _burnFee);\\n\\n  /// @notice An event emitted when the liquidation penalty is updated\\n  event NewLiquidationPenalty(\\n    address indexed _owner,\\n    uint256 _liquidationPenalty\\n  );\\n\\n  /// @notice An event emitted when the treasury contract is updated\\n  event NewTreasury(address indexed _owner, address _tresury);\\n\\n  /// @notice An event emitted when a vault is created\\n  event VaultCreated(address indexed _owner, uint256 indexed _id);\\n\\n  /// @notice An event emitted when collateral is added to a vault\\n  event CollateralAdded(\\n    address indexed _owner,\\n    uint256 indexed _id,\\n    uint256 _amount\\n  );\\n\\n  /// @notice An event emitted when collateral is removed from a vault\\n  event CollateralRemoved(\\n    address indexed _owner,\\n    uint256 indexed _id,\\n    uint256 _amount\\n  );\\n\\n  /// @notice An event emitted when tokens are minted\\n  event TokensMinted(\\n    address indexed _owner,\\n    uint256 indexed _id,\\n    uint256 _amount\\n  );\\n\\n  /// @notice An event emitted when tokens are burned\\n  event TokensBurned(\\n    address indexed _owner,\\n    uint256 indexed _id,\\n    uint256 _amount\\n  );\\n\\n  /// @notice An event emitted when a vault is liquidated\\n  event VaultLiquidated(\\n    uint256 indexed _vaultId,\\n    address indexed _liquidator,\\n    uint256 _liquidationCollateral,\\n    uint256 _reward\\n  );\\n\\n  /// @notice An event emitted when a erc20 token is recovered\\n  event Recovered(address _token, uint256 _amount);\\n\\n  /**\\n   * @notice Constructor\\n   * @param _orchestrator address\\n   * @param _divisor uint256\\n   * @param _ratio uint256\\n   * @param _burnFee uint256\\n   * @param _liquidationPenalty uint256\\n   * @param _tcapOracle address\\n   * @param _tcapAddress address\\n   * @param _collateralAddress address\\n   * @param _collateralOracle address\\n   * @param _ethOracle address\\n   * @param _rewardHandler address\\n   * @param _treasury address\\n   */\\n  constructor(\\n    Orchestrator _orchestrator,\\n    uint256 _divisor,\\n    uint256 _ratio,\\n    uint256 _burnFee,\\n    uint256 _liquidationPenalty,\\n    address _tcapOracle,\\n    TCAP _tcapAddress,\\n    address _collateralAddress,\\n    address _collateralOracle,\\n    address _ethOracle,\\n    address _rewardHandler,\\n    address _treasury\\n  ) {\\n    require(\\n      _liquidationPenalty.add(100) < _ratio,\\n      \\\"VaultHandler::constructor: liquidation penalty too high\\\"\\n    );\\n    require(\\n      _ratio >= MIN_RATIO,\\n      \\\"VaultHandler::constructor: ratio lower than MIN_RATIO\\\"\\n    );\\n\\n    require(\\n      _burnFee <= MAX_FEE,\\n      \\\"VaultHandler::constructor: burn fee higher than MAX_FEE\\\"\\n    );\\n\\n    require(\\n      ERC165Checker.supportsInterface(_treasury, _INTERFACE_ID_TIMELOCK),\\n      \\\"VaultHandler::constructor: not a valid treasury\\\"\\n    );\\n\\n    divisor = _divisor;\\n    ratio = _ratio;\\n    burnFee = _burnFee;\\n    liquidationPenalty = _liquidationPenalty;\\n    tcapOracle = ChainlinkOracle(_tcapOracle);\\n    collateralContract = IERC20(_collateralAddress);\\n    collateralPriceOracle = ChainlinkOracle(_collateralOracle);\\n    ETHPriceOracle = ChainlinkOracle(_ethOracle);\\n    TCAPToken = _tcapAddress;\\n    rewardHandler = IRewardHandler(_rewardHandler);\\n    treasury = _treasury;\\n\\n    /// @dev counter starts in 1 as 0 is reserved for empty objects\\n    counter.increment();\\n\\n    /// @dev transfer ownership to orchestrator\\n    _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n    transferOwnership(address(_orchestrator));\\n  }\\n\\n  /// @notice Reverts if the user hasn't created a vault.\\n  modifier vaultExists() {\\n    require(\\n      userToVault[msg.sender] != 0,\\n      \\\"VaultHandler::vaultExists: no vault created\\\"\\n    );\\n    _;\\n  }\\n\\n  /// @notice Reverts if value is 0.\\n  modifier notZero(uint256 _value) {\\n    require(_value != 0, \\\"VaultHandler::notZero: value can't be 0\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @notice Sets the collateral ratio needed to mint tokens\\n   * @param _ratio uint\\n   * @dev Only owner can call it\\n   */\\n  function setRatio(uint256 _ratio) external virtual onlyOwner {\\n    require(\\n      _ratio >= MIN_RATIO,\\n      \\\"VaultHandler::setRatio: ratio lower than MIN_RATIO\\\"\\n    );\\n    ratio = _ratio;\\n    emit NewRatio(msg.sender, _ratio);\\n  }\\n\\n  /**\\n   * @notice Sets the burn fee percentage an user pays when burning tcap tokens\\n   * @param _burnFee uint\\n   * @dev Only owner can call it\\n   */\\n  function setBurnFee(uint256 _burnFee) external virtual onlyOwner {\\n    require(\\n      _burnFee <= MAX_FEE,\\n      \\\"VaultHandler::setBurnFee: burn fee higher than MAX_FEE\\\"\\n    );\\n    burnFee = _burnFee;\\n    emit NewBurnFee(msg.sender, _burnFee);\\n  }\\n\\n  /**\\n   * @notice Sets the liquidation penalty % charged on liquidation\\n   * @param _liquidationPenalty uint\\n   * @dev Only owner can call it\\n   * @dev recommended value is between 1-15% and can't be above 100%\\n   */\\n  function setLiquidationPenalty(uint256 _liquidationPenalty)\\n    external\\n    virtual\\n    onlyOwner\\n  {\\n    require(\\n      _liquidationPenalty.add(100) < ratio,\\n      \\\"VaultHandler::setLiquidationPenalty: liquidation penalty too high\\\"\\n    );\\n\\n    liquidationPenalty = _liquidationPenalty;\\n    emit NewLiquidationPenalty(msg.sender, _liquidationPenalty);\\n  }\\n\\n  /**\\n   * @notice Sets the treasury contract address where fees are transfered to\\n   * @param _treasury address\\n   * @dev Only owner can call it\\n   */\\n  function setTreasury(address _treasury) external virtual onlyOwner {\\n    require(\\n      ERC165Checker.supportsInterface(_treasury, _INTERFACE_ID_TIMELOCK),\\n      \\\"VaultHandler::setTreasury: not a valid treasury\\\"\\n    );\\n    treasury = (_treasury);\\n    emit NewTreasury(msg.sender, _treasury);\\n  }\\n\\n  /**\\n   * @notice Allows an user to create an unique Vault\\n   * @dev Only one vault per address can be created\\n   */\\n  function createVault() external virtual whenNotPaused {\\n    require(\\n      userToVault[msg.sender] == 0,\\n      \\\"VaultHandler::createVault: vault already created\\\"\\n    );\\n\\n    uint256 id = counter.current();\\n    userToVault[msg.sender] = id;\\n    Vault memory vault = Vault(id, 0, 0, msg.sender);\\n    vaults[id] = vault;\\n    counter.increment();\\n    emit VaultCreated(msg.sender, id);\\n  }\\n\\n  /**\\n   * @notice Allows users to add collateral to their vaults\\n   * @param _amount of collateral to be added\\n   * @dev _amount should be higher than 0\\n   * @dev ERC20 token must be approved first\\n   */\\n  function addCollateral(uint256 _amount)\\n    external\\n    virtual\\n    nonReentrant\\n    vaultExists\\n    whenNotPaused\\n    notZero(_amount)\\n  {\\n    require(\\n      collateralContract.transferFrom(msg.sender, address(this), _amount),\\n      \\\"VaultHandler::addCollateral: ERC20 transfer did not succeed\\\"\\n    );\\n\\n    Vault storage vault = vaults[userToVault[msg.sender]];\\n    vault.Collateral = vault.Collateral.add(_amount);\\n    emit CollateralAdded(msg.sender, vault.Id, _amount);\\n  }\\n\\n  /**\\n   * @notice Allows users to remove collateral currently not being used to generate TCAP tokens from their vaults\\n   * @param _amount of collateral to remove\\n   * @dev reverts if the resulting ratio is less than the minimun ratio\\n   * @dev _amount should be higher than 0\\n   * @dev transfers the collateral back to the user\\n   */\\n  function removeCollateral(uint256 _amount)\\n    external\\n    virtual\\n    nonReentrant\\n    vaultExists\\n    whenNotPaused\\n    notZero(_amount)\\n  {\\n    Vault storage vault = vaults[userToVault[msg.sender]];\\n    uint256 currentRatio = getVaultRatio(vault.Id);\\n\\n    require(\\n      vault.Collateral >= _amount,\\n      \\\"VaultHandler::removeCollateral: retrieve amount higher than collateral\\\"\\n    );\\n\\n    vault.Collateral = vault.Collateral.sub(_amount);\\n    if (currentRatio != 0) {\\n      require(\\n        getVaultRatio(vault.Id) >= ratio,\\n        \\\"VaultHandler::removeCollateral: collateral below min required ratio\\\"\\n      );\\n    }\\n    require(\\n      collateralContract.transfer(msg.sender, _amount),\\n      \\\"VaultHandler::removeCollateral: ERC20 transfer did not succeed\\\"\\n    );\\n    emit CollateralRemoved(msg.sender, vault.Id, _amount);\\n  }\\n\\n  /**\\n   * @notice Uses collateral to generate debt on TCAP Tokens which are minted and assigend to caller\\n   * @param _amount of tokens to mint\\n   * @dev _amount should be higher than 0\\n   * @dev requires to have a vault ratio above the minimum ratio\\n   * @dev if reward handler is set stake to earn rewards\\n   */\\n  function mint(uint256 _amount)\\n    external\\n    virtual\\n    nonReentrant\\n    vaultExists\\n    whenNotPaused\\n    notZero(_amount)\\n  {\\n    Vault storage vault = vaults[userToVault[msg.sender]];\\n    uint256 collateral = requiredCollateral(_amount);\\n\\n    require(\\n      vault.Collateral >= collateral,\\n      \\\"VaultHandler::mint: not enough collateral\\\"\\n    );\\n\\n    vault.Debt = vault.Debt.add(_amount);\\n    require(\\n      getVaultRatio(vault.Id) >= ratio,\\n      \\\"VaultHandler::mint: collateral below min required ratio\\\"\\n    );\\n\\n    if (address(rewardHandler) != address(0)) {\\n      rewardHandler.stake(msg.sender, _amount);\\n    }\\n\\n    TCAPToken.mint(msg.sender, _amount);\\n    emit TokensMinted(msg.sender, vault.Id, _amount);\\n  }\\n\\n  /**\\n   * @notice Pays the debt of TCAP tokens resulting them on burn, this releases collateral up to minimun vault ratio\\n   * @param _amount of tokens to burn\\n   * @dev _amount should be higher than 0\\n   * @dev A fee of exactly burnFee must be sent as value on ETH\\n   * @dev The fee goes to the treasury contract\\n   * @dev if reward handler is set exit rewards\\n   */\\n  function burn(uint256 _amount)\\n    external\\n    payable\\n    virtual\\n    nonReentrant\\n    vaultExists\\n    whenNotPaused\\n    notZero(_amount)\\n  {\\n    uint256 fee = getFee(_amount);\\n    require(\\n      msg.value >= fee,\\n      \\\"VaultHandler::burn: burn fee less than required\\\"\\n    );\\n\\n    Vault memory vault = vaults[userToVault[msg.sender]];\\n\\n    _burn(vault.Id, _amount);\\n\\n    if (address(rewardHandler) != address(0)) {\\n      rewardHandler.withdraw(msg.sender, _amount);\\n      rewardHandler.getRewardFromVault(msg.sender);\\n    }\\n    safeTransferETH(treasury, fee);\\n\\n    //send back ETH above fee\\n    safeTransferETH(msg.sender, msg.value.sub(fee));\\n    emit TokensBurned(msg.sender, vault.Id, _amount);\\n  }\\n\\n  /**\\n   * @notice Allow users to burn TCAP tokens to liquidate vaults with vault collateral ratio under the minium ratio, the liquidator receives the staked collateral of the liquidated vault at a premium\\n   * @param _vaultId to liquidate\\n   * @param _maxTCAP max amount of TCAP the liquidator is willing to pay to liquidate vault\\n   * @dev Resulting ratio must be above or equal minimun ratio\\n   * @dev A fee of exactly burnFee must be sent as value on ETH\\n   * @dev The fee goes to the treasury contract\\n   */\\n  function liquidateVault(uint256 _vaultId, uint256 _maxTCAP)\\n    external\\n    payable\\n    nonReentrant\\n    whenNotPaused\\n  {\\n    Vault storage vault = vaults[_vaultId];\\n    require(vault.Id != 0, \\\"VaultHandler::liquidateVault: no vault created\\\");\\n\\n    uint256 vaultRatio = getVaultRatio(vault.Id);\\n    require(\\n      vaultRatio < ratio,\\n      \\\"VaultHandler::liquidateVault: vault is not liquidable\\\"\\n    );\\n\\n    uint256 requiredTCAP = requiredLiquidationTCAP(vault.Id);\\n    require(\\n      _maxTCAP >= requiredTCAP,\\n      \\\"VaultHandler::liquidateVault: liquidation amount different than required\\\"\\n    );\\n\\n    uint256 fee = getFee(requiredTCAP);\\n    require(\\n      msg.value >= fee,\\n      \\\"VaultHandler::liquidateVault: burn fee less than required\\\"\\n    );\\n\\n    uint256 reward = liquidationReward(vault.Id);\\n    _burn(vault.Id, requiredTCAP);\\n\\n    //Removes the collateral that is rewarded to liquidator\\n    vault.Collateral = vault.Collateral.sub(reward);\\n\\n    // Triggers update of CTX Rewards\\n    if (address(rewardHandler) != address(0)) {\\n      rewardHandler.withdraw(vault.Owner, requiredTCAP);\\n    }\\n\\n    require(\\n      collateralContract.transfer(msg.sender, reward),\\n      \\\"VaultHandler::liquidateVault: ERC20 transfer did not succeed\\\"\\n    );\\n    safeTransferETH(treasury, fee);\\n\\n    //send back ETH above fee\\n    safeTransferETH(msg.sender, msg.value.sub(fee));\\n    emit VaultLiquidated(vault.Id, msg.sender, requiredTCAP, reward);\\n  }\\n\\n  /**\\n   * @notice Allows the owner to Pause the Contract\\n   */\\n  function pause() external onlyOwner {\\n    _pause();\\n  }\\n\\n  /**\\n   * @notice Allows the owner to Unpause the Contract\\n   */\\n  function unpause() external onlyOwner {\\n    _unpause();\\n  }\\n\\n  /**\\n   * @notice  Added to support recovering LP Rewards from other systems such as BAL to be distributed to holders\\n   * @param _tokenAddress address\\n   * @param _tokenAmount uint\\n   * @dev Only owner  can call it\\n   */\\n  function recoverERC20(address _tokenAddress, uint256 _tokenAmount)\\n    external\\n    onlyOwner\\n  {\\n    // Cannot recover the collateral token\\n    require(\\n      _tokenAddress != address(collateralContract),\\n      \\\"Cannot withdraw the collateral tokens\\\"\\n    );\\n    IERC20(_tokenAddress).safeTransfer(owner(), _tokenAmount);\\n    emit Recovered(_tokenAddress, _tokenAmount);\\n  }\\n\\n  /**\\n   * @notice Allows the safe transfer of ETH\\n   * @param _to account to transfer ETH\\n   * @param _value amount of ETH\\n   */\\n  function safeTransferETH(address _to, uint256 _value) internal {\\n    (bool success, ) = _to.call{value: _value}(new bytes(0));\\n    require(success, \\\"ETHVaultHandler::safeTransferETH: ETH transfer failed\\\");\\n  }\\n\\n  /**\\n   * @notice ERC165 Standard for support of interfaces\\n   * @param _interfaceId bytes of interface\\n   * @return bool\\n   */\\n  function supportsInterface(bytes4 _interfaceId)\\n    external\\n    pure\\n    override\\n    returns (bool)\\n  {\\n    return (_interfaceId == _INTERFACE_ID_IVAULT ||\\n      _interfaceId == _INTERFACE_ID_ERC165);\\n  }\\n\\n  /**\\n   * @notice Returns the Vault information of specified identifier\\n   * @param _id of vault\\n   * @return Id, Collateral, Owner, Debt\\n   */\\n  function getVault(uint256 _id)\\n    external\\n    view\\n    virtual\\n    returns (\\n      uint256,\\n      uint256,\\n      address,\\n      uint256\\n    )\\n  {\\n    Vault memory vault = vaults[_id];\\n    return (vault.Id, vault.Collateral, vault.Owner, vault.Debt);\\n  }\\n\\n  /**\\n   * @notice Returns the price of the chainlink oracle multiplied by the digits to get 18 decimals format\\n   * @param _oracle to be the price called\\n   * @return price\\n   */\\n  function getOraclePrice(ChainlinkOracle _oracle)\\n    public\\n    view\\n    virtual\\n    returns (uint256 price)\\n  {\\n    price = _oracle.getLatestAnswer().toUint256().mul(oracleDigits);\\n  }\\n\\n  /**\\n   * @notice Returns the price of the TCAP token\\n   * @return price of the TCAP Token\\n   * @dev TCAP token is 18 decimals\\n   * @dev oracle totalMarketPrice must be in wei format\\n   * @dev P = T / d\\n   * P = TCAP Token Price\\n   * T = Total Crypto Market Cap\\n   * d = Divisor\\n   */\\n  function TCAPPrice() public view virtual returns (uint256 price) {\\n    uint256 totalMarketPrice = getOraclePrice(tcapOracle);\\n    price = totalMarketPrice.div(divisor);\\n  }\\n\\n  /**\\n   * @notice Returns the minimal required collateral to mint TCAP token\\n   * @param _amount uint amount to mint\\n   * @return collateral of the TCAP Token\\n   * @dev TCAP token is 18 decimals\\n   * @dev C = ((P * A * r) / 100) / cp\\n   * C = Required Collateral\\n   * P = TCAP Token Price\\n   * A = Amount to Mint\\n   * cp = Collateral Price\\n   * r = Minimun Ratio for Liquidation\\n   * Is only divided by 100 as eth price comes in wei to cancel the additional 0s\\n   */\\n  function requiredCollateral(uint256 _amount)\\n    public\\n    view\\n    virtual\\n    returns (uint256 collateral)\\n  {\\n    uint256 tcapPrice = TCAPPrice();\\n    uint256 collateralPrice = getOraclePrice(collateralPriceOracle);\\n    collateral = ((tcapPrice.mul(_amount).mul(ratio)).div(100)).div(\\n      collateralPrice\\n    );\\n  }\\n\\n  /**\\n   * @notice Returns the minimal required TCAP to liquidate a Vault\\n   * @param _vaultId of the vault to liquidate\\n   * @return amount required of the TCAP Token\\n   * @dev LT = ((((D * r) / 100) - cTcap) * 100) / (r - (p + 100))\\n   * cTcap = ((C * cp) / P)\\n   * LT = Required TCAP\\n   * D = Vault Debt\\n   * C = Required Collateral\\n   * P = TCAP Token Price\\n   * cp = Collateral Price\\n   * r = Min Vault Ratio\\n   * p = Liquidation Penalty\\n   */\\n  function requiredLiquidationTCAP(uint256 _vaultId)\\n    public\\n    view\\n    virtual\\n    returns (uint256 amount)\\n  {\\n    Vault memory vault = vaults[_vaultId];\\n    uint256 tcapPrice = TCAPPrice();\\n    uint256 collateralPrice = getOraclePrice(collateralPriceOracle);\\n    uint256 collateralTcap =\\n      (vault.Collateral.mul(collateralPrice)).div(tcapPrice);\\n    uint256 reqDividend =\\n      (((vault.Debt.mul(ratio)).div(100)).sub(collateralTcap)).mul(100);\\n    uint256 reqDivisor = ratio.sub(liquidationPenalty.add(100));\\n    amount = reqDividend.div(reqDivisor);\\n  }\\n\\n  /**\\n   * @notice Returns the Reward for liquidating a vault\\n   * @param _vaultId of the vault to liquidate\\n   * @return rewardCollateral for liquidating Vault\\n   * @dev the returned value is returned as collateral currency\\n   * @dev R = (LT * (p  + 100)) / 100\\n   * R = Liquidation Reward\\n   * LT = Required Liquidation TCAP\\n   * p = liquidation penalty\\n   */\\n  function liquidationReward(uint256 _vaultId)\\n    public\\n    view\\n    virtual\\n    returns (uint256 rewardCollateral)\\n  {\\n    uint256 req = requiredLiquidationTCAP(_vaultId);\\n    uint256 tcapPrice = TCAPPrice();\\n    uint256 collateralPrice = getOraclePrice(collateralPriceOracle);\\n    uint256 reward = (req.mul(liquidationPenalty.add(100)));\\n    rewardCollateral = (reward.mul(tcapPrice)).div(collateralPrice.mul(100));\\n  }\\n\\n  /**\\n   * @notice Returns the Collateral Ratio of the Vault\\n   * @param _vaultId id of vault\\n   * @return currentRatio\\n   * @dev vr = (cp * (C * 100)) / D * P\\n   * vr = Vault Ratio\\n   * C = Vault Collateral\\n   * cp = Collateral Price\\n   * D = Vault Debt\\n   * P = TCAP Token Price\\n   */\\n  function getVaultRatio(uint256 _vaultId)\\n    public\\n    view\\n    virtual\\n    returns (uint256 currentRatio)\\n  {\\n    Vault memory vault = vaults[_vaultId];\\n    if (vault.Id == 0 || vault.Debt == 0) {\\n      currentRatio = 0;\\n    } else {\\n      uint256 collateralPrice = getOraclePrice(collateralPriceOracle);\\n      currentRatio = (\\n        (collateralPrice.mul(vault.Collateral.mul(100))).div(\\n          vault.Debt.mul(TCAPPrice())\\n        )\\n      );\\n    }\\n  }\\n\\n  /**\\n   * @notice Returns the required fee of ETH to burn the TCAP tokens\\n   * @param _amount to burn\\n   * @return fee\\n   * @dev The returned value is returned in wei\\n   * @dev f = (((P * A * b)/ 100))/ EP\\n   * f = Burn Fee Value\\n   * P = TCAP Token Price\\n   * A = Amount to Burn\\n   * b = Burn Fee %\\n   * EP = ETH Price\\n   */\\n  function getFee(uint256 _amount) public view virtual returns (uint256 fee) {\\n    uint256 ethPrice = getOraclePrice(ETHPriceOracle);\\n    fee = (TCAPPrice().mul(_amount).mul(burnFee)).div(100).div(ethPrice);\\n  }\\n\\n  /**\\n   * @notice Burns an amount of TCAP Tokens\\n   * @param _vaultId vault id\\n   * @param _amount to burn\\n   */\\n  function _burn(uint256 _vaultId, uint256 _amount) internal {\\n    Vault storage vault = vaults[_vaultId];\\n    require(\\n      vault.Debt >= _amount,\\n      \\\"VaultHandler::burn: amount greater than debt\\\"\\n    );\\n    vault.Debt = vault.Debt.sub(_amount);\\n    TCAPToken.burn(msg.sender, _amount);\\n  }\\n}\\n\",\"keccak256\":\"0x4fd0bbeee84185f16b40d839eb763821cad3144532e59af4063aef934a0e1a47\",\"license\":\"MIT\"},\"contracts/Orchestrator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.5;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/introspection/ERC165Checker.sol\\\";\\nimport \\\"./IVaultHandler.sol\\\";\\nimport \\\"./TCAP.sol\\\";\\nimport \\\"./oracles/ChainlinkOracle.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title TCAP Orchestrator\\n * @author Cryptex.finance\\n * @notice Orchestrator contract in charge of managing the settings of the vaults, rewards and TCAP token. It acts as the owner of these contracts.\\n */\\ncontract Orchestrator is Ownable {\\n  /// @dev Enum which saves the available functions to emergency call.\\n  enum Functions {BURNFEE, LIQUIDATION, PAUSE}\\n\\n  /// @notice Address that can set to 0 the fees or pause the vaults in an emergency event\\n  address public guardian;\\n\\n  /** @dev Interface constants*/\\n  bytes4 private constant _INTERFACE_ID_IVAULT = 0x9e75ab0c;\\n  bytes4 private constant _INTERFACE_ID_TCAP = 0xbd115939;\\n  bytes4 private constant _INTERFACE_ID_CHAINLINK_ORACLE = 0x85be402b;\\n\\n  /// @dev tracks which vault was emergency called\\n  mapping(IVaultHandler => mapping(Functions => bool)) private emergencyCalled;\\n\\n  /// @notice An event emitted when the guardian is updated\\n  event GuardianSet(address indexed _owner, address guardian);\\n\\n  /// @notice An event emitted when a transaction is executed\\n  event TransactionExecuted(\\n    address indexed target,\\n    uint256 value,\\n    string signature,\\n    bytes data\\n  );\\n\\n  /**\\n   * @notice Constructor\\n   * @param _guardian The guardian address\\n   */\\n  constructor(address _guardian) {\\n    require(\\n      _guardian != address(0),\\n      \\\"Orchestrator::constructor: guardian can't be zero\\\"\\n    );\\n    guardian = _guardian;\\n  }\\n\\n  /// @notice Throws if called by any account other than the guardian\\n  modifier onlyGuardian() {\\n    require(\\n      msg.sender == guardian,\\n      \\\"Orchestrator::onlyGuardian: caller is not the guardian\\\"\\n    );\\n    _;\\n  }\\n\\n  /**\\n   * @notice Throws if vault is not valid.\\n   * @param _vault address\\n   */\\n  modifier validVault(IVaultHandler _vault) {\\n    require(\\n      ERC165Checker.supportsInterface(address(_vault), _INTERFACE_ID_IVAULT),\\n      \\\"Orchestrator::validVault: not a valid vault\\\"\\n    );\\n    _;\\n  }\\n\\n  /**\\n   * @notice Throws if TCAP Token is not valid\\n   * @param _tcap address\\n   */\\n  modifier validTCAP(TCAP _tcap) {\\n    require(\\n      ERC165Checker.supportsInterface(address(_tcap), _INTERFACE_ID_TCAP),\\n      \\\"Orchestrator::validTCAP: not a valid TCAP ERC20\\\"\\n    );\\n    _;\\n  }\\n\\n  /**\\n   * @notice Throws if Chainlink Oracle is not valid\\n   * @param _oracle address\\n   */\\n  modifier validChainlinkOracle(address _oracle) {\\n    require(\\n      ERC165Checker.supportsInterface(\\n        address(_oracle),\\n        _INTERFACE_ID_CHAINLINK_ORACLE\\n      ),\\n      \\\"Orchestrator::validChainlinkOrchestrator: not a valid Chainlink Oracle\\\"\\n    );\\n    _;\\n  }\\n\\n  /**\\n   * @notice Sets the guardian of the orchestrator\\n   * @param _guardian address of the guardian\\n   * @dev Only owner can call it\\n   */\\n  function setGuardian(address _guardian) external onlyOwner {\\n    require(\\n      _guardian != address(0),\\n      \\\"Orchestrator::setGuardian: guardian can't be zero\\\"\\n    );\\n    guardian = _guardian;\\n    emit GuardianSet(msg.sender, _guardian);\\n  }\\n\\n  /**\\n   * @notice Sets the ratio of a vault\\n   * @param _vault address\\n   * @param _ratio value\\n   * @dev Only owner can call it\\n   */\\n  function setRatio(IVaultHandler _vault, uint256 _ratio)\\n    external\\n    onlyOwner\\n    validVault(_vault)\\n  {\\n    _vault.setRatio(_ratio);\\n  }\\n\\n  /**\\n   * @notice Sets the burn fee of a vault\\n   * @param _vault address\\n   * @param _burnFee value\\n   * @dev Only owner can call it\\n   */\\n  function setBurnFee(IVaultHandler _vault, uint256 _burnFee)\\n    external\\n    onlyOwner\\n    validVault(_vault)\\n  {\\n    _vault.setBurnFee(_burnFee);\\n  }\\n\\n  /**\\n   * @notice Sets the burn fee to 0, only used on a black swan event\\n   * @param _vault address\\n   * @dev Only guardian can call it\\n   * @dev Validates if _vault is valid\\n   */\\n  function setEmergencyBurnFee(IVaultHandler _vault)\\n    external\\n    onlyGuardian\\n    validVault(_vault)\\n  {\\n    require(\\n      emergencyCalled[_vault][Functions.BURNFEE] != true,\\n      \\\"Orchestrator::setEmergencyBurnFee: emergency call already used\\\"\\n    );\\n    emergencyCalled[_vault][Functions.BURNFEE] = true;\\n    _vault.setBurnFee(0);\\n  }\\n\\n  /**\\n   * @notice Sets the liquidation penalty of a vault\\n   * @param _vault address\\n   * @param _liquidationPenalty value\\n   * @dev Only owner can call it\\n   */\\n  function setLiquidationPenalty(\\n    IVaultHandler _vault,\\n    uint256 _liquidationPenalty\\n  ) external onlyOwner validVault(_vault) {\\n    _vault.setLiquidationPenalty(_liquidationPenalty);\\n  }\\n\\n  /**\\n   * @notice Sets the liquidation penalty of a vault to 0, only used on a black swan event\\n   * @param _vault address\\n   * @dev Only guardian can call it\\n   * @dev Validates if _vault is valid\\n   */\\n  function setEmergencyLiquidationPenalty(IVaultHandler _vault)\\n    external\\n    onlyGuardian\\n    validVault(_vault)\\n  {\\n    require(\\n      emergencyCalled[_vault][Functions.LIQUIDATION] != true,\\n      \\\"Orchestrator::setEmergencyLiquidationPenalty: emergency call already used\\\"\\n    );\\n    emergencyCalled[_vault][Functions.LIQUIDATION] = true;\\n    _vault.setLiquidationPenalty(0);\\n  }\\n\\n  /**\\n   * @notice Pauses the Vault\\n   * @param _vault address\\n   * @dev Only guardian can call it\\n   * @dev Validates if _vault is valid\\n   */\\n  function pauseVault(IVaultHandler _vault)\\n    external\\n    onlyGuardian\\n    validVault(_vault)\\n  {\\n    require(\\n      emergencyCalled[_vault][Functions.PAUSE] != true,\\n      \\\"Orchestrator::pauseVault: emergency call already used\\\"\\n    );\\n    emergencyCalled[_vault][Functions.PAUSE] = true;\\n    _vault.pause();\\n  }\\n\\n  /**\\n   * @notice Unpauses the Vault\\n   * @param _vault address\\n   * @dev Only guardian can call it\\n   * @dev Validates if _vault is valid\\n   */\\n  function unpauseVault(IVaultHandler _vault)\\n    external\\n    onlyGuardian\\n    validVault(_vault)\\n  {\\n    _vault.unpause();\\n  }\\n\\n  /**\\n   * @notice Enables or disables the TCAP Cap\\n   * @param _tcap address\\n   * @param _enable bool\\n   * @dev Only owner can call it\\n   * @dev Validates if _tcap is valid\\n   */\\n  function enableTCAPCap(TCAP _tcap, bool _enable)\\n    external\\n    onlyOwner\\n    validTCAP(_tcap)\\n  {\\n    _tcap.enableCap(_enable);\\n  }\\n\\n  /**\\n   * @notice Sets the TCAP maximum minting value\\n   * @param _tcap address\\n   * @param _cap uint value\\n   * @dev Only owner can call it\\n   * @dev Validates if _tcap is valid\\n   */\\n  function setTCAPCap(TCAP _tcap, uint256 _cap)\\n    external\\n    onlyOwner\\n    validTCAP(_tcap)\\n  {\\n    _tcap.setCap(_cap);\\n  }\\n\\n  /**\\n   * @notice Adds Vault to TCAP ERC20\\n   * @param _tcap address\\n   * @param _vault address\\n   * @dev Only owner can call it\\n   * @dev Validates if _tcap is valid\\n   * @dev Validates if _vault is valid\\n   */\\n  function addTCAPVault(TCAP _tcap, IVaultHandler _vault)\\n    external\\n    onlyOwner\\n    validTCAP(_tcap)\\n    validVault(_vault)\\n  {\\n    _tcap.addVaultHandler(address(_vault));\\n  }\\n\\n  /**\\n   * @notice Removes Vault to TCAP ERC20\\n   * @param _tcap address\\n   * @param _vault address\\n   * @dev Only owner can call it\\n   * @dev Validates if _tcap is valid\\n   * @dev Validates if _vault is valid\\n   */\\n  function removeTCAPVault(TCAP _tcap, IVaultHandler _vault)\\n    external\\n    onlyOwner\\n    validTCAP(_tcap)\\n    validVault(_vault)\\n  {\\n    _tcap.removeVaultHandler(address(_vault));\\n  }\\n\\n  /**\\n   * @notice Allows the owner to execute custom transactions\\n   * @param target address\\n   * @param value uint256\\n   * @param signature string\\n   * @param data bytes\\n   * @dev Only owner can call it\\n   */\\n  function executeTransaction(\\n    address target,\\n    uint256 value,\\n    string memory signature,\\n    bytes memory data\\n  ) external payable onlyOwner returns (bytes memory) {\\n    bytes memory callData;\\n    if (bytes(signature).length == 0) {\\n      callData = data;\\n    } else {\\n      callData = abi.encodePacked(bytes4(keccak256(bytes(signature))), data);\\n    }\\n\\n    require(\\n      target != address(0),\\n      \\\"Orchestrator::executeTransaction: target can't be zero\\\"\\n    );\\n\\n    // solium-disable-next-line security/no-call-value\\n    (bool success, bytes memory returnData) =\\n      target.call{value: value}(callData);\\n    require(\\n      success,\\n      \\\"Orchestrator::executeTransaction: Transaction execution reverted.\\\"\\n    );\\n\\n    emit TransactionExecuted(target, value, signature, data);\\n    (target, value, signature, data);\\n\\n    return returnData;\\n  }\\n\\n  /**\\n   * @notice Retrieves the eth stuck on the orchestrator\\n   * @param _to address\\n   * @dev Only owner can call it\\n   */\\n  function retrieveETH(address _to) external onlyOwner {\\n    require(\\n      _to != address(0),\\n      \\\"Orchestrator::retrieveETH: address can't be zero\\\"\\n    );\\n    uint256 amount = address(this).balance;\\n    payable(_to).transfer(amount);\\n  }\\n\\n  /// @notice Allows the contract to receive ETH\\n  receive() external payable {}\\n}\\n\",\"keccak256\":\"0x44620d619a5b56136a593eb5f85aa03e4451d649f98ae079590201a36ced7d81\",\"license\":\"MIT\"},\"contracts/TCAP.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.5;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/introspection/IERC165.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"./Orchestrator.sol\\\";\\n\\n/**\\n * @title Total Market Cap Token\\n * @author Cryptex.finance\\n * @notice ERC20 token on the Ethereum Blockchain that provides total exposure to the cryptocurrency sector.\\n */\\ncontract TCAP is ERC20, Ownable, IERC165 {\\n  /// @notice Open Zeppelin libraries\\n  using SafeMath for uint256;\\n\\n  /// @notice if enabled TCAP can't be minted if the total supply is above or equal the cap value\\n  bool public capEnabled = false;\\n\\n  /// @notice Maximum value the total supply of TCAP\\n  uint256 public cap;\\n\\n  /**\\n   * @notice Address to Vault Handler\\n   * @dev Only vault handlers can mint and burn TCAP\\n   */\\n  mapping(address => bool) public vaultHandlers;\\n\\n  /**\\n   * @dev the computed interface ID according to ERC-165. The interface ID is a XOR of interface method selectors.\\n   * mint.selector ^\\n   * burn.selector ^\\n   * setCap.selector ^\\n   * enableCap.selector ^\\n   * transfer.selector ^\\n   * transferFrom.selector ^\\n   * addVaultHandler.selector ^\\n   * removeVaultHandler.selector ^\\n   * approve.selector => 0xbd115939\\n   */\\n  bytes4 private constant _INTERFACE_ID_TCAP = 0xbd115939;\\n\\n  /// @dev bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\\n  bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\\n\\n  /// @notice An event emitted when a vault handler is added\\n  event VaultHandlerAdded(\\n    address indexed _owner,\\n    address indexed _tokenHandler\\n  );\\n\\n  /// @notice An event emitted when a vault handler is removed\\n  event VaultHandlerRemoved(\\n    address indexed _owner,\\n    address indexed _tokenHandler\\n  );\\n\\n  /// @notice An event emitted when the cap value is updated\\n  event NewCap(address indexed _owner, uint256 _amount);\\n\\n  /// @notice An event emitted when the cap is enabled or disabled\\n  event NewCapEnabled(address indexed _owner, bool _enable);\\n\\n  /**\\n   * @notice Constructor\\n   * @param _name uint256\\n   * @param _symbol uint256\\n   * @param _cap uint256\\n   * @param _orchestrator address\\n   */\\n  constructor(\\n    string memory _name,\\n    string memory _symbol,\\n    uint256 _cap,\\n    Orchestrator _orchestrator\\n  ) ERC20(_name, _symbol) {\\n    cap = _cap;\\n\\n    /// @dev transfer ownership to orchestrator\\n    transferOwnership(address(_orchestrator));\\n  }\\n\\n  /// @notice Reverts if called by any account that is not a vault.\\n  modifier onlyVault() {\\n    require(\\n      vaultHandlers[msg.sender],\\n      \\\"TCAP::onlyVault: caller is not a vault\\\"\\n    );\\n    _;\\n  }\\n\\n  /**\\n   * @notice Adds a new address as a vault\\n   * @param _vaultHandler address of a contract with permissions to mint and burn tokens\\n   * @dev Only owner can call it\\n   */\\n  function addVaultHandler(address _vaultHandler) external onlyOwner {\\n    vaultHandlers[_vaultHandler] = true;\\n    emit VaultHandlerAdded(msg.sender, _vaultHandler);\\n  }\\n\\n  /**\\n   * @notice Removes an address as a vault\\n   * @param _vaultHandler address of the contract to be removed as vault\\n   * @dev Only owner can call it\\n   */\\n  function removeVaultHandler(address _vaultHandler) external onlyOwner {\\n    vaultHandlers[_vaultHandler] = false;\\n    emit VaultHandlerRemoved(msg.sender, _vaultHandler);\\n  }\\n\\n  /**\\n   * @notice Mints TCAP Tokens\\n   * @param _account address of the receiver of tokens\\n   * @param _amount uint of tokens to mint\\n   * @dev Only vault can call it\\n   */\\n  function mint(address _account, uint256 _amount) external onlyVault {\\n    _mint(_account, _amount);\\n  }\\n\\n  /**\\n   * @notice Burns TCAP Tokens\\n   * @param _account address of the account which is burning tokens.\\n   * @param _amount uint of tokens to burn\\n   * @dev Only vault can call it\\n   */\\n  function burn(address _account, uint256 _amount) external onlyVault {\\n    _burn(_account, _amount);\\n  }\\n\\n  /**\\n   * @notice Sets maximum value the total supply of TCAP can have\\n   * @param _cap value\\n   * @dev When capEnabled is true, mint is not allowed to issue tokens that would increase the total supply above or equal the specified capacity.\\n   * @dev Only owner can call it\\n   */\\n  function setCap(uint256 _cap) external onlyOwner {\\n    cap = _cap;\\n    emit NewCap(msg.sender, _cap);\\n  }\\n\\n  /**\\n   * @notice Enables or Disables the Total Supply Cap.\\n   * @param _enable value\\n   * @dev When capEnabled is true, minting will not be allowed above the max capacity. It can exist a supply above the cap, but it prevents minting above the cap.\\n   * @dev Only owner can call it\\n   */\\n  function enableCap(bool _enable) external onlyOwner {\\n    capEnabled = _enable;\\n    emit NewCapEnabled(msg.sender, _enable);\\n  }\\n\\n  /**\\n   * @notice ERC165 Standard for support of interfaces\\n   * @param _interfaceId bytes of interface\\n   * @return bool\\n   */\\n  function supportsInterface(bytes4 _interfaceId)\\n    external\\n    pure\\n    override\\n    returns (bool)\\n  {\\n    return (_interfaceId == _INTERFACE_ID_TCAP ||\\n      _interfaceId == _INTERFACE_ID_ERC165);\\n  }\\n\\n  /**\\n   * @notice executes before each token transfer or mint\\n   * @param _from address\\n   * @param _to address\\n   * @param _amount value to transfer\\n   * @dev See {ERC20-_beforeTokenTransfer}.\\n   * @dev minted tokens must not cause the total supply to go over the cap.\\n   * @dev Reverts if the to address is equal to token address\\n   */\\n  function _beforeTokenTransfer(\\n    address _from,\\n    address _to,\\n    uint256 _amount\\n  ) internal virtual override {\\n    super._beforeTokenTransfer(_from, _to, _amount);\\n\\n    require(\\n      _to != address(this),\\n      \\\"TCAP::transfer: can't transfer to TCAP contract\\\"\\n    );\\n\\n    if (_from == address(0) && capEnabled) {\\n      // When minting tokens\\n      require(\\n        totalSupply().add(_amount) <= cap,\\n        \\\"TCAP::Transfer: TCAP cap exceeded\\\"\\n      );\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x09c7da5d7456ae8635e14b825f004ca449bc303bb432a0276cd612ed16c7b7cb\",\"license\":\"MIT\"},\"contracts/oracles/ChainlinkOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.5;\\n\\nimport \\\"@chainlink/contracts/src/v0.6/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/introspection/IERC165.sol\\\";\\n\\n/**\\n * @title Chainlink Oracle\\n * @author Cryptex.finance\\n * @notice Contract in charge or reading the information from a Chainlink Oracle. TCAP contracts read the price directly from this contract. More information can be found on Chainlink Documentation\\n */\\ncontract ChainlinkOracle is Ownable, IERC165 {\\n  AggregatorV3Interface internal aggregatorContract;\\n\\n  /*\\n   * setReferenceContract.selector ^\\n   * getLatestAnswer.selector ^\\n   * getLatestTimestamp.selector ^\\n   * getPreviousAnswer.selector ^\\n   * getPreviousTimestamp.selector =>  0x85be402b\\n   */\\n  bytes4 private constant _INTERFACE_ID_CHAINLINK_ORACLE = 0x85be402b;\\n\\n  /*\\n   * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\\n   */\\n  bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\\n\\n  /**\\n   * @notice Called once the contract is deployed.\\n   * Set the Chainlink Oracle as an aggregator.\\n   */\\n  constructor(address _aggregator) {\\n    aggregatorContract = AggregatorV3Interface(_aggregator);\\n  }\\n\\n  /**\\n   * @notice Changes the reference contract.\\n   * @dev Only owner can call it.\\n   */\\n  function setReferenceContract(address _aggregator) public onlyOwner() {\\n    aggregatorContract = AggregatorV3Interface(_aggregator);\\n  }\\n\\n  /**\\n   * @notice Returns the latest answer from the reference contract.\\n   * @return price\\n   */\\n  function getLatestAnswer() public view returns (int256) {\\n    (\\n      uint80 roundID,\\n      int256 price,\\n      ,\\n      uint256 timeStamp,\\n      uint80 answeredInRound\\n    ) = aggregatorContract.latestRoundData();\\n    require(\\n      timeStamp != 0,\\n      \\\"ChainlinkOracle::getLatestAnswer: round is not complete\\\"\\n    );\\n    require(\\n      answeredInRound >= roundID,\\n      \\\"ChainlinkOracle::getLatestAnswer: stale data\\\"\\n    );\\n    return price;\\n  }\\n\\n  /**\\n   * @notice Returns the latest round from the reference contract.\\n   */\\n  function getLatestRound()\\n    public\\n    view\\n    returns (\\n      uint80,\\n      int256,\\n      uint256,\\n      uint256,\\n      uint80\\n    )\\n  {\\n    (\\n      uint80 roundID,\\n      int256 price,\\n      uint256 startedAt,\\n      uint256 timeStamp,\\n      uint80 answeredInRound\\n    ) = aggregatorContract.latestRoundData();\\n\\n    return (roundID, price, startedAt, timeStamp, answeredInRound);\\n  }\\n\\n  /**\\n   * @notice Returns a given round from the reference contract.\\n   * @param _id of round\\n   */\\n  function getRound(uint80 _id)\\n    public\\n    view\\n    returns (\\n      uint80,\\n      int256,\\n      uint256,\\n      uint256,\\n      uint80\\n    )\\n  {\\n    (\\n      uint80 roundID,\\n      int256 price,\\n      uint256 startedAt,\\n      uint256 timeStamp,\\n      uint80 answeredInRound\\n    ) = aggregatorContract.getRoundData(_id);\\n\\n    return (roundID, price, startedAt, timeStamp, answeredInRound);\\n  }\\n\\n  /**\\n   * @notice Returns the last time the Oracle was updated.\\n   */\\n  function getLatestTimestamp() public view returns (uint256) {\\n    (, , , uint256 timeStamp, ) = aggregatorContract.latestRoundData();\\n    return timeStamp;\\n  }\\n\\n  /**\\n   * @notice Returns a previous answer updated on the Oracle.\\n   * @param _id of round\\n   * @return price\\n   */\\n  function getPreviousAnswer(uint80 _id) public view returns (int256) {\\n    (uint80 roundID, int256 price, , , ) = aggregatorContract.getRoundData(_id);\\n    require(\\n      _id <= roundID,\\n      \\\"ChainlinkOracle::getPreviousAnswer: not enough history\\\"\\n    );\\n    return price;\\n  }\\n\\n  /**\\n   * @notice Returns a previous time the Oracle was updated.\\n   * @param _id of round\\n   * @return timeStamp\\n   */\\n  function getPreviousTimestamp(uint80 _id) public view returns (uint256) {\\n    (uint80 roundID, , , uint256 timeStamp, ) =\\n      aggregatorContract.getRoundData(_id);\\n    require(\\n      _id <= roundID,\\n      \\\"ChainlinkOracle::getPreviousTimestamp: not enough history\\\"\\n    );\\n    return timeStamp;\\n  }\\n\\n  /**\\n   * @notice ERC165 Standard for support of interfaces.\\n   */\\n  function supportsInterface(bytes4 interfaceId)\\n    external\\n    pure\\n    override\\n    returns (bool)\\n  {\\n    return (interfaceId == _INTERFACE_ID_CHAINLINK_ORACLE ||\\n      interfaceId == _INTERFACE_ID_ERC165);\\n  }\\n}\\n\",\"keccak256\":\"0x690d7dd280367125c733f25be291bb7a0e235ddf17c1efe0d924fcab87f700fe\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101406040523480156200001257600080fd5b50604051620047023803806200470283398181016040526101808110156200003957600080fd5b508051602082015160408301516060840151608085015160a086015160c087015160e08801516101008901516101208a01516101408b0151610160909b0151999a9899979896979596949593949293919290918b8b8b8b8b8b8b8b8b8b8b8b6000620000a4620002de565b600080546001600160a01b0319166001600160a01b038316908117825560405192935091600080516020620046b3833981519152908290a35060016002556003805460ff191690558962000106896064620002e2602090811b62002abf17901c565b10620001445760405162461bcd60e51b8152600401808060200182810382526037815260200180620046456037913960400191505060405180910390fd5b60968a1015620001865760405162461bcd60e51b8152600401808060200182810382526035815260200180620045ea6035913960400191505060405180910390fd5b600a891115620001c85760405162461bcd60e51b81526004018080602001828103825260378152602001806200467c6037913960400191505060405180910390fd5b620001e681636b5cc77060e01b6200034660201b62002b191760201c565b620002235760405162461bcd60e51b815260040180806020018281038252602f815260200180620046d3602f913960400191505060405180910390fd5b60058b905560068a905560078990556008889055606087811b6001600160601b031990811660a05286821b811660c05285821b811660e05284821b81166101005287821b81166080529083901b1661012052600980546001600160a01b0319166001600160a01b038316179055620002a8600462000367602090811b62002b3517901c565b620002b560003362000370565b620002c08c62000380565b5050505050505050505050505050505050505050505050506200070c565b3390565b6000828201838110156200033d576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b90505b92915050565b600062000353836200047e565b80156200033d57506200033d8383620004b6565b80546001019055565b6200037c8282620004de565b5050565b6200038a620002de565b6000546001600160a01b03908116911614620003ed576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b038116620004345760405162461bcd60e51b81526004018080602001828103825260268152602001806200461f6026913960400191505060405180910390fd5b600080546040516001600160a01b0380851693921691600080516020620046b383398151915291a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b600062000493826301ffc9a760e01b620004b6565b8015620003405750620004af826001600160e01b0319620004b6565b1592915050565b60008080620004c6858562000559565b91509150818015620004d55750805b95945050505050565b60008281526001602090815260409091206200050591839062002b3e62000694821b17901c565b156200037c5762000515620002de565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b604080516001600160e01b0319831660248083019190915282518083039091018152604490910182526020810180516001600160e01b03166301ffc9a760e01b1781529151815160009384939284926060926001600160a01b038a169261753092879282918083835b60208310620005e35780518252601f199092019160209182019101620005c2565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303818686fa925050503d806000811462000646576040519150601f19603f3d011682016040523d82523d6000602084013e6200064b565b606091505b50915091506020815110156200066b57600080945094505050506200068d565b818180602001905160208110156200068257600080fd5b505190955093505050505b9250929050565b60006200033d836001600160a01b0384166000620006b38383620006f4565b620006eb5750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915562000340565b50600062000340565b60009081526001919091016020526040902054151590565b60805160601c60a05160601c60c05160601c60e05160601c6101005160601c6101205160601c613e23620007c76000398061126d52806112c1528061133e52806116ae5280611d8d5280611de8528061219c52806121f0525080611f925280612a7e525080610acd52806118255280611a4b528061233452806127cb525080610ee752806119015280611e7252806125b252806126d5525080610b4152806114145250806116db52806122775280612e305250613e236000f3fe6080604052600436106102e45760003560e01c8063842e357c11610190578063abb7bc4a116100dc578063ca15c87311610095578063f0f442601161006f578063f0f44260146109cb578063f2fde38b146109fe578063fce589d814610a31578063fcee45f414610a46576102e4565b8063ca15c8731461093e578063d547741f14610968578063de9952c9146109a1576102e4565b8063abb7bc4a14610863578063b2237ba31461088d578063bc063e1a146108b7578063bc721a96146108cc578063bcc46e83146108ff578063c6e1c7c914610929576102e4565b80639010d07c11610149578063952cc86a11610123578063952cc86a146107ec57806397994e301461080f578063a0712d6814610824578063a217fddf1461084e576102e4565b80639010d07c1461072b57806391d148541461075b5780639403b63414610794576102e4565b8063842e357c146106305780638456cb59146106455780638980f11f1461065a5780638c01f211146106935780638c64ea4a146106bd5780638da5cb5b14610716576102e4565b806342966c681161024f57806361d027b3116102085780636ca2143c116101e25780636ca2143c146105be578063715018a6146105d357806371ca337d146105e857806375f620ac146105fd576102e4565b806361d027b31461057f578063670fb821146105945780636ae7adc1146105a9576102e4565b806342966c68146104e457806346dc9007146105015780634bf2c7c9146105165780635c975abb146105405780635d12928b1461055557806361bc221a1461056a576102e4565b8063248a9ca3116102a1578063248a9ca3146103dd5780632806a743146104075780632f2ff15d146104335780633237c1581461046c57806336568abe146104965780633f4ba83a146104cf576102e4565b806301ffc9a7146102e95780630f0aeb8d1461033157806311d850e8146103585780631cc244ba146103825780631f2dc5ef146103b357806323f5589a146103c8575b600080fd5b3480156102f557600080fd5b5061031d6004803603602081101561030c57600080fd5b50356001600160e01b031916610a70565b604080519115158252519081900360200190f35b34801561033d57600080fd5b50610346610aa7565b60408051918252519081900360200190f35b34801561036457600080fd5b506103466004803603602081101561037b57600080fd5b5035610aac565b34801561038e57600080fd5b50610397610b3f565b604080516001600160a01b039092168252519081900360200190f35b3480156103bf57600080fd5b50610346610b63565b3480156103d457600080fd5b50610346610b69565b3480156103e957600080fd5b506103466004803603602081101561040057600080fd5b5035610b6f565b34801561041357600080fd5b506104316004803603602081101561042a57600080fd5b5035610b84565b005b34801561043f57600080fd5b506104316004803603604081101561045657600080fd5b50803590602001356001600160a01b0316610c64565b34801561047857600080fd5b506104316004803603602081101561048f57600080fd5b5035610cd0565b3480156104a257600080fd5b50610431600480360360408110156104b957600080fd5b50803590602001356001600160a01b0316610fd9565b3480156104db57600080fd5b5061043161103a565b610431600480360360208110156104fa57600080fd5b503561109c565b34801561050d57600080fd5b5061034661140c565b34801561052257600080fd5b506104316004803603602081101561053957600080fd5b5035611455565b34801561054c57600080fd5b5061031d61152b565b34801561056157600080fd5b50610431611534565b34801561057657600080fd5b50610346611697565b34801561058b57600080fd5b5061039761169d565b3480156105a057600080fd5b506103976116ac565b3480156105b557600080fd5b506103466116d0565b3480156105ca57600080fd5b506103976116d9565b3480156105df57600080fd5b506104316116fd565b3480156105f457600080fd5b5061034661179f565b34801561060957600080fd5b506103466004803603602081101561062057600080fd5b50356001600160a01b03166117a5565b34801561063c57600080fd5b50610397611823565b34801561065157600080fd5b50610431611847565b34801561066657600080fd5b506104316004803603604081101561067d57600080fd5b506001600160a01b0381351690602001356118a7565b34801561069f57600080fd5b50610346600480360360208110156106b657600080fd5b50356119d4565b3480156106c957600080fd5b506106e7600480360360208110156106e057600080fd5b5035611aaf565b604080519485526020850193909352838301919091526001600160a01b03166060830152519081900360800190f35b34801561072257600080fd5b50610397611adf565b34801561073757600080fd5b506103976004803603604081101561074e57600080fd5b5080359060200135611aee565b34801561076757600080fd5b5061031d6004803603604081101561077e57600080fd5b50803590602001356001600160a01b0316611b0d565b3480156107a057600080fd5b506107be600480360360208110156107b757600080fd5b5035611b25565b6040805194855260208501939093526001600160a01b03909116838301526060830152519081900360800190f35b6104316004803603604081101561080257600080fd5b5080359060200135611b8c565b34801561081b57600080fd5b50610397611f90565b34801561083057600080fd5b506104316004803603602081101561084757600080fd5b5035611fb4565b34801561085a57600080fd5b5061034661231b565b34801561086f57600080fd5b506103466004803603602081101561088657600080fd5b5035612320565b34801561089957600080fd5b50610431600480360360208110156108b057600080fd5b503561237c565b3480156108c357600080fd5b50610346612452565b3480156108d857600080fd5b50610346600480360360208110156108ef57600080fd5b50356001600160a01b0316612457565b34801561090b57600080fd5b506104316004803603602081101561092257600080fd5b5035612469565b34801561093557600080fd5b506103976126d3565b34801561094a57600080fd5b506103466004803603602081101561096157600080fd5b50356126f7565b34801561097457600080fd5b506104316004803603604081101561098b57600080fd5b50803590602001356001600160a01b031661270e565b3480156109ad57600080fd5b50610346600480360360208110156109c457600080fd5b5035612767565b3480156109d757600080fd5b50610431600480360360208110156109ee57600080fd5b50356001600160a01b031661287d565b348015610a0a57600080fd5b5061043160048036036020811015610a2157600080fd5b50356001600160a01b0316612978565b348015610a3d57600080fd5b50610346612a70565b348015610a5257600080fd5b5061034660048036036020811015610a6957600080fd5b5035612a76565b60006001600160e01b0319821663279d6ac360e21b1480610aa157506001600160e01b031982166301ffc9a760e01b145b92915050565b609681565b600080610ab883612767565b90506000610ac461140c565b90506000610af17f00000000000000000000000000000000000000000000000000000000000000006117a5565b90506000610b15610b0e6064600854612abf90919063ffffffff16565b8590612b53565b9050610b35610b25836064612b53565b610b2f8386612b53565b90612bac565b9695505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60055481565b60085481565b60009081526001602052604090206002015490565b610b8c612bee565b6000546001600160a01b03908116911614610bdc576040805162461bcd60e51b81526020600482018190526024820152600080516020613c0e833981519152604482015290519081900360640190fd5b600654610bea826064612abf565b10610c265760405162461bcd60e51b8152600401808060200182810382526041815260200180613b346041913960600191505060405180910390fd5b600881905560408051828152905133917f76fea7ef18b6b073facb4f15d873d45dc60e1ac9448931a44b388f40c49e3267919081900360200190a250565b600082815260016020526040902060020154610c8790610c82612bee565b611b0d565b610cc25760405162461bcd60e51b815260040180806020018281038252602f815260200180613863602f913960400191505060405180910390fd5b610ccc8282612bf2565b5050565b600280541415610d15576040805162461bcd60e51b815260206004820152601f6024820152600080516020613892833981519152604482015290519081900360640190fd5b60028055336000908152600a6020526040902054610d645760405162461bcd60e51b815260040180806020018281038252602b8152602001806138d7602b913960400191505060405180910390fd5b60035460ff1615610daf576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b8080610dec5760405162461bcd60e51b8152600401808060200182810382526027815260200180613cd86027913960400191505060405180910390fd5b336000908152600a60209081526040808320548352600b90915281208054909190610e16906119d4565b90508382600101541015610e5b5760405162461bcd60e51b8152600401808060200182810382526046815260200180613aee6046913960600191505060405180910390fd5b6001820154610e6a9085612c5b565b60018301558015610ec0576006548254610e83906119d4565b1015610ec05760405162461bcd60e51b8152600401808060200182810382526043815260200180613b756043913960600191505060405180910390fd5b6040805163a9059cbb60e01b81523360048201526024810186905290516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169163a9059cbb9160448083019260209291908290030181600087803b158015610f2f57600080fd5b505af1158015610f43573d6000803e3d6000fd5b505050506040513d6020811015610f5957600080fd5b5051610f965760405162461bcd60e51b815260040180806020018281038252603e815260200180613c65603e913960400191505060405180910390fd5b815460408051868152905133917f47e1336b6fdb5f42c3a1d28b558fa98786d820c3705d726358dcc8e63a401eef919081900360200190a3505060016002555050565b610fe1612bee565b6001600160a01b0316816001600160a01b0316146110305760405162461bcd60e51b815260040180806020018281038252602f815260200180613dbf602f913960400191505060405180910390fd5b610ccc8282612c9d565b611042612bee565b6000546001600160a01b03908116911614611092576040805162461bcd60e51b81526020600482018190526024820152600080516020613c0e833981519152604482015290519081900360640190fd5b61109a612d06565b565b6002805414156110e1576040805162461bcd60e51b815260206004820152601f6024820152600080516020613892833981519152604482015290519081900360640190fd5b60028055336000908152600a60205260409020546111305760405162461bcd60e51b815260040180806020018281038252602b8152602001806138d7602b913960400191505060405180910390fd5b60035460ff161561117b576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b80806111b85760405162461bcd60e51b8152600401808060200182810382526027815260200180613cd86027913960400191505060405180910390fd5b60006111c383612a76565b9050803410156112045760405162461bcd60e51b815260040180806020018281038252602f815260200180613d57602f913960400191505060405180910390fd5b61120c6137a4565b50336000908152600a60209081526040808320548352600b82529182902082516080810184528154808252600183015493820193909352600282015493810193909352600301546001600160a01b0316606083015261126b9085612da4565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316156113a0576040805163f3fef3a360e01b81523360048201526024810186905290516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169163f3fef3a391604480830192600092919082900301818387803b15801561130857600080fd5b505af115801561131c573d6000803e3d6000fd5b50506040805163e0588af760e01b815233600482015290516001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016935063e0588af79250602480830192600092919082900301818387803b15801561138757600080fd5b505af115801561139b573d6000803e3d6000fd5b505050505b6009546113b6906001600160a01b031683612e94565b6113c9336113c43485612c5b565b612e94565b805160408051868152905133917fccbea4088a3b7ae9ca2d15fab9a9742a4075b4d7247768a1eecea917565aba00919081900360200190a3505060016002555050565b6000806114387f00000000000000000000000000000000000000000000000000000000000000006117a5565b905061144f60055482612bac90919063ffffffff16565b91505090565b61145d612bee565b6000546001600160a01b039081169116146114ad576040805162461bcd60e51b81526020600482018190526024820152600080516020613c0e833981519152604482015290519081900360640190fd5b600a8111156114ed5760405162461bcd60e51b8152600401808060200182810382526036815260200180613ab86036913960400191505060405180910390fd5b600781905560408051828152905133917f2b29c7e5fe28010036a94929b56a0eb76bf5e90700e842a971eaa6e4abc45f04919081900360200190a250565b60035460ff1690565b60035460ff161561157f576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b336000908152600a6020526040902054156115cb5760405162461bcd60e51b81526004018080602001828103825260308152602001806137d66030913960400191505060405180910390fd5b60006115d76004612f8c565b336000908152600a6020526040902081905590506115f36137a4565b5060408051608081018252828152600060208083018281528385018381523360608601908152878552600b909352949092208351815591516001830155925160028201559151600390920180546001600160a01b0319166001600160a01b03909316929092179091556116666004612b35565b604051829033907fa510df27d6e51efd91d3f55722bad1f26bf924a63e5dcee07c2ab4c3d4992dcc90600090a35050565b60045481565b6009546001600160a01b031681565b7f000000000000000000000000000000000000000000000000000000000000000081565b6402540be40081565b7f000000000000000000000000000000000000000000000000000000000000000081565b611705612bee565b6000546001600160a01b03908116911614611755576040805162461bcd60e51b81526020600482018190526024820152600080516020613c0e833981519152604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b60065481565b6000610aa16402540be40061181d846001600160a01b03166396237c026040518163ffffffff1660e01b815260040160206040518083038186803b1580156117ec57600080fd5b505afa158015611800573d6000803e3d6000fd5b505050506040513d602081101561181657600080fd5b5051612f90565b90612b53565b7f000000000000000000000000000000000000000000000000000000000000000081565b61184f612bee565b6000546001600160a01b0390811691161461189f576040805162461bcd60e51b81526020600482018190526024820152600080516020613c0e833981519152604482015290519081900360640190fd5b61109a612feb565b6118af612bee565b6000546001600160a01b039081169116146118ff576040805162461bcd60e51b81526020600482018190526024820152600080516020613c0e833981519152604482015290519081900360640190fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b031614156119705760405162461bcd60e51b81526004018080602001828103825260258152602001806138b26025913960400191505060405180910390fd5b61198c61197b611adf565b6001600160a01b038416908361306c565b604080516001600160a01b03841681526020810183905281517f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa28929181900390910190a15050565b60006119de6137a4565b506000828152600b602090815260409182902082516080810184528154808252600183015493820193909352600282015493810193909352600301546001600160a01b031660608301521580611a3657506040810151155b15611a445760009150611aa9565b6000611a6f7f00000000000000000000000000000000000000000000000000000000000000006117a5565b9050611aa5611a8a611a7f61140c565b604085015190612b53565b6020840151610b2f90611a9e906064612b53565b8490612b53565b9250505b50919050565b600b602052600090815260409020805460018201546002830154600390930154919290916001600160a01b031684565b6000546001600160a01b031690565b6000828152600160205260408120611b0690836130be565b9392505050565b6000828152600160205260408120611b0690836130ca565b600080600080611b336137a4565b50505060009283525050600b602090815260409182902082516080810184528154808252600183015493820184905260028301549482018590526003909201546001600160a01b03166060909101819052909391929091565b600280541415611bd1576040805162461bcd60e51b815260206004820152601f6024820152600080516020613892833981519152604482015290519081900360640190fd5b6002805560035460ff1615611c20576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b6000828152600b602052604090208054611c6b5760405162461bcd60e51b815260040180806020018281038252602e815260200180613d29602e913960400191505060405180910390fd5b6000611c7a82600001546119d4565b90506006548110611cbc5760405162461bcd60e51b8152600401808060200182810382526035815260200180613ca36035913960400191505060405180910390fd5b6000611ccb8360000154612767565b905080841015611d0c5760405162461bcd60e51b81526004018080602001828103825260488152602001806139806048913960600191505060405180910390fd5b6000611d1782612a76565b905080341015611d585760405162461bcd60e51b8152600401808060200182810382526039815260200180613d866039913960400191505060405180910390fd5b6000611d678560000154610aac565b9050611d77856000015484612da4565b6001850154611d869082612c5b565b60018601557f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031615611e4b5760038501546040805163f3fef3a360e01b81526001600160a01b0392831660048201526024810186905290517f00000000000000000000000000000000000000000000000000000000000000009092169163f3fef3a39160448082019260009290919082900301818387803b158015611e3257600080fd5b505af1158015611e46573d6000803e3d6000fd5b505050505b6040805163a9059cbb60e01b81523360048201526024810183905290516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169163a9059cbb9160448083019260209291908290030181600087803b158015611eba57600080fd5b505af1158015611ece573d6000803e3d6000fd5b505050506040513d6020811015611ee457600080fd5b5051611f215760405162461bcd60e51b815260040180806020018281038252603c8152602001806139c8603c913960400191505060405180910390fd5b600954611f37906001600160a01b031683612e94565b611f45336113c43485612c5b565b8454604080518581526020810184905281513393927fba5789da846390370bbfbf693007be2c95d0cfac69a8d175805f742dc7938321928290030190a3505060016002555050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b600280541415611ff9576040805162461bcd60e51b815260206004820152601f6024820152600080516020613892833981519152604482015290519081900360640190fd5b60028055336000908152600a60205260409020546120485760405162461bcd60e51b815260040180806020018281038252602b8152602001806138d7602b913960400191505060405180910390fd5b60035460ff1615612093576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b80806120d05760405162461bcd60e51b8152600401808060200182810382526027815260200180613cd86027913960400191505060405180910390fd5b336000908152600a60209081526040808320548352600b9091528120906120f684612320565b9050808260010154101561213b5760405162461bcd60e51b81526004018080602001828103825260298152602001806139576029913960400191505060405180910390fd5b600282015461214a9085612abf565b6002830155600654825461215d906119d4565b101561219a5760405162461bcd60e51b8152600401808060200182810382526037815260200180613c2e6037913960400191505060405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03161561225057604080516356e4bb9760e11b81523360048201526024810186905290516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169163adc9772e91604480830192600092919082900301818387803b15801561223757600080fd5b505af115801561224b573d6000803e3d6000fd5b505050505b604080516340c10f1960e01b81523360048201526024810186905290516001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016916340c10f1991604480830192600092919082900301818387803b1580156122be57600080fd5b505af11580156122d2573d6000803e3d6000fd5b505083546040805188815290519193503392507f2e8ac5177a616f2aec08c3048f5021e4e9743ece034e8d83ba5caf76688bb475919081900360200190a3505060016002555050565b600081565b60008061232b61140c565b905060006123587f00000000000000000000000000000000000000000000000000000000000000006117a5565b9050611aa581610b2f6064610b2f60065461181d8a89612b5390919063ffffffff16565b612384612bee565b6000546001600160a01b039081169116146123d4576040805162461bcd60e51b81526020600482018190526024820152600080516020613c0e833981519152604482015290519081900360640190fd5b60968110156124145760405162461bcd60e51b8152600401808060200182810382526032815260200180613a866032913960400191505060405180910390fd5b600681905560408051828152905133917f6126d9241e4aeb647b01ddffba35de720a5b4ad692f117a43b5b281e49126fc4919081900360200190a250565b600a81565b600a6020526000908152604090205481565b6002805414156124ae576040805162461bcd60e51b815260206004820152601f6024820152600080516020613892833981519152604482015290519081900360640190fd5b60028055336000908152600a60205260409020546124fd5760405162461bcd60e51b815260040180806020018281038252602b8152602001806138d7602b913960400191505060405180910390fd5b60035460ff1615612548576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b80806125855760405162461bcd60e51b8152600401808060200182810382526027815260200180613cd86027913960400191505060405180910390fd5b604080516323b872dd60e01b81523360048201523060248201526044810184905290516001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016916323b872dd9160648083019260209291908290030181600087803b1580156125fa57600080fd5b505af115801561260e573d6000803e3d6000fd5b505050506040513d602081101561262457600080fd5b50516126615760405162461bcd60e51b815260040180806020018281038252603b815260200180613828603b913960400191505060405180910390fd5b336000908152600a60209081526040808320548352600b9091529020600181015461268c9084612abf565b6001820155805460408051858152905133917f11f8990ac38271f23dea447d5728e9914fca7cea2edda43af6c43c415f8bc30b919081900360200190a35050600160025550565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000818152600160205260408120610aa1906130df565b60008281526001602052604090206002015461272c90610c82612bee565b6110305760405162461bcd60e51b8152600401808060200182810382526030815260200180613a2a6030913960400191505060405180910390fd5b60006127716137a4565b506000828152600b60209081526040808320815160808101835281548152600182015493810193909352600281015491830191909152600301546001600160a01b03166060820152906127c261140c565b905060006127ef7f00000000000000000000000000000000000000000000000000000000000000006117a5565b9050600061280e83610b2f848760200151612b5390919063ffffffff16565b9050600061283f606461181d846128396064610b2f6006548c60400151612b5390919063ffffffff16565b90612c5b565b9050600061286561285c6064600854612abf90919063ffffffff16565b60065490612c5b565b90506128718282612bac565b98975050505050505050565b612885612bee565b6000546001600160a01b039081169116146128d5576040805162461bcd60e51b81526020600482018190526024820152600080516020613c0e833981519152604482015290519081900360640190fd5b6128e6816306b5cc7760e41b612b19565b6129215760405162461bcd60e51b815260040180806020018281038252602f815260200180613928602f913960400191505060405180910390fd5b600980546001600160a01b0383166001600160a01b03199091168117909155604080519182525133917f567657fa3f286518b318f4a29870674f433f622fdfc819691acb13105b228225919081900360200190a250565b612980612bee565b6000546001600160a01b039081169116146129d0576040805162461bcd60e51b81526020600482018190526024820152600080516020613c0e833981519152604482015290519081900360640190fd5b6001600160a01b038116612a155760405162461bcd60e51b81526004018080602001828103825260268152602001806139026026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b60075481565b600080612aa27f00000000000000000000000000000000000000000000000000000000000000006117a5565b9050611b0681610b2f6064610b2f60075461181d8961181d61140c565b600082820183811015611b06576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b6000612b24836130ea565b8015611b065750611b06838361311d565b80546001019055565b6000611b06836001600160a01b038416613143565b600082612b6257506000610aa1565b82820282848281612b6f57fe5b0414611b065760405162461bcd60e51b8152600401808060200182810382526021815260200180613bed6021913960400191505060405180910390fd5b6000611b0683836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f00000000000081525061318d565b3390565b6000828152600160205260409020612c0a9082612b3e565b15610ccc57612c17612bee565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000611b0683836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f77000081525061322f565b6000828152600160205260409020612cb59082613289565b15610ccc57612cc2612bee565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b60035460ff16612d54576040805162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604482015290519081900360640190fd5b6003805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa612d87612bee565b604080516001600160a01b039092168252519081900360200190a1565b6000828152600b602052604090206002810154821115612df55760405162461bcd60e51b815260040180806020018281038252602c815260200180613a5a602c913960400191505060405180910390fd5b6002810154612e049083612c5b565b600282015560408051632770a7eb60e21b81523360048201526024810184905290516001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001691639dc29fac91604480830192600092919082900301818387803b158015612e7757600080fd5b505af1158015612e8b573d6000803e3d6000fd5b50505050505050565b604080516000808252602082019092526001600160a01b0384169083906040518082805190602001908083835b60208310612ee05780518252601f199092019160209182019101612ec1565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114612f42576040519150601f19603f3d011682016040523d82523d6000602084013e612f47565b606091505b5050905080612f875760405162461bcd60e51b8152600401808060200182810382526035815260200180613bb86035913960400191505060405180910390fd5b505050565b5490565b600080821215612fe7576040805162461bcd60e51b815260206004820181905260248201527f53616665436173743a2076616c7565206d75737420626520706f736974697665604482015290519081900360640190fd5b5090565b60035460ff1615613036576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b6003805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258612d87612bee565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052612f8790849061329e565b6000611b06838361334f565b6000611b06836001600160a01b0384166133b3565b6000610aa182612f8c565b60006130fd826301ffc9a760e01b61311d565b8015610aa15750613116826001600160e01b031961311d565b1592915050565b600080600061312c85856133cb565b9150915081801561313a5750805b95945050505050565b600061314f83836133b3565b61318557508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610aa1565b506000610aa1565b600081836132195760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156131de5781810151838201526020016131c6565b50505050905090810190601f16801561320b5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50600083858161322557fe5b0495945050505050565b600081848411156132815760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156131de5781810151838201526020016131c6565b505050900390565b6000611b06836001600160a01b0384166134ff565b60606132f3826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166135c59092919063ffffffff16565b805190915015612f875780806020019051602081101561331257600080fd5b5051612f875760405162461bcd60e51b815260040180806020018281038252602a815260200180613cff602a913960400191505060405180910390fd5b815460009082106133915760405162461bcd60e51b81526004018080602001828103825260228152602001806138066022913960400191505060405180910390fd5b8260000182815481106133a057fe5b9060005260206000200154905092915050565b60009081526001919091016020526040902054151590565b604080516001600160e01b0319831660248083019190915282518083039091018152604490910182526020810180516001600160e01b03166301ffc9a760e01b1781529151815160009384939284926060926001600160a01b038a169261753092879282918083835b602083106134535780518252601f199092019160209182019101613434565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303818686fa925050503d80600081146134b4576040519150601f19603f3d011682016040523d82523d6000602084013e6134b9565b606091505b50915091506020815110156134d757600080945094505050506134f8565b818180602001905160208110156134ed57600080fd5b505190955093505050505b9250929050565b600081815260018301602052604081205480156135bb578354600019808301919081019060009087908390811061353257fe5b906000526020600020015490508087600001848154811061354f57fe5b60009182526020808320909101929092558281526001898101909252604090209084019055865487908061357f57fe5b60019003818190600052602060002001600090559055866001016000878152602001908152602001600020600090556001945050505050610aa1565b6000915050610aa1565b60606135d484846000856135dc565b949350505050565b60608247101561361d5760405162461bcd60e51b8152600401808060200182810382526026815260200180613a046026913960400191505060405180910390fd5b61362685613738565b613677576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b602083106136b65780518252601f199092019160209182019101613697565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114613718576040519150601f19603f3d011682016040523d82523d6000602084013e61371d565b606091505b509150915061372d82828661373e565b979650505050505050565b3b151590565b6060831561374d575081611b06565b82511561375d5782518084602001fd5b60405162461bcd60e51b81526020600482018181528451602484015284518593919283926044019190850190808383600083156131de5781810151838201526020016131c6565b604051806080016040528060008152602001600081526020016000815260200160006001600160a01b03168152509056fe5661756c7448616e646c65723a3a6372656174655661756c743a207661756c7420616c72656164792063726561746564456e756d657261626c655365743a20696e646578206f7574206f6620626f756e64735661756c7448616e646c65723a3a616464436f6c6c61746572616c3a204552433230207472616e7366657220646964206e6f742073756363656564416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e2061646d696e20746f206772616e745265656e7472616e637947756172643a207265656e7472616e742063616c6c0043616e6e6f742077697468647261772074686520636f6c6c61746572616c20746f6b656e735661756c7448616e646c65723a3a7661756c744578697374733a206e6f207661756c7420637265617465644f776e61626c653a206e6577206f776e657220697320746865207a65726f20616464726573735661756c7448616e646c65723a3a73657454726561737572793a206e6f7420612076616c69642074726561737572795661756c7448616e646c65723a3a6d696e743a206e6f7420656e6f75676820636f6c6c61746572616c5661756c7448616e646c65723a3a6c69717569646174655661756c743a206c69717569646174696f6e20616d6f756e7420646966666572656e74207468616e2072657175697265645661756c7448616e646c65723a3a6c69717569646174655661756c743a204552433230207472616e7366657220646964206e6f742073756363656564416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e2061646d696e20746f207265766f6b655661756c7448616e646c65723a3a6275726e3a20616d6f756e742067726561746572207468616e20646562745661756c7448616e646c65723a3a736574526174696f3a20726174696f206c6f776572207468616e204d494e5f524154494f5661756c7448616e646c65723a3a7365744275726e4665653a206275726e2066656520686967686572207468616e204d41585f4645455661756c7448616e646c65723a3a72656d6f7665436f6c6c61746572616c3a20726574726965766520616d6f756e7420686967686572207468616e20636f6c6c61746572616c5661756c7448616e646c65723a3a7365744c69717569646174696f6e50656e616c74793a206c69717569646174696f6e2070656e616c747920746f6f20686967685661756c7448616e646c65723a3a72656d6f7665436f6c6c61746572616c3a20636f6c6c61746572616c2062656c6f77206d696e20726571756972656420726174696f4554485661756c7448616e646c65723a3a736166655472616e736665724554483a20455448207472616e73666572206661696c6564536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f774f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65725661756c7448616e646c65723a3a6d696e743a20636f6c6c61746572616c2062656c6f77206d696e20726571756972656420726174696f5661756c7448616e646c65723a3a72656d6f7665436f6c6c61746572616c3a204552433230207472616e7366657220646964206e6f7420737563636565645661756c7448616e646c65723a3a6c69717569646174655661756c743a207661756c74206973206e6f74206c697175696461626c655661756c7448616e646c65723a3a6e6f745a65726f3a2076616c75652063616e277420626520305361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565645661756c7448616e646c65723a3a6c69717569646174655661756c743a206e6f207661756c7420637265617465645661756c7448616e646c65723a3a6275726e3a206275726e20666565206c657373207468616e2072657175697265645661756c7448616e646c65723a3a6c69717569646174655661756c743a206275726e20666565206c657373207468616e207265717569726564416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636520726f6c657320666f722073656c66a2646970667358221220ea13a66cafff062e83c4a2ce7761eb86edea775afb5f611921bd8877c1adddd264736f6c634300070500335661756c7448616e646c65723a3a636f6e7374727563746f723a20726174696f206c6f776572207468616e204d494e5f524154494f4f776e61626c653a206e6577206f776e657220697320746865207a65726f20616464726573735661756c7448616e646c65723a3a636f6e7374727563746f723a206c69717569646174696f6e2070656e616c747920746f6f20686967685661756c7448616e646c65723a3a636f6e7374727563746f723a206275726e2066656520686967686572207468616e204d41585f4645458be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e05661756c7448616e646c65723a3a636f6e7374727563746f723a206e6f7420612076616c6964207472656173757279",
  "deployedBytecode": "",
  "devdoc": {
    "author": "Cryptex.finance",
    "kind": "dev",
    "methods": {
      "TCAPPrice()": {
        "details": "TCAP token is 18 decimalsoracle totalMarketPrice must be in wei formatP = T / d P = TCAP Token Price T = Total Crypto Market Cap d = Divisor",
        "returns": {
          "price": "of the TCAP Token"
        }
      },
      "addCollateral(uint256)": {
        "details": "_amount should be higher than 0ERC20 token must be approved first",
        "params": {
          "_amount": "of collateral to be added"
        }
      },
      "burn(uint256)": {
        "details": "_amount should be higher than 0A fee of exactly burnFee must be sent as value on ETHThe fee goes to the treasury contractif reward handler is set exit rewards",
        "params": {
          "_amount": "of tokens to burn"
        }
      },
      "constructor": {
        "params": {
          "_burnFee": "uint256",
          "_collateralAddress": "address",
          "_collateralOracle": "address",
          "_divisor": "uint256",
          "_ethOracle": "address",
          "_liquidationPenalty": "uint256",
          "_orchestrator": "address",
          "_ratio": "uint256",
          "_rewardHandler": "address",
          "_tcapAddress": "address",
          "_tcapOracle": "address",
          "_treasury": "address"
        }
      },
      "createVault()": {
        "details": "Only one vault per address can be created"
      },
      "getFee(uint256)": {
        "details": "The returned value is returned in weif = (((P * A * b)/ 100))/ EP f = Burn Fee Value P = TCAP Token Price A = Amount to Burn b = Burn Fee % EP = ETH Price",
        "params": {
          "_amount": "to burn"
        },
        "returns": {
          "fee": "fee"
        }
      },
      "getOraclePrice(address)": {
        "params": {
          "_oracle": "to be the price called"
        },
        "returns": {
          "price": "price"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getRoleMember(bytes32,uint256)": {
        "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
      },
      "getRoleMemberCount(bytes32)": {
        "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
      },
      "getVault(uint256)": {
        "params": {
          "_id": "of vault"
        },
        "returns": {
          "_0": "Id, Collateral, Owner, Debt"
        }
      },
      "getVaultRatio(uint256)": {
        "details": "vr = (cp * (C * 100)) / D * P vr = Vault Ratio C = Vault Collateral cp = Collateral Price D = Vault Debt P = TCAP Token Price",
        "params": {
          "_vaultId": "id of vault"
        },
        "returns": {
          "currentRatio": "currentRatio"
        }
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "liquidateVault(uint256,uint256)": {
        "details": "Resulting ratio must be above or equal minimun ratioA fee of exactly burnFee must be sent as value on ETHThe fee goes to the treasury contract",
        "params": {
          "_maxTCAP": "max amount of TCAP the liquidator is willing to pay to liquidate vault",
          "_vaultId": "to liquidate"
        }
      },
      "liquidationReward(uint256)": {
        "details": "the returned value is returned as collateral currencyR = (LT * (p  + 100)) / 100 R = Liquidation Reward LT = Required Liquidation TCAP p = liquidation penalty",
        "params": {
          "_vaultId": "of the vault to liquidate"
        },
        "returns": {
          "rewardCollateral": "for liquidating Vault"
        }
      },
      "mint(uint256)": {
        "details": "_amount should be higher than 0requires to have a vault ratio above the minimum ratioif reward handler is set stake to earn rewards",
        "params": {
          "_amount": "of tokens to mint"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "recoverERC20(address,uint256)": {
        "details": "Only owner  can call it",
        "params": {
          "_tokenAddress": "address",
          "_tokenAmount": "uint"
        }
      },
      "removeCollateral(uint256)": {
        "details": "reverts if the resulting ratio is less than the minimun ratio_amount should be higher than 0transfers the collateral back to the user",
        "params": {
          "_amount": "of collateral to remove"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "requiredCollateral(uint256)": {
        "details": "TCAP token is 18 decimalsC = ((P * A * r) / 100) / cp C = Required Collateral P = TCAP Token Price A = Amount to Mint cp = Collateral Price r = Minimun Ratio for Liquidation Is only divided by 100 as eth price comes in wei to cancel the additional 0s",
        "params": {
          "_amount": "uint amount to mint"
        },
        "returns": {
          "collateral": "of the TCAP Token"
        }
      },
      "requiredLiquidationTCAP(uint256)": {
        "details": "LT = ((((D * r) / 100) - cTcap) * 100) / (r - (p + 100)) cTcap = ((C * cp) / P) LT = Required TCAP D = Vault Debt C = Required Collateral P = TCAP Token Price cp = Collateral Price r = Min Vault Ratio p = Liquidation Penalty",
        "params": {
          "_vaultId": "of the vault to liquidate"
        },
        "returns": {
          "amount": "required of the TCAP Token"
        }
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "setBurnFee(uint256)": {
        "details": "Only owner can call it",
        "params": {
          "_burnFee": "uint"
        }
      },
      "setLiquidationPenalty(uint256)": {
        "details": "Only owner can call itrecommended value is between 1-15% and can't be above 100%",
        "params": {
          "_liquidationPenalty": "uint"
        }
      },
      "setRatio(uint256)": {
        "details": "Only owner can call it",
        "params": {
          "_ratio": "uint"
        }
      },
      "setTreasury(address)": {
        "details": "Only owner can call it",
        "params": {
          "_treasury": "address"
        }
      },
      "supportsInterface(bytes4)": {
        "params": {
          "_interfaceId": "bytes of interface"
        },
        "returns": {
          "_0": "bool"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "ERC-20 TCAP Vault",
    "version": 1
  },
  "userdoc": {
    "events": {
      "CollateralAdded(address,uint256,uint256)": {
        "notice": "An event emitted when collateral is added to a vault"
      },
      "CollateralRemoved(address,uint256,uint256)": {
        "notice": "An event emitted when collateral is removed from a vault"
      },
      "NewBurnFee(address,uint256)": {
        "notice": "An event emitted when the burn fee is updated"
      },
      "NewLiquidationPenalty(address,uint256)": {
        "notice": "An event emitted when the liquidation penalty is updated"
      },
      "NewRatio(address,uint256)": {
        "notice": "An event emitted when the ratio is updated"
      },
      "NewTreasury(address,address)": {
        "notice": "An event emitted when the treasury contract is updated"
      },
      "Recovered(address,uint256)": {
        "notice": "An event emitted when a erc20 token is recovered"
      },
      "TokensBurned(address,uint256,uint256)": {
        "notice": "An event emitted when tokens are burned"
      },
      "TokensMinted(address,uint256,uint256)": {
        "notice": "An event emitted when tokens are minted"
      },
      "VaultCreated(address,uint256)": {
        "notice": "An event emitted when a vault is created"
      },
      "VaultLiquidated(uint256,address,uint256,uint256)": {
        "notice": "An event emitted when a vault is liquidated"
      }
    },
    "kind": "user",
    "methods": {
      "ETHPriceOracle()": {
        "notice": "ETH/USD Oracle Address"
      },
      "MAX_FEE()": {
        "notice": "Maximum value that the burn fee can be set to"
      },
      "MIN_RATIO()": {
        "notice": "Minimum value that the ratio can be set to"
      },
      "TCAPPrice()": {
        "notice": "Returns the price of the TCAP token"
      },
      "TCAPToken()": {
        "notice": "TCAP Token Address"
      },
      "addCollateral(uint256)": {
        "notice": "Allows users to add collateral to their vaults"
      },
      "burn(uint256)": {
        "notice": "Pays the debt of TCAP tokens resulting them on burn, this releases collateral up to minimun vault ratio"
      },
      "burnFee()": {
        "notice": "Fee percentage of the total amount to burn charged on ETH when burning TCAP Tokens"
      },
      "collateralContract()": {
        "notice": "Collateral Token Address"
      },
      "collateralPriceOracle()": {
        "notice": "Collateral/USD Oracle Address"
      },
      "constructor": {
        "notice": "Constructor"
      },
      "counter()": {
        "notice": "Vault Id counter"
      },
      "createVault()": {
        "notice": "Allows an user to create an unique Vault"
      },
      "divisor()": {
        "notice": "Value used as divisor with the total market cap, just like the S&P 500 or any major financial index would to define the final tcap token price"
      },
      "getFee(uint256)": {
        "notice": "Returns the required fee of ETH to burn the TCAP tokens"
      },
      "getOraclePrice(address)": {
        "notice": "Returns the price of the chainlink oracle multiplied by the digits to get 18 decimals format"
      },
      "getVault(uint256)": {
        "notice": "Returns the Vault information of specified identifier"
      },
      "getVaultRatio(uint256)": {
        "notice": "Returns the Collateral Ratio of the Vault"
      },
      "liquidateVault(uint256,uint256)": {
        "notice": "Allow users to burn TCAP tokens to liquidate vaults with vault collateral ratio under the minium ratio, the liquidator receives the staked collateral of the liquidated vault at a premium"
      },
      "liquidationPenalty()": {
        "notice": "Penalty charged to vault owner when a vault is liquidated, this value goes to the liquidator"
      },
      "liquidationReward(uint256)": {
        "notice": "Returns the Reward for liquidating a vault"
      },
      "mint(uint256)": {
        "notice": "Uses collateral to generate debt on TCAP Tokens which are minted and assigend to caller"
      },
      "oracleDigits()": {
        "notice": "value used to multiply chainlink oracle for handling decimals"
      },
      "pause()": {
        "notice": "Allows the owner to Pause the Contract"
      },
      "ratio()": {
        "notice": "Minimun ratio required to prevent liquidation of vault"
      },
      "recoverERC20(address,uint256)": {
        "notice": "Added to support recovering LP Rewards from other systems such as BAL to be distributed to holders"
      },
      "removeCollateral(uint256)": {
        "notice": "Allows users to remove collateral currently not being used to generate TCAP tokens from their vaults"
      },
      "requiredCollateral(uint256)": {
        "notice": "Returns the minimal required collateral to mint TCAP token"
      },
      "requiredLiquidationTCAP(uint256)": {
        "notice": "Returns the minimal required TCAP to liquidate a Vault"
      },
      "rewardHandler()": {
        "notice": "Address of the contract that gives rewards to minters of TCAP, rewards are only given if address is set in constructor"
      },
      "setBurnFee(uint256)": {
        "notice": "Sets the burn fee percentage an user pays when burning tcap tokens"
      },
      "setLiquidationPenalty(uint256)": {
        "notice": "Sets the liquidation penalty % charged on liquidation"
      },
      "setRatio(uint256)": {
        "notice": "Sets the collateral ratio needed to mint tokens"
      },
      "setTreasury(address)": {
        "notice": "Sets the treasury contract address where fees are transfered to"
      },
      "supportsInterface(bytes4)": {
        "notice": "ERC165 Standard for support of interfaces"
      },
      "tcapOracle()": {
        "notice": "Total Market Cap/USD Oracle Address"
      },
      "treasury()": {
        "notice": "Address of the treasury contract (usually the timelock) where the funds generated by the protocol are sent"
      },
      "unpause()": {
        "notice": "Allows the owner to Unpause the Contract"
      },
      "userToVault(address)": {
        "notice": "Owner address to Vault Id"
      },
      "vaults(uint256)": {
        "notice": "Id To Vault"
      }
    },
    "notice": "Contract in charge of handling the TCAP Vault and stake using a Collateral ERC20",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 359,
        "contract": "contracts/ERC20VaultHandler.sol:ERC20VaultHandler",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 91,
        "contract": "contracts/ERC20VaultHandler.sol:ERC20VaultHandler",
        "label": "_roles",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)87_storage)"
      },
      {
        "astId": 2509,
        "contract": "contracts/ERC20VaultHandler.sol:ERC20VaultHandler",
        "label": "_status",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 2426,
        "contract": "contracts/ERC20VaultHandler.sol:ERC20VaultHandler",
        "label": "_paused",
        "offset": 0,
        "slot": "3",
        "type": "t_bool"
      },
      {
        "astId": 3195,
        "contract": "contracts/ERC20VaultHandler.sol:ERC20VaultHandler",
        "label": "counter",
        "offset": 0,
        "slot": "4",
        "type": "t_struct(Counter)1888_storage"
      },
      {
        "astId": 3213,
        "contract": "contracts/ERC20VaultHandler.sol:ERC20VaultHandler",
        "label": "divisor",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 3216,
        "contract": "contracts/ERC20VaultHandler.sol:ERC20VaultHandler",
        "label": "ratio",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 3219,
        "contract": "contracts/ERC20VaultHandler.sol:ERC20VaultHandler",
        "label": "burnFee",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 3222,
        "contract": "contracts/ERC20VaultHandler.sol:ERC20VaultHandler",
        "label": "liquidationPenalty",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 3228,
        "contract": "contracts/ERC20VaultHandler.sol:ERC20VaultHandler",
        "label": "treasury",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 3233,
        "contract": "contracts/ERC20VaultHandler.sol:ERC20VaultHandler",
        "label": "userToVault",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3238,
        "contract": "contracts/ERC20VaultHandler.sol:ERC20VaultHandler",
        "label": "vaults",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint256,t_struct(Vault)3192_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)87_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)87_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(Vault)3192_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IVaultHandler.Vault)",
        "numberOfBytes": "32",
        "value": "t_struct(Vault)3192_storage"
      },
      "t_struct(AddressSet)2204_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 2203,
            "contract": "contracts/ERC20VaultHandler.sol:ERC20VaultHandler",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)1939_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Counter)1888_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 1887,
            "contract": "contracts/ERC20VaultHandler.sol:ERC20VaultHandler",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(RoleData)87_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 84,
            "contract": "contracts/ERC20VaultHandler.sol:ERC20VaultHandler",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(AddressSet)2204_storage"
          },
          {
            "astId": 86,
            "contract": "contracts/ERC20VaultHandler.sol:ERC20VaultHandler",
            "label": "adminRole",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Set)1939_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 1934,
            "contract": "contracts/ERC20VaultHandler.sol:ERC20VaultHandler",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 1938,
            "contract": "contracts/ERC20VaultHandler.sol:ERC20VaultHandler",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Vault)3192_storage": {
        "encoding": "inplace",
        "label": "struct IVaultHandler.Vault",
        "members": [
          {
            "astId": 3185,
            "contract": "contracts/ERC20VaultHandler.sol:ERC20VaultHandler",
            "label": "Id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 3187,
            "contract": "contracts/ERC20VaultHandler.sol:ERC20VaultHandler",
            "label": "Collateral",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 3189,
            "contract": "contracts/ERC20VaultHandler.sol:ERC20VaultHandler",
            "label": "Debt",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 3191,
            "contract": "contracts/ERC20VaultHandler.sol:ERC20VaultHandler",
            "label": "Owner",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}