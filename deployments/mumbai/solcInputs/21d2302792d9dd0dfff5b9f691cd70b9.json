{
  "language": "Solidity",
  "sources": {
    "contracts/ERC20VaultHandler.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.7.5;\n\nimport \"./IVaultHandler.sol\";\nimport \"./Orchestrator.sol\";\n\n/**\n * @title ERC-20 TCAP Vault\n * @author Cryptex.finance\n * @notice Contract in charge of handling the TCAP Vault and stake using a Collateral ERC20\n */\ncontract ERC20VaultHandler is IVaultHandler {\n  /**\n   * @notice Constructor\n   * @param _orchestrator address\n   * @param _divisor uint256\n   * @param _ratio uint256\n   * @param _burnFee uint256\n   * @param _liquidationPenalty uint256\n   * @param _tcapOracle address\n   * @param _tcapAddress address\n   * @param _collateralAddress address\n   * @param _collateralOracle address\n   * @param _ethOracle address\n   * @param _rewardHandler address\n   * @param _treasury address\n   */\n  constructor(\n    Orchestrator _orchestrator,\n    uint256 _divisor,\n    uint256 _ratio,\n    uint256 _burnFee,\n    uint256 _liquidationPenalty,\n    address _tcapOracle,\n    TCAP _tcapAddress,\n    address _collateralAddress,\n    address _collateralOracle,\n    address _ethOracle,\n    address _rewardHandler,\n    address _treasury\n  )\n    IVaultHandler(\n      _orchestrator,\n      _divisor,\n      _ratio,\n      _burnFee,\n      _liquidationPenalty,\n      _tcapOracle,\n      _tcapAddress,\n      _collateralAddress,\n      _collateralOracle,\n      _ethOracle,\n      _rewardHandler,\n      _treasury\n    )\n  {}\n}\n"
    },
    "contracts/IVaultHandler.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.7.5;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/utils/SafeCast.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\nimport \"@openzeppelin/contracts/utils/Pausable.sol\";\nimport \"@openzeppelin/contracts/introspection/IERC165.sol\";\nimport \"./TCAP.sol\";\nimport \"./Orchestrator.sol\";\nimport \"./oracles/ChainlinkOracle.sol\";\n\ninterface IRewardHandler {\n  function stake(address _staker, uint256 amount) external;\n\n  function withdraw(address _staker, uint256 amount) external;\n\n  function getRewardFromVault(address _staker) external;\n}\n\n/**\n * @title TCAP Vault Handler Abstract Contract\n * @author Cryptex.Finance\n * @notice Contract in charge of handling the TCAP Token and stake\n */\nabstract contract IVaultHandler is\n  Ownable,\n  AccessControl,\n  ReentrancyGuard,\n  Pausable,\n  IERC165\n{\n  /// @notice Open Zeppelin libraries\n  using SafeMath for uint256;\n  using SafeCast for int256;\n  using Counters for Counters.Counter;\n  using SafeERC20 for IERC20;\n\n  /**\n   * @notice Vault object created to manage the mint and burns of TCAP tokens\n   * @param Id, unique identifier of the vault\n   * @param Collateral, current collateral on vault\n   * @param Debt, current amount of TCAP tokens minted\n   * @param Owner, owner of the vault\n   */\n  struct Vault {\n    uint256 Id;\n    uint256 Collateral;\n    uint256 Debt;\n    address Owner;\n  }\n\n  /// @notice Vault Id counter\n  Counters.Counter public counter;\n\n  /// @notice TCAP Token Address\n  TCAP public immutable TCAPToken;\n\n  /// @notice Total Market Cap/USD Oracle Address\n  ChainlinkOracle public immutable tcapOracle;\n\n  /// @notice Collateral Token Address\n  IERC20 public immutable collateralContract;\n\n  /// @notice Collateral/USD Oracle Address\n  ChainlinkOracle public immutable collateralPriceOracle;\n\n  /// @notice ETH/USD Oracle Address\n  ChainlinkOracle public immutable ETHPriceOracle;\n\n  /// @notice Value used as divisor with the total market cap, just like the S&P 500 or any major financial index would to define the final tcap token price\n  uint256 public divisor;\n\n  /// @notice Minimum ratio required to prevent liquidation of vault\n  uint256 public ratio;\n\n  /// @notice Fee percentage of the total amount to burn charged on ETH when burning TCAP Tokens\n  uint256 public burnFee;\n\n  /// @notice Penalty charged to vault owner when a vault is liquidated, this value goes to the liquidator\n  uint256 public liquidationPenalty;\n\n  /// @notice Address of the contract that gives rewards to minters of TCAP, rewards are only given if address is set in constructor\n  IRewardHandler public immutable rewardHandler;\n\n  /// @notice Address of the treasury contract (usually the timelock) where the funds generated by the protocol are sent\n  address public treasury;\n\n  /// @notice Owner address to Vault Id\n  mapping(address => uint256) public userToVault;\n\n  /// @notice Id To Vault\n  mapping(uint256 => Vault) public vaults;\n\n  /// @notice value used to multiply chainlink oracle for handling decimals\n  uint256 public constant oracleDigits = 10000000000;\n\n\t/// @notice Maximum decimal places that are supported by the collateral\n  uint8 public constant MAX_DECIMAL_PLACES = 18;\n\n\t/// @notice value used to divide collateral to adjust the decimal places\n  uint256 public collateralDecimalsAdjustmentFactor;\n\n  /// @notice Minimum value that the ratio can be set to\n  uint256 public constant MIN_RATIO = 150;\n\n  /// @notice Maximum value that the burn fee can be set to\n  uint256 public constant MAX_FEE = 10;\n\n  /**\n   * @dev the computed interface ID according to ERC-165. The interface ID is a XOR of interface method selectors.\n   * setRatio.selector ^\n   * setBurnFee.selector ^\n   * setLiquidationPenalty.selector ^\n   * pause.selector ^\n   * unpause.selector =>  0x9e75ab0c\n   */\n  bytes4 private constant _INTERFACE_ID_IVAULT = 0x9e75ab0c;\n\n  /// @dev bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\n  bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\n\n  /// @notice An event emitted when the ratio is updated\n  event NewRatio(address indexed _owner, uint256 _ratio);\n\n  /// @notice An event emitted when the burn fee is updated\n  event NewBurnFee(address indexed _owner, uint256 _burnFee);\n\n  /// @notice An event emitted when the liquidation penalty is updated\n  event NewLiquidationPenalty(\n    address indexed _owner,\n    uint256 _liquidationPenalty\n  );\n\n  /// @notice An event emitted when the treasury contract is updated\n  event NewTreasury(address indexed _owner, address _tresury);\n\n  /// @notice An event emitted when a vault is created\n  event VaultCreated(address indexed _owner, uint256 indexed _id);\n\n  /// @notice An event emitted when collateral is added to a vault\n  event CollateralAdded(\n    address indexed _owner,\n    uint256 indexed _id,\n    uint256 _amount\n  );\n\n  /// @notice An event emitted when collateral is removed from a vault\n  event CollateralRemoved(\n    address indexed _owner,\n    uint256 indexed _id,\n    uint256 _amount\n  );\n\n  /// @notice An event emitted when tokens are minted\n  event TokensMinted(\n    address indexed _owner,\n    uint256 indexed _id,\n    uint256 _amount\n  );\n\n  /// @notice An event emitted when tokens are burned\n  event TokensBurned(\n    address indexed _owner,\n    uint256 indexed _id,\n    uint256 _amount\n  );\n\n  /// @notice An event emitted when a vault is liquidated\n  event VaultLiquidated(\n    uint256 indexed _vaultId,\n    address indexed _liquidator,\n    uint256 _liquidationCollateral,\n    uint256 _reward\n  );\n\n  /// @notice An event emitted when a erc20 token is recovered\n  event Recovered(address _token, uint256 _amount);\n\n  /**\n   * @notice Constructor\n   * @param _orchestrator address\n   * @param _divisor uint256\n   * @param _ratio uint256\n   * @param _burnFee uint256\n   * @param _liquidationPenalty uint256\n   * @param _tcapOracle address\n   * @param _tcapAddress address\n   * @param _collateralAddress address\n   * @param _collateralOracle address\n   * @param _ethOracle address\n   * @param _rewardHandler address\n   * @param _treasury address\n   */\n  constructor(\n    Orchestrator _orchestrator,\n    uint256 _divisor,\n    uint256 _ratio,\n    uint256 _burnFee,\n    uint256 _liquidationPenalty,\n    address _tcapOracle,\n    TCAP _tcapAddress,\n    address _collateralAddress,\n    address _collateralOracle,\n    address _ethOracle,\n    address _rewardHandler,\n    address _treasury\n  ) {\n    require(\n      _liquidationPenalty.add(100) < _ratio,\n      \"VaultHandler::constructor: liquidation penalty too high\"\n    );\n    require(\n      _ratio >= MIN_RATIO,\n      \"VaultHandler::constructor: ratio lower than MIN_RATIO\"\n    );\n\n    require(\n      _burnFee <= MAX_FEE,\n      \"VaultHandler::constructor: burn fee higher than MAX_FEE\"\n    );\n\n    divisor = _divisor;\n    ratio = _ratio;\n    burnFee = _burnFee;\n    liquidationPenalty = _liquidationPenalty;\n    tcapOracle = ChainlinkOracle(_tcapOracle);\n    collateralContract = IERC20(_collateralAddress);\n    collateralPriceOracle = ChainlinkOracle(_collateralOracle);\n    ETHPriceOracle = ChainlinkOracle(_ethOracle);\n    TCAPToken = _tcapAddress;\n    rewardHandler = IRewardHandler(_rewardHandler);\n    treasury = _treasury;\n\t\tuint8 _collateralDecimals = ERC20(_collateralAddress).decimals();\n\t\trequire(\n\t\t\t_collateralDecimals <= MAX_DECIMAL_PLACES,\n\t\t\t\"Collateral decimals greater than MAX_DECIMAL_PLACES\"\n\t\t);\n\t\tcollateralDecimalsAdjustmentFactor = 10 ** (MAX_DECIMAL_PLACES - _collateralDecimals);\n\n    /// @dev counter starts in 1 as 0 is reserved for empty objects\n    counter.increment();\n\n    /// @dev transfer ownership to orchestrator\n    _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\n    transferOwnership(address(_orchestrator));\n  }\n\n  /// @notice Reverts if the user hasn't created a vault.\n  modifier vaultExists() {\n    require(\n      userToVault[msg.sender] != 0,\n      \"VaultHandler::vaultExists: no vault created\"\n    );\n    _;\n  }\n\n  /// @notice Reverts if value is 0.\n  modifier notZero(uint256 _value) {\n    require(_value != 0, \"VaultHandler::notZero: value can't be 0\");\n    _;\n  }\n\n  /**\n   * @notice Sets the collateral ratio needed to mint tokens\n   * @param _ratio uint\n   * @dev Only owner can call it\n   */\n  function setRatio(uint256 _ratio) external virtual onlyOwner {\n    require(\n      _ratio >= MIN_RATIO,\n      \"VaultHandler::setRatio: ratio lower than MIN_RATIO\"\n    );\n    ratio = _ratio;\n    emit NewRatio(msg.sender, _ratio);\n  }\n\n  /**\n   * @notice Sets the burn fee percentage an user pays when burning tcap tokens\n   * @param _burnFee uint\n   * @dev Only owner can call it\n   */\n  function setBurnFee(uint256 _burnFee) external virtual onlyOwner {\n    require(\n      _burnFee <= MAX_FEE,\n      \"VaultHandler::setBurnFee: burn fee higher than MAX_FEE\"\n    );\n    burnFee = _burnFee;\n    emit NewBurnFee(msg.sender, _burnFee);\n  }\n\n  /**\n   * @notice Sets the liquidation penalty % charged on liquidation\n   * @param _liquidationPenalty uint\n   * @dev Only owner can call it\n   * @dev recommended value is between 1-15% and can't be above 100%\n   */\n  function setLiquidationPenalty(uint256 _liquidationPenalty)\n    external\n    virtual\n    onlyOwner\n  {\n    require(\n      _liquidationPenalty.add(100) < ratio,\n      \"VaultHandler::setLiquidationPenalty: liquidation penalty too high\"\n    );\n\n    liquidationPenalty = _liquidationPenalty;\n    emit NewLiquidationPenalty(msg.sender, _liquidationPenalty);\n  }\n\n  /**\n   * @notice Sets the treasury contract address where fees are transfered to\n   * @param _treasury address\n   * @dev Only owner can call it\n   */\n  function setTreasury(address _treasury) external virtual onlyOwner {\n    require(\n      _treasury != address(0),\n      \"VaultHandler::setTreasury: not a valid treasury\"\n    );\n    treasury = _treasury;\n    emit NewTreasury(msg.sender, _treasury);\n  }\n\n  /**\n   * @notice Allows an user to create an unique Vault\n   * @dev Only one vault per address can be created\n   */\n  function createVault() external virtual whenNotPaused {\n    require(\n      userToVault[msg.sender] == 0,\n      \"VaultHandler::createVault: vault already created\"\n    );\n\n    uint256 id = counter.current();\n    userToVault[msg.sender] = id;\n    Vault memory vault = Vault(id, 0, 0, msg.sender);\n    vaults[id] = vault;\n    counter.increment();\n    emit VaultCreated(msg.sender, id);\n  }\n\n  /**\n   * @notice Allows users to add collateral to their vaults\n   * @param _amount of collateral to be added\n   * @dev _amount should be higher than 0\n   * @dev ERC20 token must be approved first\n   */\n  function addCollateral(uint256 _amount)\n    external\n    virtual\n    nonReentrant\n    vaultExists\n    whenNotPaused\n    notZero(_amount)\n  {\n    require(\n      collateralContract.transferFrom(msg.sender, address(this), _amount),\n      \"VaultHandler::addCollateral: ERC20 transfer did not succeed\"\n    );\n\n    Vault storage vault = vaults[userToVault[msg.sender]];\n    vault.Collateral = vault.Collateral.add(_amount);\n    emit CollateralAdded(msg.sender, vault.Id, _amount);\n  }\n\n  /**\n   * @notice Allows users to remove collateral currently not being used to generate TCAP tokens from their vaults\n   * @param _amount of collateral to remove\n   * @dev reverts if the resulting ratio is less than the minimun ratio\n   * @dev _amount should be higher than 0\n   * @dev transfers the collateral back to the user\n   */\n  function removeCollateral(uint256 _amount)\n    external\n    virtual\n    nonReentrant\n    vaultExists\n    whenNotPaused\n    notZero(_amount)\n  {\n    Vault storage vault = vaults[userToVault[msg.sender]];\n    uint256 currentRatio = getVaultRatio(vault.Id);\n\n    require(\n      vault.Collateral >= _amount,\n      \"VaultHandler::removeCollateral: retrieve amount higher than collateral\"\n    );\n\n    vault.Collateral = vault.Collateral.sub(_amount);\n    if (currentRatio != 0) {\n      require(\n        getVaultRatio(vault.Id) >= ratio,\n        \"VaultHandler::removeCollateral: collateral below min required ratio\"\n      );\n    }\n    require(\n      collateralContract.transfer(msg.sender, _amount),\n      \"VaultHandler::removeCollateral: ERC20 transfer did not succeed\"\n    );\n    emit CollateralRemoved(msg.sender, vault.Id, _amount);\n  }\n\n  /**\n   * @notice Uses collateral to generate debt on TCAP Tokens which are minted and assigend to caller\n   * @param _amount of tokens to mint\n   * @dev _amount should be higher than 0\n   * @dev requires to have a vault ratio above the minimum ratio\n   * @dev if reward handler is set stake to earn rewards\n   */\n  function mint(uint256 _amount)\n    external\n    virtual\n    nonReentrant\n    vaultExists\n    whenNotPaused\n    notZero(_amount)\n  {\n    Vault storage vault = vaults[userToVault[msg.sender]];\n    uint256 collateral = requiredCollateral(_amount);\n\n    require(\n      vault.Collateral >= collateral,\n      \"VaultHandler::mint: not enough collateral\"\n    );\n\n    vault.Debt = vault.Debt.add(_amount);\n\n    require(\n      getVaultRatio(vault.Id) >= ratio,\n      \"VaultHandler::mint: collateral below min required ratio\"\n    );\n\n    if (address(rewardHandler) != address(0)) {\n      rewardHandler.stake(msg.sender, _amount);\n    }\n\n    TCAPToken.mint(msg.sender, _amount);\n    emit TokensMinted(msg.sender, vault.Id, _amount);\n  }\n\n  /**\n   * @notice Pays the debt of TCAP tokens resulting them on burn, this releases collateral up to minimun vault ratio\n   * @param _amount of tokens to burn\n   * @dev _amount should be higher than 0\n   * @dev A fee of exactly burnFee must be sent as value on ETH\n   * @dev The fee goes to the treasury contract\n   * @dev if reward handler is set exit rewards\n   */\n  function burn(uint256 _amount)\n    external\n    payable\n    virtual\n    nonReentrant\n    vaultExists\n    whenNotPaused\n    notZero(_amount)\n  {\n    uint256 fee = getFee(_amount);\n    require(\n      msg.value >= fee,\n      \"VaultHandler::burn: burn fee less than required\"\n    );\n\n    Vault memory vault = vaults[userToVault[msg.sender]];\n\n    _burn(vault.Id, _amount);\n\n    if (address(rewardHandler) != address(0)) {\n      rewardHandler.withdraw(msg.sender, _amount);\n      rewardHandler.getRewardFromVault(msg.sender);\n    }\n    safeTransferETH(treasury, fee);\n\n    //send back ETH above fee\n    safeTransferETH(msg.sender, msg.value.sub(fee));\n    emit TokensBurned(msg.sender, vault.Id, _amount);\n  }\n\n  /**\n   * @notice Allow users to burn TCAP tokens to liquidate vaults with vault collateral ratio under the minium ratio, the liquidator receives the staked collateral of the liquidated vault at a premium\n   * @param _vaultId to liquidate\n   * @param _maxTCAP max amount of TCAP the liquidator is willing to pay to liquidate vault\n   * @dev Resulting ratio must be above or equal minimun ratio\n   * @dev A fee of exactly burnFee must be sent as value on ETH\n   * @dev The fee goes to the treasury contract\n   */\n  function liquidateVault(uint256 _vaultId, uint256 _maxTCAP)\n    external\n    payable\n    nonReentrant\n    whenNotPaused\n  {\n    Vault storage vault = vaults[_vaultId];\n    require(vault.Id != 0, \"VaultHandler::liquidateVault: no vault created\");\n\n    uint256 vaultRatio = getVaultRatio(vault.Id);\n    require(\n      vaultRatio < ratio,\n      \"VaultHandler::liquidateVault: vault is not liquidable\"\n    );\n\n    uint256 requiredTCAP = requiredLiquidationTCAP(vault.Id);\n    require(\n      _maxTCAP >= requiredTCAP,\n      \"VaultHandler::liquidateVault: liquidation amount different than required\"\n    );\n\n    uint256 fee = getFee(requiredTCAP);\n    require(\n      msg.value >= fee,\n      \"VaultHandler::liquidateVault: burn fee less than required\"\n    );\n\n    uint256 reward = liquidationReward(vault.Id);\n    _burn(vault.Id, requiredTCAP);\n\n    //Removes the collateral that is rewarded to liquidator\n    vault.Collateral = vault.Collateral.sub(reward);\n\n    // Triggers update of CTX Rewards\n    if (address(rewardHandler) != address(0)) {\n      rewardHandler.withdraw(vault.Owner, requiredTCAP);\n    }\n\n    require(\n      collateralContract.transfer(msg.sender, reward),\n      \"VaultHandler::liquidateVault: ERC20 transfer did not succeed\"\n    );\n    safeTransferETH(treasury, fee);\n\n    //send back ETH above fee\n    safeTransferETH(msg.sender, msg.value.sub(fee));\n    emit VaultLiquidated(vault.Id, msg.sender, requiredTCAP, reward);\n  }\n\n  /**\n   * @notice Allows the owner to Pause the Contract\n   */\n  function pause() external onlyOwner {\n    _pause();\n  }\n\n  /**\n   * @notice Allows the owner to Unpause the Contract\n   */\n  function unpause() external onlyOwner {\n    _unpause();\n  }\n\n  /**\n   * @notice  Added to support recovering LP Rewards from other systems such as BAL to be distributed to holders\n   * @param _tokenAddress address\n   * @param _tokenAmount uint\n   * @dev Only owner  can call it\n   */\n  function recoverERC20(address _tokenAddress, uint256 _tokenAmount)\n    external\n    onlyOwner\n  {\n    // Cannot recover the collateral token\n    require(\n      _tokenAddress != address(collateralContract),\n      \"Cannot withdraw the collateral tokens\"\n    );\n    IERC20(_tokenAddress).safeTransfer(owner(), _tokenAmount);\n    emit Recovered(_tokenAddress, _tokenAmount);\n  }\n\n  /**\n   * @notice Allows the safe transfer of ETH\n   * @param _to account to transfer ETH\n   * @param _value amount of ETH\n   */\n  function safeTransferETH(address _to, uint256 _value) internal {\n    (bool success, ) = _to.call{value: _value}(new bytes(0));\n    require(success, \"IVaultHandler::safeTransferETH: ETH transfer failed\");\n  }\n\n  /**\n   * @notice ERC165 Standard for support of interfaces\n   * @param _interfaceId bytes of interface\n   * @return bool\n   */\n  function supportsInterface(bytes4 _interfaceId)\n    external\n    pure\n    override\n    returns (bool)\n  {\n    return (_interfaceId == _INTERFACE_ID_IVAULT ||\n      _interfaceId == _INTERFACE_ID_ERC165);\n  }\n\n  /**\n   * @notice Returns the Vault information of specified identifier\n   * @param _id of vault\n   * @return Id, Collateral, Owner, Debt\n   */\n  function getVault(uint256 _id)\n    external\n    view\n    virtual\n    returns (\n      uint256,\n      uint256,\n      address,\n      uint256\n    )\n  {\n    Vault memory vault = vaults[_id];\n    return (vault.Id, vault.Collateral, vault.Owner, vault.Debt);\n  }\n\n  /**\n   * @notice Returns the price of the chainlink oracle multiplied by the digits to get 18 decimals format\n   * @param _oracle to be the price called\n   * @return price\n   * @dev The price returned here is in USD is equivalent to 1 `ether` unit  times 10 ** 18\n   * eg. For ETH This will return the price of USD of 1 ETH * 10 ** 18 and **not** 1 wei * 10 ** 18\n   * eg. For DAI This will return the price of USD of 1 DAI * 10 ** 18 and **not** (1 / 10 ** 18) * 10 ** 18\n   */\n  function getOraclePrice(ChainlinkOracle _oracle)\n    public\n    view\n    virtual\n    returns (uint256 price)\n  {\n    price = _oracle.getLatestAnswer().toUint256().mul(oracleDigits);\n  }\n\n  /**\n   * @notice Returns the price of the TCAP token\n   * @return price of the TCAP Token\n   * @dev TCAP token is 18 decimals\n   * @dev oracle totalMarketPrice must be in wei format\n   * @dev P = T / d\n   * P = TCAP Token Price\n   * T = Total Crypto Market Cap\n   * d = Divisor\n   */\n  function TCAPPrice() public view virtual returns (uint256 price) {\n    uint256 totalMarketPrice = getOraclePrice(tcapOracle);\n    price = totalMarketPrice.div(divisor);\n  }\n\n  /**\n   * @notice Returns the minimal required collateral to mint TCAP token\n   * @param _amount uint amount to mint\n   * @return collateral of the TCAP Token\n   * @dev TCAP token is 18 decimals\n   * @dev C = ((P * A * r) / 100) / (cp * cdaf)\n   * C = Required Collateral\n   * P = TCAP Token Price\n   * A = Amount to Mint\n   * cp = Collateral Price\n   * r = Minimum Ratio for Liquidation\n   * cdaf = Collateral decimals adjust factor\n   */\n  function requiredCollateral(uint256 _amount)\n    public\n    view\n    virtual\n    returns (uint256 collateral)\n  {\n    uint256 tcapPrice = TCAPPrice();\n    uint256 collateralPrice = getOraclePrice(collateralPriceOracle);\n    collateral = ((tcapPrice.mul(_amount).mul(ratio)).div(100)).div(\n      collateralPrice\n    ).div(collateralDecimalsAdjustmentFactor);\n  }\n\n  /**\n   * @notice Returns the minimal required TCAP to liquidate a Vault\n   * @param _vaultId of the vault to liquidate\n   * @return amount required of the TCAP Token\n   * @dev LT = ((((D * r) / 100) - cTcap) * 100) / (r - (p + 100))\n   * cTcap = ((C * cdaf * cp) / P)\n   * LT = Required TCAP\n   * D = Vault Debt\n   * C = Required Collateral\n   * P = TCAP Token Price\n   * cdaf = Collateral Decimals adjustment Factor\n   * cp = Collateral Price\n   * r = Min Vault Ratio\n   * p = Liquidation Penalty\n   */\n  function requiredLiquidationTCAP(uint256 _vaultId)\n    public\n    view\n    virtual\n    returns (uint256 amount)\n  {\n    Vault memory vault = vaults[_vaultId];\n    uint256 tcapPrice = TCAPPrice();\n    uint256 collateralPrice = getOraclePrice(collateralPriceOracle);\n    uint256 collateralTcap = (\n\t\t\tvault.Collateral.mul(collateralDecimalsAdjustmentFactor).mul(collateralPrice)\n\t\t).div(tcapPrice);\n    uint256 reqDividend =\n      (((vault.Debt.mul(ratio)).div(100)).sub(collateralTcap)).mul(100);\n    uint256 reqDivisor = ratio.sub(liquidationPenalty.add(100));\n    amount = reqDividend.div(reqDivisor);\n  }\n\n  /**\n   * @notice Returns the Reward Collateral amount for liquidating a vault\n   * @param _vaultId of the vault to liquidate\n   * @return rewardCollateral for liquidating Vault\n   * @dev the returned value is returned as collateral currency\n   * @dev R = (LT * (p  + 100)) / 100\n   * @dev RC = R / (cp * cdaf)\n   * R = Liquidation Reward\n   * RC = Liquidation Reward Collateral\n   * LT = Required Liquidation TCAP\n   * p = liquidation penalty\n   * cp = Collateral Price\n   * cdaf = Collateral Decimals adjustment factor\n   */\n  function liquidationReward(uint256 _vaultId)\n    public\n    view\n    virtual\n    returns (uint256 rewardCollateral)\n  {\n    uint256 req = requiredLiquidationTCAP(_vaultId);\n    uint256 tcapPrice = TCAPPrice();\n    uint256 collateralPrice = getOraclePrice(collateralPriceOracle);\n    uint256 reward = (req.mul(liquidationPenalty.add(100)));\n    rewardCollateral = (\n\t\t\treward.mul(tcapPrice)\n\t\t).div(\n\t\t\t\tcollateralPrice.mul(100)\n\t\t).div(collateralDecimalsAdjustmentFactor);\n  }\n\n  /**\n   * @notice Returns the Collateral Ratio of the Vault\n   * @param _vaultId id of vault\n   * @return currentRatio\n   * @dev vr = (cp * (C * 100 * cdaf)) / D * P\n   * vr = Vault Ratio\n   * C = Vault Collateral\n   * cdaf = Collateral Decimals Adjustment Factor\n   * cp = Collateral Price\n   * D = Vault Debt\n   * P = TCAP Token Price\n   */\n  function getVaultRatio(uint256 _vaultId)\n    public\n    view\n    virtual\n    returns (uint256 currentRatio)\n  {\n    Vault memory vault = vaults[_vaultId];\n    if (vault.Id == 0 || vault.Debt == 0) {\n      currentRatio = 0;\n    } else {\n      uint256 collateralPrice = getOraclePrice(collateralPriceOracle);\n      currentRatio = ((\n\t\t\t\t\tcollateralPrice.mul(vault.Collateral.mul(100).mul(collateralDecimalsAdjustmentFactor)\n\t\t\t\t\t)).div(\n          vault.Debt.mul(TCAPPrice())\n        )\n      );\n    }\n  }\n\n  /**\n   * @notice Returns the required fee of ETH to burn the TCAP tokens\n   * @param _amount to burn\n   * @return fee\n   * @dev The returned value is returned in wei\n   * @dev f = (((P * A * b)/ 100))/ EP\n   * f = Burn Fee Value in wei\n   * P = TCAP Token Price\n   * A = TCAP Amount to Burn\n   * b = Burn Fee %\n   * EP = ETH Price\n   */\n  function getFee(uint256 _amount) public view virtual returns (uint256 fee) {\n    uint256 ethPrice = getOraclePrice(ETHPriceOracle);\n    fee = (TCAPPrice().mul(_amount).mul(burnFee)).div(100).div(ethPrice);\n  }\n\n  /**\n   * @notice Burns an amount of TCAP Tokens\n   * @param _vaultId vault id\n   * @param _amount to burn\n   */\n  function _burn(uint256 _vaultId, uint256 _amount) internal {\n    Vault storage vault = vaults[_vaultId];\n    require(\n      vault.Debt >= _amount,\n      \"VaultHandler::burn: amount greater than debt\"\n    );\n    vault.Debt = vault.Debt.sub(_amount);\n    TCAPToken.burn(msg.sender, _amount);\n  }\n}\n"
    },
    "contracts/Orchestrator.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.7.5;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/introspection/ERC165Checker.sol\";\nimport \"./IVaultHandler.sol\";\nimport \"./TCAP.sol\";\nimport \"./oracles/ChainlinkOracle.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\n/**\n * @title TCAP Orchestrator\n * @author Cryptex.finance\n * @notice Orchestrator contract in charge of managing the settings of the vaults, rewards and TCAP token. It acts as the owner of these contracts.\n */\ncontract Orchestrator is Ownable {\n  /// @dev Enum which saves the available functions to emergency call.\n  enum Functions {BURNFEE, LIQUIDATION, PAUSE}\n\n  /// @notice Address that can set to 0 the fees or pause the vaults in an emergency event\n  address public guardian;\n\n  /** @dev Interface constants*/\n  bytes4 private constant _INTERFACE_ID_IVAULT = 0x9e75ab0c;\n  bytes4 private constant _INTERFACE_ID_TCAP = 0xbd115939;\n  bytes4 private constant _INTERFACE_ID_CHAINLINK_ORACLE = 0x85be402b;\n\n  /// @dev tracks which vault was emergency called\n  mapping(IVaultHandler => mapping(Functions => bool)) private emergencyCalled;\n\n  /// @notice An event emitted when the guardian is updated\n  event GuardianSet(address indexed _owner, address guardian);\n\n  /// @notice An event emitted when a transaction is executed\n  event TransactionExecuted(\n    address indexed target,\n    uint256 value,\n    string signature,\n    bytes data\n  );\n\n  /**\n   * @notice Constructor\n   * @param _guardian The guardian address\n   */\n  constructor(address _guardian) {\n    require(\n      _guardian != address(0),\n      \"Orchestrator::constructor: guardian can't be zero\"\n    );\n    guardian = _guardian;\n  }\n\n  /// @notice Throws if called by any account other than the guardian\n  modifier onlyGuardian() {\n    require(\n      msg.sender == guardian,\n      \"Orchestrator::onlyGuardian: caller is not the guardian\"\n    );\n    _;\n  }\n\n  /**\n   * @notice Throws if vault is not valid.\n   * @param _vault address\n   */\n  modifier validVault(IVaultHandler _vault) {\n    require(\n      ERC165Checker.supportsInterface(address(_vault), _INTERFACE_ID_IVAULT),\n      \"Orchestrator::validVault: not a valid vault\"\n    );\n    _;\n  }\n\n  /**\n   * @notice Throws if TCAP Token is not valid\n   * @param _tcap address\n   */\n  modifier validTCAP(TCAP _tcap) {\n    require(\n      ERC165Checker.supportsInterface(address(_tcap), _INTERFACE_ID_TCAP),\n      \"Orchestrator::validTCAP: not a valid TCAP ERC20\"\n    );\n    _;\n  }\n\n  /**\n   * @notice Throws if Chainlink Oracle is not valid\n   * @param _oracle address\n   */\n  modifier validChainlinkOracle(address _oracle) {\n    require(\n      ERC165Checker.supportsInterface(\n        address(_oracle),\n        _INTERFACE_ID_CHAINLINK_ORACLE\n      ),\n      \"Orchestrator::validChainlinkOrchestrator: not a valid Chainlink Oracle\"\n    );\n    _;\n  }\n\n  /**\n   * @notice Sets the guardian of the orchestrator\n   * @param _guardian address of the guardian\n   * @dev Only owner can call it\n   */\n  function setGuardian(address _guardian) external onlyOwner {\n    require(\n      _guardian != address(0),\n      \"Orchestrator::setGuardian: guardian can't be zero\"\n    );\n    guardian = _guardian;\n    emit GuardianSet(msg.sender, _guardian);\n  }\n\n  /**\n   * @notice Sets the ratio of a vault\n   * @param _vault address\n   * @param _ratio value\n   * @dev Only owner can call it\n   */\n  function setRatio(IVaultHandler _vault, uint256 _ratio)\n    external\n    onlyOwner\n    validVault(_vault)\n  {\n    _vault.setRatio(_ratio);\n  }\n\n  /**\n   * @notice Sets the burn fee of a vault\n   * @param _vault address\n   * @param _burnFee value\n   * @dev Only owner can call it\n   */\n  function setBurnFee(IVaultHandler _vault, uint256 _burnFee)\n    external\n    onlyOwner\n    validVault(_vault)\n  {\n    _vault.setBurnFee(_burnFee);\n  }\n\n  /**\n   * @notice Sets the burn fee to 0, only used on a black swan event\n   * @param _vault address\n   * @dev Only guardian can call it\n   * @dev Validates if _vault is valid\n   */\n  function setEmergencyBurnFee(IVaultHandler _vault)\n    external\n    onlyGuardian\n    validVault(_vault)\n  {\n    require(\n      emergencyCalled[_vault][Functions.BURNFEE] != true,\n      \"Orchestrator::setEmergencyBurnFee: emergency call already used\"\n    );\n    emergencyCalled[_vault][Functions.BURNFEE] = true;\n    _vault.setBurnFee(0);\n  }\n\n  /**\n   * @notice Sets the liquidation penalty of a vault\n   * @param _vault address\n   * @param _liquidationPenalty value\n   * @dev Only owner can call it\n   */\n  function setLiquidationPenalty(\n    IVaultHandler _vault,\n    uint256 _liquidationPenalty\n  ) external onlyOwner validVault(_vault) {\n    _vault.setLiquidationPenalty(_liquidationPenalty);\n  }\n\n  /**\n   * @notice Sets the liquidation penalty of a vault to 0, only used on a black swan event\n   * @param _vault address\n   * @dev Only guardian can call it\n   * @dev Validates if _vault is valid\n   */\n  function setEmergencyLiquidationPenalty(IVaultHandler _vault)\n    external\n    onlyGuardian\n    validVault(_vault)\n  {\n    require(\n      emergencyCalled[_vault][Functions.LIQUIDATION] != true,\n      \"Orchestrator::setEmergencyLiquidationPenalty: emergency call already used\"\n    );\n    emergencyCalled[_vault][Functions.LIQUIDATION] = true;\n    _vault.setLiquidationPenalty(0);\n  }\n\n  /**\n   * @notice Pauses the Vault\n   * @param _vault address\n   * @dev Only guardian can call it\n   * @dev Validates if _vault is valid\n   */\n  function pauseVault(IVaultHandler _vault)\n    external\n    onlyGuardian\n    validVault(_vault)\n  {\n    require(\n      emergencyCalled[_vault][Functions.PAUSE] != true,\n      \"Orchestrator::pauseVault: emergency call already used\"\n    );\n    emergencyCalled[_vault][Functions.PAUSE] = true;\n    _vault.pause();\n  }\n\n  /**\n   * @notice Unpauses the Vault\n   * @param _vault address\n   * @dev Only guardian can call it\n   * @dev Validates if _vault is valid\n   */\n  function unpauseVault(IVaultHandler _vault)\n    external\n    onlyGuardian\n    validVault(_vault)\n  {\n    _vault.unpause();\n  }\n\n  /**\n   * @notice Enables or disables the TCAP Cap\n   * @param _tcap address\n   * @param _enable bool\n   * @dev Only owner can call it\n   * @dev Validates if _tcap is valid\n   */\n  function enableTCAPCap(TCAP _tcap, bool _enable)\n    external\n    onlyOwner\n    validTCAP(_tcap)\n  {\n    _tcap.enableCap(_enable);\n  }\n\n  /**\n   * @notice Sets the TCAP maximum minting value\n   * @param _tcap address\n   * @param _cap uint value\n   * @dev Only owner can call it\n   * @dev Validates if _tcap is valid\n   */\n  function setTCAPCap(TCAP _tcap, uint256 _cap)\n    external\n    onlyOwner\n    validTCAP(_tcap)\n  {\n    _tcap.setCap(_cap);\n  }\n\n  /**\n   * @notice Adds Vault to TCAP ERC20\n   * @param _tcap address\n   * @param _vault address\n   * @dev Only owner can call it\n   * @dev Validates if _tcap is valid\n   * @dev Validates if _vault is valid\n   */\n  function addTCAPVault(TCAP _tcap, IVaultHandler _vault)\n    external\n    onlyOwner\n    validTCAP(_tcap)\n    validVault(_vault)\n  {\n    _tcap.addVaultHandler(address(_vault));\n  }\n\n  /**\n   * @notice Removes Vault to TCAP ERC20\n   * @param _tcap address\n   * @param _vault address\n   * @dev Only owner can call it\n   * @dev Validates if _tcap is valid\n   * @dev Validates if _vault is valid\n   */\n  function removeTCAPVault(TCAP _tcap, IVaultHandler _vault)\n    external\n    onlyOwner\n    validTCAP(_tcap)\n    validVault(_vault)\n  {\n    _tcap.removeVaultHandler(address(_vault));\n  }\n\n  /**\n   * @notice Allows the owner to execute custom transactions\n   * @param target address\n   * @param value uint256\n   * @param signature string\n   * @param data bytes\n   * @dev Only owner can call it\n   */\n  function executeTransaction(\n    address target,\n    uint256 value,\n    string memory signature,\n    bytes memory data\n  ) external payable onlyOwner returns (bytes memory) {\n    bytes memory callData;\n    if (bytes(signature).length == 0) {\n      callData = data;\n    } else {\n      callData = abi.encodePacked(bytes4(keccak256(bytes(signature))), data);\n    }\n\n    require(\n      target != address(0),\n      \"Orchestrator::executeTransaction: target can't be zero\"\n    );\n\n    // solium-disable-next-line security/no-call-value\n    (bool success, bytes memory returnData) =\n      target.call{value: value}(callData);\n    require(\n      success,\n      \"Orchestrator::executeTransaction: Transaction execution reverted.\"\n    );\n\n    emit TransactionExecuted(target, value, signature, data);\n    (target, value, signature, data);\n\n    return returnData;\n  }\n\n  /**\n   * @notice Retrieves the eth stuck on the orchestrator\n   * @param _to address\n   * @dev Only owner can call it\n   */\n  function retrieveETH(address _to) external onlyOwner {\n    require(\n      _to != address(0),\n      \"Orchestrator::retrieveETH: address can't be zero\"\n    );\n    uint256 amount = address(this).balance;\n    payable(_to).transfer(amount);\n  }\n\n  /// @notice Allows the contract to receive ETH\n  receive() external payable {}\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"../GSN/Context.sol\";\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () internal {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/AccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"../utils/EnumerableSet.sol\";\nimport \"../utils/Address.sol\";\nimport \"../GSN/Context.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControl is Context {\n    using EnumerableSet for EnumerableSet.AddressSet;\n    using Address for address;\n\n    struct RoleData {\n        EnumerableSet.AddressSet members;\n        bytes32 adminRole;\n    }\n\n    mapping (bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view returns (bool) {\n        return _roles[role].members.contains(account);\n    }\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\n        return _roles[role].members.length();\n    }\n\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {\n        return _roles[role].members.at(index);\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) public virtual {\n        require(hasRole(_roles[role].adminRole, _msgSender()), \"AccessControl: sender must be an admin to grant\");\n\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) public virtual {\n        require(hasRole(_roles[role].adminRole, _msgSender()), \"AccessControl: sender must be an admin to revoke\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) public virtual {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);\n        _roles[role].adminRole = adminRole;\n    }\n\n    function _grantRole(bytes32 role, address account) private {\n        if (_roles[role].members.add(account)) {\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    function _revokeRole(bytes32 role, address account) private {\n        if (_roles[role].members.remove(account)) {\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/SafeCast.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n\n/**\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\n * checks.\n *\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\n * easily result in undesired exploitation or bugs, since developers usually\n * assume that overflows raise errors. `SafeCast` restores this intuition by\n * reverting the transaction when such an operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n *\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\n * all math on `uint256` and `int256` and then downcasting.\n */\nlibrary SafeCast {\n\n    /**\n     * @dev Returns the downcasted uint128 from uint256, reverting on\n     * overflow (when the input is greater than largest uint128).\n     *\n     * Counterpart to Solidity's `uint128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     */\n    function toUint128(uint256 value) internal pure returns (uint128) {\n        require(value < 2**128, \"SafeCast: value doesn\\'t fit in 128 bits\");\n        return uint128(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint64 from uint256, reverting on\n     * overflow (when the input is greater than largest uint64).\n     *\n     * Counterpart to Solidity's `uint64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     */\n    function toUint64(uint256 value) internal pure returns (uint64) {\n        require(value < 2**64, \"SafeCast: value doesn\\'t fit in 64 bits\");\n        return uint64(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint32 from uint256, reverting on\n     * overflow (when the input is greater than largest uint32).\n     *\n     * Counterpart to Solidity's `uint32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     */\n    function toUint32(uint256 value) internal pure returns (uint32) {\n        require(value < 2**32, \"SafeCast: value doesn\\'t fit in 32 bits\");\n        return uint32(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint16 from uint256, reverting on\n     * overflow (when the input is greater than largest uint16).\n     *\n     * Counterpart to Solidity's `uint16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     */\n    function toUint16(uint256 value) internal pure returns (uint16) {\n        require(value < 2**16, \"SafeCast: value doesn\\'t fit in 16 bits\");\n        return uint16(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint8 from uint256, reverting on\n     * overflow (when the input is greater than largest uint8).\n     *\n     * Counterpart to Solidity's `uint8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits.\n     */\n    function toUint8(uint256 value) internal pure returns (uint8) {\n        require(value < 2**8, \"SafeCast: value doesn\\'t fit in 8 bits\");\n        return uint8(value);\n    }\n\n    /**\n     * @dev Converts a signed int256 into an unsigned uint256.\n     *\n     * Requirements:\n     *\n     * - input must be greater than or equal to 0.\n     */\n    function toUint256(int256 value) internal pure returns (uint256) {\n        require(value >= 0, \"SafeCast: value must be positive\");\n        return uint256(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int128 from int256, reverting on\n     * overflow (when the input is less than smallest int128 or\n     * greater than largest int128).\n     *\n     * Counterpart to Solidity's `int128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt128(int256 value) internal pure returns (int128) {\n        require(value >= -2**127 && value < 2**127, \"SafeCast: value doesn\\'t fit in 128 bits\");\n        return int128(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int64 from int256, reverting on\n     * overflow (when the input is less than smallest int64 or\n     * greater than largest int64).\n     *\n     * Counterpart to Solidity's `int64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt64(int256 value) internal pure returns (int64) {\n        require(value >= -2**63 && value < 2**63, \"SafeCast: value doesn\\'t fit in 64 bits\");\n        return int64(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int32 from int256, reverting on\n     * overflow (when the input is less than smallest int32 or\n     * greater than largest int32).\n     *\n     * Counterpart to Solidity's `int32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt32(int256 value) internal pure returns (int32) {\n        require(value >= -2**31 && value < 2**31, \"SafeCast: value doesn\\'t fit in 32 bits\");\n        return int32(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int16 from int256, reverting on\n     * overflow (when the input is less than smallest int16 or\n     * greater than largest int16).\n     *\n     * Counterpart to Solidity's `int16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt16(int256 value) internal pure returns (int16) {\n        require(value >= -2**15 && value < 2**15, \"SafeCast: value doesn\\'t fit in 16 bits\");\n        return int16(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int8 from int256, reverting on\n     * overflow (when the input is less than smallest int8 or\n     * greater than largest int8).\n     *\n     * Counterpart to Solidity's `int8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits.\n     *\n     * _Available since v3.1._\n     */\n    function toInt8(int256 value) internal pure returns (int8) {\n        require(value >= -2**7 && value < 2**7, \"SafeCast: value doesn\\'t fit in 8 bits\");\n        return int8(value);\n    }\n\n    /**\n     * @dev Converts an unsigned uint256 into a signed int256.\n     *\n     * Requirements:\n     *\n     * - input must be less than or equal to maxInt256.\n     */\n    function toInt256(uint256 value) internal pure returns (int256) {\n        require(value < 2**255, \"SafeCast: value doesn't fit in an int256\");\n        return int256(value);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"../../GSN/Context.sol\";\nimport \"./IERC20.sol\";\nimport \"../../math/SafeMath.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20 {\n    using SafeMath for uint256;\n\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n     * a default value of 18.\n     *\n     * To select a different value for {decimals}, use {_setupDecimals}.\n     *\n     * All three of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor (string memory name_, string memory symbol_) public {\n        _name = name_;\n        _symbol = symbol_;\n        _decimals = 18;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n     * called.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\n        _totalSupply = _totalSupply.sub(amount);\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Sets {decimals} to a value other than the default one of 18.\n     *\n     * WARNING: This function should only be called from the constructor. Most\n     * applications that interact with token contracts will not expect\n     * {decimals} to ever change, and may work incorrectly if it does.\n     */\n    function _setupDecimals(uint8 decimals_) internal {\n        _decimals = decimals_;\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be to transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"../../math/SafeMath.sol\";\nimport \"../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor () internal {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Counters.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"../math/SafeMath.sol\";\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented or decremented by one. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n * Since it is not possible to overflow a 256 bit integer with increments of one, `increment` can skip the {SafeMath}\n * overflow check, thereby saving gas. This does assume however correct usage, in that the underlying `_value` is never\n * directly accessed.\n */\nlibrary Counters {\n    using SafeMath for uint256;\n\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        // The {SafeMath} overflow check can be skipped here, see the comment at the top\n        counter._value += 1;\n    }\n\n    function decrement(Counter storage counter) internal {\n        counter._value = counter._value.sub(1);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"../GSN/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor () internal {\n        _paused = false;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        require(!_paused, \"Pausable: paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        require(_paused, \"Pausable: not paused\");\n        _;\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "@openzeppelin/contracts/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/TCAP.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.7.5;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/introspection/IERC165.sol\";\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"./Orchestrator.sol\";\n\n/**\n * @title Total Market Cap Token\n * @author Cryptex.finance\n * @notice ERC20 token on the Ethereum Blockchain that provides total exposure to the cryptocurrency sector.\n */\ncontract TCAP is ERC20, Ownable, IERC165 {\n  /// @notice Open Zeppelin libraries\n  using SafeMath for uint256;\n\n  /// @notice if enabled TCAP can't be minted if the total supply is above or equal the cap value\n  bool public capEnabled = false;\n\n  /// @notice Maximum value the total supply of TCAP\n  uint256 public cap;\n\n  /**\n   * @notice Address to Vault Handler\n   * @dev Only vault handlers can mint and burn TCAP\n   */\n  mapping(address => bool) public vaultHandlers;\n\n  /**\n   * @dev the computed interface ID according to ERC-165. The interface ID is a XOR of interface method selectors.\n   * mint.selector ^\n   * burn.selector ^\n   * setCap.selector ^\n   * enableCap.selector ^\n   * transfer.selector ^\n   * transferFrom.selector ^\n   * addVaultHandler.selector ^\n   * removeVaultHandler.selector ^\n   * approve.selector => 0xbd115939\n   */\n  bytes4 private constant _INTERFACE_ID_TCAP = 0xbd115939;\n\n  /// @dev bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\n  bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\n\n  /// @notice An event emitted when a vault handler is added\n  event VaultHandlerAdded(\n    address indexed _owner,\n    address indexed _tokenHandler\n  );\n\n  /// @notice An event emitted when a vault handler is removed\n  event VaultHandlerRemoved(\n    address indexed _owner,\n    address indexed _tokenHandler\n  );\n\n  /// @notice An event emitted when the cap value is updated\n  event NewCap(address indexed _owner, uint256 _amount);\n\n  /// @notice An event emitted when the cap is enabled or disabled\n  event NewCapEnabled(address indexed _owner, bool _enable);\n\n  /**\n   * @notice Constructor\n   * @param _name uint256\n   * @param _symbol uint256\n   * @param _cap uint256\n   * @param _orchestrator address\n   */\n  constructor(\n    string memory _name,\n    string memory _symbol,\n    uint256 _cap,\n    Orchestrator _orchestrator\n  ) ERC20(_name, _symbol) {\n    cap = _cap;\n\n    /// @dev transfer ownership to orchestrator\n    transferOwnership(address(_orchestrator));\n  }\n\n  /// @notice Reverts if called by any account that is not a vault.\n  modifier onlyVault() {\n    require(\n      vaultHandlers[msg.sender],\n      \"TCAP::onlyVault: caller is not a vault\"\n    );\n    _;\n  }\n\n  /**\n   * @notice Adds a new address as a vault\n   * @param _vaultHandler address of a contract with permissions to mint and burn tokens\n   * @dev Only owner can call it\n   */\n  function addVaultHandler(address _vaultHandler) external onlyOwner {\n    vaultHandlers[_vaultHandler] = true;\n    emit VaultHandlerAdded(msg.sender, _vaultHandler);\n  }\n\n  /**\n   * @notice Removes an address as a vault\n   * @param _vaultHandler address of the contract to be removed as vault\n   * @dev Only owner can call it\n   */\n  function removeVaultHandler(address _vaultHandler) external onlyOwner {\n    vaultHandlers[_vaultHandler] = false;\n    emit VaultHandlerRemoved(msg.sender, _vaultHandler);\n  }\n\n  /**\n   * @notice Mints TCAP Tokens\n   * @param _account address of the receiver of tokens\n   * @param _amount uint of tokens to mint\n   * @dev Only vault can call it\n   */\n  function mint(address _account, uint256 _amount) external onlyVault {\n    _mint(_account, _amount);\n  }\n\n  /**\n   * @notice Burns TCAP Tokens\n   * @param _account address of the account which is burning tokens.\n   * @param _amount uint of tokens to burn\n   * @dev Only vault can call it\n   */\n  function burn(address _account, uint256 _amount) external onlyVault {\n    _burn(_account, _amount);\n  }\n\n  /**\n   * @notice Sets maximum value the total supply of TCAP can have\n   * @param _cap value\n   * @dev When capEnabled is true, mint is not allowed to issue tokens that would increase the total supply above or equal the specified capacity.\n   * @dev Only owner can call it\n   */\n  function setCap(uint256 _cap) external onlyOwner {\n    cap = _cap;\n    emit NewCap(msg.sender, _cap);\n  }\n\n  /**\n   * @notice Enables or Disables the Total Supply Cap.\n   * @param _enable value\n   * @dev When capEnabled is true, minting will not be allowed above the max capacity. It can exist a supply above the cap, but it prevents minting above the cap.\n   * @dev Only owner can call it\n   */\n  function enableCap(bool _enable) external onlyOwner {\n    capEnabled = _enable;\n    emit NewCapEnabled(msg.sender, _enable);\n  }\n\n  /**\n   * @notice ERC165 Standard for support of interfaces\n   * @param _interfaceId bytes of interface\n   * @return bool\n   */\n  function supportsInterface(bytes4 _interfaceId)\n    external\n    pure\n    override\n    returns (bool)\n  {\n    return (_interfaceId == _INTERFACE_ID_TCAP ||\n      _interfaceId == _INTERFACE_ID_ERC165);\n  }\n\n  /**\n   * @notice executes before each token transfer or mint\n   * @param _from address\n   * @param _to address\n   * @param _amount value to transfer\n   * @dev See {ERC20-_beforeTokenTransfer}.\n   * @dev minted tokens must not cause the total supply to go over the cap.\n   * @dev Reverts if the to address is equal to token address\n   */\n  function _beforeTokenTransfer(\n    address _from,\n    address _to,\n    uint256 _amount\n  ) internal virtual override {\n    super._beforeTokenTransfer(_from, _to, _amount);\n\n    require(\n      _to != address(this),\n      \"TCAP::transfer: can't transfer to TCAP contract\"\n    );\n\n    if (_from == address(0) && capEnabled) {\n      // When minting tokens\n      require(\n        totalSupply().add(_amount) <= cap,\n        \"TCAP::Transfer: TCAP cap exceeded\"\n      );\n    }\n  }\n}\n"
    },
    "contracts/oracles/ChainlinkOracle.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.7.5;\n\nimport \"@chainlink/contracts/src/v0.6/interfaces/AggregatorV3Interface.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/introspection/IERC165.sol\";\n\n/**\n * @title Chainlink Oracle\n * @author Cryptex.finance\n * @notice Contract in charge or reading the information from a Chainlink Oracle. TCAP contracts read the price directly from this contract. More information can be found on Chainlink Documentation\n */\ncontract ChainlinkOracle is Ownable, IERC165 {\n  AggregatorV3Interface internal aggregatorContract;\n\n  /*\n   * setReferenceContract.selector ^\n   * getLatestAnswer.selector ^\n   * getLatestTimestamp.selector ^\n   * getPreviousAnswer.selector ^\n   * getPreviousTimestamp.selector =>  0x85be402b\n   */\n  bytes4 private constant _INTERFACE_ID_CHAINLINK_ORACLE = 0x85be402b;\n\n  /*\n   * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\n   */\n  bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\n\n  /**\n   * @notice Called once the contract is deployed.\n   * Set the Chainlink Oracle as an aggregator.\n   */\n  constructor(address _aggregator, address _owner) {\n\t\trequire(_aggregator != address(0) && _owner != address(0), \"address can't be 0\");\n    aggregatorContract = AggregatorV3Interface(_aggregator);\n\t  transferOwnership(_owner);\n  }\n\n  /**\n   * @notice Changes the reference contract.\n   * @dev Only owner can call it.\n   */\n  function setReferenceContract(address _aggregator) public onlyOwner() {\n    aggregatorContract = AggregatorV3Interface(_aggregator);\n  }\n\n  /**\n   * @notice Returns the latest answer from the reference contract.\n   * @return price\n   */\n  function getLatestAnswer() public view returns (int256) {\n    (\n      uint80 roundID,\n      int256 price,\n      ,\n      uint256 timeStamp,\n      uint80 answeredInRound\n    ) = aggregatorContract.latestRoundData();\n    require(\n      timeStamp != 0,\n      \"ChainlinkOracle::getLatestAnswer: round is not complete\"\n    );\n    require(\n      answeredInRound >= roundID,\n      \"ChainlinkOracle::getLatestAnswer: stale data\"\n    );\n    return price;\n  }\n\n  /**\n   * @notice Returns the latest round from the reference contract.\n   */\n  function getLatestRound()\n    public\n    view\n    returns (\n      uint80,\n      int256,\n      uint256,\n      uint256,\n      uint80\n    )\n  {\n    (\n      uint80 roundID,\n      int256 price,\n      uint256 startedAt,\n      uint256 timeStamp,\n      uint80 answeredInRound\n    ) = aggregatorContract.latestRoundData();\n\n    return (roundID, price, startedAt, timeStamp, answeredInRound);\n  }\n\n  /**\n   * @notice Returns a given round from the reference contract.\n   * @param _id of round\n   */\n  function getRound(uint80 _id)\n    public\n    view\n    returns (\n      uint80,\n      int256,\n      uint256,\n      uint256,\n      uint80\n    )\n  {\n    (\n      uint80 roundID,\n      int256 price,\n      uint256 startedAt,\n      uint256 timeStamp,\n      uint80 answeredInRound\n    ) = aggregatorContract.getRoundData(_id);\n\n    return (roundID, price, startedAt, timeStamp, answeredInRound);\n  }\n\n  /**\n   * @notice Returns the last time the Oracle was updated.\n   */\n  function getLatestTimestamp() public view returns (uint256) {\n    (, , , uint256 timeStamp, ) = aggregatorContract.latestRoundData();\n    return timeStamp;\n  }\n\n  /**\n   * @notice Returns a previous answer updated on the Oracle.\n   * @param _id of round\n   * @return price\n   */\n  function getPreviousAnswer(uint80 _id) public view returns (int256) {\n    (uint80 roundID, int256 price, , , ) = aggregatorContract.getRoundData(_id);\n    require(\n      _id <= roundID,\n      \"ChainlinkOracle::getPreviousAnswer: not enough history\"\n    );\n    return price;\n  }\n\n  /**\n   * @notice Returns a previous time the Oracle was updated.\n   * @param _id of round\n   * @return timeStamp\n   */\n  function getPreviousTimestamp(uint80 _id) public view returns (uint256) {\n    (uint80 roundID, , , uint256 timeStamp, ) =\n      aggregatorContract.getRoundData(_id);\n    require(\n      _id <= roundID,\n      \"ChainlinkOracle::getPreviousTimestamp: not enough history\"\n    );\n    return timeStamp;\n  }\n\n  /**\n   * @notice ERC165 Standard for support of interfaces.\n   */\n  function supportsInterface(bytes4 interfaceId)\n    external\n    pure\n    override\n    returns (bool)\n  {\n    return (interfaceId == _INTERFACE_ID_CHAINLINK_ORACLE ||\n      interfaceId == _INTERFACE_ID_ERC165);\n  }\n}\n"
    },
    "@openzeppelin/contracts/GSN/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping (bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\n\n            bytes32 lastvalue = set._values[lastIndex];\n\n            // Move the last value to the index where the value to delete is\n            set._values[toDeleteIndex] = lastvalue;\n            // Update the index for the moved value\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        require(set._values.length > index, \"EnumerableSet: index out of bounds\");\n        return set._values[index];\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(value)));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(value)));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(value)));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint256(_at(set._inner, index)));\n    }\n\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.2 <0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/introspection/ERC165Checker.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.2 <0.8.0;\n\n/**\n * @dev Library used to query support of an interface declared via {IERC165}.\n *\n * Note that these functions return the actual result of the query: they do not\n * `revert` if an interface is not supported. It is up to the caller to decide\n * what to do in these cases.\n */\nlibrary ERC165Checker {\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\n    bytes4 private constant _INTERFACE_ID_INVALID = 0xffffffff;\n\n    /*\n     * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\n     */\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\n\n    /**\n     * @dev Returns true if `account` supports the {IERC165} interface,\n     */\n    function supportsERC165(address account) internal view returns (bool) {\n        // Any contract that implements ERC165 must explicitly indicate support of\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\n        return _supportsERC165Interface(account, _INTERFACE_ID_ERC165) &&\n            !_supportsERC165Interface(account, _INTERFACE_ID_INVALID);\n    }\n\n    /**\n     * @dev Returns true if `account` supports the interface defined by\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\n     *\n     * See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\n        // query support of both ERC165 as per the spec and support of _interfaceId\n        return supportsERC165(account) &&\n            _supportsERC165Interface(account, interfaceId);\n    }\n\n    /**\n     * @dev Returns true if `account` supports all the interfaces defined in\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\n     *\n     * Batch-querying can lead to gas savings by skipping repeated checks for\n     * {IERC165} support.\n     *\n     * See {IERC165-supportsInterface}.\n     */\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\n        // query support of ERC165 itself\n        if (!supportsERC165(account)) {\n            return false;\n        }\n\n        // query support of each interface in _interfaceIds\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\n            if (!_supportsERC165Interface(account, interfaceIds[i])) {\n                return false;\n            }\n        }\n\n        // all interfaces supported\n        return true;\n    }\n\n    /**\n     * @notice Query if a contract implements an interface, does not check ERC165 support\n     * @param account The address of the contract to query for support of an interface\n     * @param interfaceId The interface identifier, as specified in ERC-165\n     * @return true if the contract at account indicates support of the interface with\n     * identifier interfaceId, false otherwise\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\n     * the behavior of this method is undefined. This precondition can be checked\n     * with {supportsERC165}.\n     * Interface identification is specified in ERC-165.\n     */\n    function _supportsERC165Interface(address account, bytes4 interfaceId) private view returns (bool) {\n        // success determines whether the staticcall succeeded and result determines\n        // whether the contract at account indicates support of _interfaceId\n        (bool success, bool result) = _callERC165SupportsInterface(account, interfaceId);\n\n        return (success && result);\n    }\n\n    /**\n     * @notice Calls the function with selector 0x01ffc9a7 (ERC165) and suppresses throw\n     * @param account The address of the contract to query for support of an interface\n     * @param interfaceId The interface identifier, as specified in ERC-165\n     * @return success true if the STATICCALL succeeded, false otherwise\n     * @return result true if the STATICCALL succeeded and the contract at account\n     * indicates support of the interface with identifier interfaceId, false otherwise\n     */\n    function _callERC165SupportsInterface(address account, bytes4 interfaceId)\n        private\n        view\n        returns (bool, bool)\n    {\n        bytes memory encodedParams = abi.encodeWithSelector(_INTERFACE_ID_ERC165, interfaceId);\n        (bool success, bytes memory result) = account.staticcall{ gas: 30000 }(encodedParams);\n        if (result.length < 32) return (false, false);\n        return (success, abi.decode(result, (bool)));\n    }\n}\n"
    },
    "@chainlink/contracts/src/v0.6/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.0;\n\ninterface AggregatorV3Interface {\n\n  function decimals() external view returns (uint8);\n  function description() external view returns (string memory);\n  function version() external view returns (uint256);\n\n  // getRoundData and latestRoundData should both raise \"No data present\"\n  // if they do not have data to report, instead of returning unset values\n  // which could be misinterpreted as actual reported values.\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n}\n"
    },
    "contracts/MATICVaultHandler.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.7.5;\n\nimport \"./IVaultHandler.sol\";\nimport \"./Orchestrator.sol\";\nimport \"./IWMATIC.sol\";\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\n\n/**\n * @title MATIC TCAP Vault\n * @author Cryptex.finance\n * @notice Contract in charge of handling the TCAP Vault and stake using a MATIC and WMATIC\n */\ncontract MATICVaultHandler is IVaultHandler {\n\t/// @notice Open Zeppelin libraries\n\tusing SafeMath for uint256;\n\n\t/**\n\t * @notice Constructor\n\t * @param _orchestrator address\n\t * @param _divisor uint256\n\t * @param _ratio uint256\n\t * @param _burnFee uint256\n\t * @param _liquidationPenalty uint256\n\t * @param _tcapOracle address\n\t * @param _tcapAddress address\n\t * @param _collateralAddress address\n\t * @param _collateralOracle address\n\t * @param _rewardHandler address\n\t * @param _treasury address\n\t */\n\tconstructor(\n\t\tOrchestrator _orchestrator,\n\t\tuint256 _divisor,\n\t\tuint256 _ratio,\n\t\tuint256 _burnFee,\n\t\tuint256 _liquidationPenalty,\n\t\taddress _tcapOracle,\n\t\tTCAP _tcapAddress,\n\t\taddress _collateralAddress,\n\t\taddress _collateralOracle,\n\t\taddress _maticOracle,\n\t\taddress _rewardHandler,\n\t\taddress _treasury\n\t)\n\tIVaultHandler(\n\t\t_orchestrator,\n\t\t_divisor,\n\t\t_ratio,\n\t\t_burnFee,\n\t\t_liquidationPenalty,\n\t\t_tcapOracle,\n\t\t_tcapAddress,\n\t\t_collateralAddress,\n\t\t_collateralOracle,\n\t\t_maticOracle,\n\t\t_rewardHandler,\n\t\t_treasury\n\t)\n\t{}\n\n\t/**\n\t * @notice only accept MATIC via fallback from the WMATIC contract\n\t */\n\treceive() external payable {\n\t\tassert(msg.sender == address(collateralContract));\n\t}\n\n\t/**\n\t * @notice Adds collateral to vault using MATIC\n\t * @dev value should be higher than 0\n\t * @dev MATIC is turned into WMATIC\n\t */\n\tfunction addCollateralMATIC()\n\texternal\n\tpayable\n\tnonReentrant\n\tvaultExists\n\twhenNotPaused\n\t{\n\t\trequire(\n\t\t\tmsg.value > 0,\n\t\t\t\"MATICVaultHandler::addCollateralMATIC: value can't be 0\"\n\t\t);\n\t\tIWMATIC(address(collateralContract)).deposit{value : msg.value}();\n\t\tVault storage vault = vaults[userToVault[msg.sender]];\n\t\tvault.Collateral = vault.Collateral.add(msg.value);\n\t\temit CollateralAdded(msg.sender, vault.Id, msg.value);\n\t}\n\n\t/**\n\t * @notice Removes not used collateral from vault\n\t * @param _amount of collateral to remove\n\t * @dev _amount should be higher than 0\n\t * @dev WMATIC is turned into MATIC\n\t */\n\tfunction removeCollateralMATIC(uint256 _amount)\n\texternal\n\tnonReentrant\n\tvaultExists\n\twhenNotPaused\n\t{\n\t\trequire(\n\t\t\t_amount > 0,\n\t\t\t\"MATICVaultHandler::removeCollateralMATIC: value can't be 0\"\n\t\t);\n\t\tVault storage vault = vaults[userToVault[msg.sender]];\n\t\tuint256 currentRatio = getVaultRatio(vault.Id);\n\t\trequire(\n\t\t\tvault.Collateral >= _amount,\n\t\t\t\"WMATICVaultHandler::removeCollateralMATIC: retrieve amount higher than collateral\"\n\t\t);\n\t\tvault.Collateral = vault.Collateral.sub(_amount);\n\t\tif (currentRatio != 0) {\n\t\t\trequire(\n\t\t\t\tgetVaultRatio(vault.Id) >= ratio,\n\t\t\t\t\"MATICVaultHandler::removeCollateralMATIC: collateral below min required ratio\"\n\t\t\t);\n\t\t}\n\n\t\tIWMATIC(address(collateralContract)).withdraw(_amount);\n\t\tsafeTransferETH(msg.sender, _amount);\n\t\temit CollateralRemoved(msg.sender, vault.Id, _amount);\n\t}\n}\n"
    },
    "contracts/IWMATIC.sol": {
      "content": "// SPDX-License-Identifier: MIT\n/**\n *Submitted for verification at polygonscan.com on 2021-06-09\n*/\n\n// https://firebird.finance DeFi multi-chain yield farms deployer & DEXs aggregator.\n\n// Copyright (C) 2015, 2016, 2017 Dapphub\n\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npragma solidity 0.7.5;\n\ninterface IWMATIC {\n\n\n\tevent  Approval(address indexed src, address indexed guy, uint wad);\n\tevent  Transfer(address indexed src, address indexed dst, uint wad);\n\tevent  Deposit(address indexed dst, uint wad);\n\tevent  Withdrawal(address indexed src, uint wad);\n\n\tfunction deposit() external payable ;\n\n\tfunction withdraw(uint wad) external ;\n\n\tfunction totalSupply() external view returns (uint) ;\n\n\tfunction approve(address guy, uint wad) external returns (bool) ;\n\n\tfunction transfer(address dst, uint wad) external returns (bool) ;\n\n\tfunction transferFrom(address src, address dst, uint wad)\n\texternal\n\treturns (bool)\n\t;\n}\n\n\n/*\n                    GNU GENERAL PUBLIC LICENSE\n                       Version 3, 29 June 2007\n\n Copyright (C) 2007 Free Software Foundation, Inc. <http://fsf.org/>\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The GNU General Public License is a free, copyleft license for\nsoftware and other kinds of works.\n\n  The licenses for most software and other practical works are designed\nto take away your freedom to share and change the works.  By contrast,\nthe GNU General Public License is intended to guarantee your freedom to\nshare and change all versions of a program--to make sure it remains free\nsoftware for all its users.  We, the Free Software Foundation, use the\nGNU General Public License for most of our software; it applies also to\nany other work released this way by its authors.  You can apply it to\nyour programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthem if you wish), that you receive source code or can get it if you\nwant it, that you can change the software or use pieces of it in new\nfree programs, and that you know you can do these things.\n\n  To protect your rights, we need to prevent others from denying you\nthese rights or asking you to surrender the rights.  Therefore, you have\ncertain responsibilities if you distribute copies of the software, or if\nyou modify it: responsibilities to respect the freedom of others.\n\n  For example, if you distribute copies of such a program, whether\ngratis or for a fee, you must pass on to the recipients the same\nfreedoms that you received.  You must make sure that they, too, receive\nor can get the source code.  And you must show them these terms so they\nknow their rights.\n\n  Developers that use the GNU GPL protect your rights with two steps:\n(1) assert copyright on the software, and (2) offer you this License\ngiving you legal permission to copy, distribute and/or modify it.\n\n  For the developers' and authors' protection, the GPL clearly explains\nthat there is no warranty for this free software.  For both users' and\nauthors' sake, the GPL requires that modified versions be marked as\nchanged, so that their problems will not be attributed erroneously to\nauthors of previous versions.\n\n  Some devices are designed to deny users access to install or run\nmodified versions of the software inside them, although the manufacturer\ncan do so.  This is fundamentally incompatible with the aim of\nprotecting users' freedom to change the software.  The systematic\npattern of such abuse occurs in the area of products for individuals to\nuse, which is precisely where it is most unacceptable.  Therefore, we\nhave designed this version of the GPL to prohibit the practice for those\nproducts.  If such problems arise substantially in other domains, we\nstand ready to extend this provision to those domains in future versions\nof the GPL, as needed to protect the freedom of users.\n\n  Finally, every program is threatened constantly by software patents.\nStates should not allow patents to restrict development and use of\nsoftware on general-purpose computers, but in those that do, we wish to\navoid the special danger that patents applied to a free program could\nmake it effectively proprietary.  To prevent this, the GPL assures that\npatents cannot be used to render the program non-free.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                       TERMS AND CONDITIONS\n\n  0. Definitions.\n\n  \"This License\" refers to version 3 of the GNU General Public License.\n\n  \"Copyright\" also means copyright-like laws that apply to other kinds of\nworks, such as semiconductor masks.\n\n  \"The Program\" refers to any copyrightable work licensed under this\nLicense.  Each licensee is addressed as \"you\".  \"Licensees\" and\n\"recipients\" may be individuals or organizations.\n\n  To \"modify\" a work means to copy from or adapt all or part of the work\nin a fashion requiring copyright permission, other than the making of an\nexact copy.  The resulting work is called a \"modified version\" of the\nearlier work or a work \"based on\" the earlier work.\n\n  A \"covered work\" means either the unmodified Program or a work based\non the Program.\n\n  To \"propagate\" a work means to do anything with it that, without\npermission, would make you directly or secondarily liable for\ninfringement under applicable copyright law, except executing it on a\ncomputer or modifying a private copy.  Propagation includes copying,\ndistribution (with or without modification), making available to the\nexternal, and in some countries other activities as well.\n\n  To \"convey\" a work means any kind of propagation that enables other\nparties to make or receive copies.  Mere interaction with a user through\na computer network, with no transfer of a copy, is not conveying.\n\n  An interactive user interface displays \"Appropriate Legal Notices\"\nto the extent that it includes a convenient and prominently visible\nfeature that (1) displays an appropriate copyright notice, and (2)\ntells the user that there is no warranty for the work (except to the\nextent that warranties are provided), that licensees may convey the\nwork under this License, and how to view a copy of this License.  If\nthe interface presents a list of user commands or options, such as a\nmenu, a prominent item in the list meets this criterion.\n\n  1. Source Code.\n\n  The \"source code\" for a work means the preferred form of the work\nfor making modifications to it.  \"Object code\" means any non-source\nform of a work.\n\n  A \"Standard Interface\" means an interface that either is an official\nstandard defined by a recognized standards body, or, in the case of\ninterfaces specified for a particular programming language, one that\nis widely used among developers working in that language.\n\n  The \"System Libraries\" of an executable work include anything, other\nthan the work as a whole, that (a) is included in the normal form of\npackaging a Major Component, but which is not part of that Major\nComponent, and (b) serves only to enable use of the work with that\nMajor Component, or to implement a Standard Interface for which an\nimplementation is available to the external in source code form.  A\n\"Major Component\", in this context, means a major essential component\n(kernel, window system, and so on) of the specific operating system\n(if any) on which the executable work runs, or a compiler used to\nproduce the work, or an object code interpreter used to run it.\n\n  The \"Corresponding Source\" for a work in object code form means all\nthe source code needed to generate, install, and (for an executable\nwork) run the object code and to modify the work, including scripts to\ncontrol those activities.  However, it does not include the work's\nSystem Libraries, or general-purpose tools or generally available free\nprograms which are used unmodified in performing those activities but\nwhich are not part of the work.  For example, Corresponding Source\nincludes interface definition files associated with source files for\nthe work, and the source code for shared libraries and dynamically\nlinked subprograms that the work is specifically designed to require,\nsuch as by intimate data communication or control flow between those\nsubprograms and other parts of the work.\n\n  The Corresponding Source need not include anything that users\ncan regenerate automatically from other parts of the Corresponding\nSource.\n\n  The Corresponding Source for a work in source code form is that\nsame work.\n\n  2. Basic Permissions.\n\n  All rights granted under this License are granted for the term of\ncopyright on the Program, and are irrevocable provided the stated\nconditions are met.  This License explicitly affirms your unlimited\npermission to run the unmodified Program.  The output from running a\ncovered work is covered by this License only if the output, given its\ncontent, constitutes a covered work.  This License acknowledges your\nrights of fair use or other equivalent, as provided by copyright law.\n\n  You may make, run and propagate covered works that you do not\nconvey, without conditions so long as your license otherwise remains\nin force.  You may convey covered works to others for the sole purpose\nof having them make modifications exclusively for you, or provide you\nwith facilities for running those works, provided that you comply with\nthe terms of this License in conveying all material for which you do\nnot control copyright.  Those thus making or running the covered works\nfor you must do so exclusively on your behalf, under your direction\nand control, on terms that prohibit them from making any copies of\nyour copyrighted material outside their relationship with you.\n\n  Conveying under any other circumstances is permitted solely under\nthe conditions stated below.  Sublicensing is not allowed; section 10\nmakes it unnecessary.\n\n  3. Protecting Users' Legal Rights From Anti-Circumvention Law.\n\n  No covered work shall be deemed part of an effective technological\nmeasure under any applicable law fulfilling obligations under article\n11 of the WIPO copyright treaty adopted on 20 December 1996, or\nsimilar laws prohibiting or restricting circumvention of such\nmeasures.\n\n  When you convey a covered work, you waive any legal power to forbid\ncircumvention of technological measures to the extent such circumvention\nis effected by exercising rights under this License with respect to\nthe covered work, and you disclaim any intention to limit operation or\nmodification of the work as a means of enforcing, against the work's\nusers, your or third parties' legal rights to forbid circumvention of\ntechnological measures.\n\n  4. Conveying Verbatim Copies.\n\n  You may convey verbatim copies of the Program's source code as you\nreceive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice;\nkeep intact all notices stating that this License and any\nnon-permissive terms added in accord with section 7 apply to the code;\nkeep intact all notices of the absence of any warranty; and give all\nrecipients a copy of this License along with the Program.\n\n  You may charge any price or no price for each copy that you convey,\nand you may offer support or warranty protection for a fee.\n\n  5. Conveying Modified Source Versions.\n\n  You may convey a work based on the Program, or the modifications to\nproduce it from the Program, in the form of source code under the\nterms of section 4, provided that you also meet all of these conditions:\n\n    a) The work must carry prominent notices stating that you modified\n    it, and giving a relevant date.\n\n    b) The work must carry prominent notices stating that it is\n    released under this License and any conditions added under section\n    7.  This requirement modifies the requirement in section 4 to\n    \"keep intact all notices\".\n\n    c) You must license the entire work, as a whole, under this\n    License to anyone who comes into possession of a copy.  This\n    License will therefore apply, along with any applicable section 7\n    additional terms, to the whole of the work, and all its parts,\n    regardless of how they are packaged.  This License gives no\n    permission to license the work in any other way, but it does not\n    invalidate such permission if you have separately received it.\n\n    d) If the work has interactive user interfaces, each must display\n    Appropriate Legal Notices; however, if the Program has interactive\n    interfaces that do not display Appropriate Legal Notices, your\n    work need not make them do so.\n\n  A compilation of a covered work with other separate and independent\nworks, which are not by their nature extensions of the covered work,\nand which are not combined with it such as to form a larger program,\nin or on a volume of a storage or distribution medium, is called an\n\"aggregate\" if the compilation and its resulting copyright are not\nused to limit the access or legal rights of the compilation's users\nbeyond what the individual works permit.  Inclusion of a covered work\nin an aggregate does not cause this License to apply to the other\nparts of the aggregate.\n\n  6. Conveying Non-Source Forms.\n\n  You may convey a covered work in object code form under the terms\nof sections 4 and 5, provided that you also convey the\nmachine-readable Corresponding Source under the terms of this License,\nin one of these ways:\n\n    a) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by the\n    Corresponding Source fixed on a durable physical medium\n    customarily used for software interchange.\n\n    b) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by a\n    written offer, valid for at least three years and valid for as\n    long as you offer spare parts or customer support for that product\n    model, to give anyone who possesses the object code either (1) a\n    copy of the Corresponding Source for all the software in the\n    product that is covered by this License, on a durable physical\n    medium customarily used for software interchange, for a price no\n    more than your reasonable cost of physically performing this\n    conveying of source, or (2) access to copy the\n    Corresponding Source from a network server at no charge.\n\n    c) Convey individual copies of the object code with a copy of the\n    written offer to provide the Corresponding Source.  This\n    alternative is allowed only occasionally and noncommercially, and\n    only if you received the object code with such an offer, in accord\n    with subsection 6b.\n\n    d) Convey the object code by offering access from a designated\n    place (gratis or for a charge), and offer equivalent access to the\n    Corresponding Source in the same way through the same place at no\n    further charge.  You need not require recipients to copy the\n    Corresponding Source along with the object code.  If the place to\n    copy the object code is a network server, the Corresponding Source\n    may be on a different server (operated by you or a third party)\n    that supports equivalent copying facilities, provided you maintain\n    clear directions next to the object code saying where to find the\n    Corresponding Source.  Regardless of what server hosts the\n    Corresponding Source, you remain obligated to ensure that it is\n    available for as long as needed to satisfy these requirements.\n\n    e) Convey the object code using peer-to-peer transmission, provided\n    you inform other peers where the object code and Corresponding\n    Source of the work are being offered to the general external at no\n    charge under subsection 6d.\n\n  A separable portion of the object code, whose source code is excluded\nfrom the Corresponding Source as a System Library, need not be\nincluded in conveying the object code work.\n\n  A \"User Product\" is either (1) a \"consumer product\", which means any\ntangible personal property which is normally used for personal, family,\nor household purposes, or (2) anything designed or sold for incorporation\ninto a dwelling.  In determining whether a product is a consumer product,\ndoubtful cases shall be resolved in favor of coverage.  For a particular\nproduct received by a particular user, \"normally used\" refers to a\ntypical or common use of that class of product, regardless of the status\nof the particular user or of the way in which the particular user\nactually uses, or expects or is expected to use, the product.  A product\nis a consumer product regardless of whether the product has substantial\ncommercial, industrial or non-consumer uses, unless such uses represent\nthe only significant mode of use of the product.\n\n  \"Installation Information\" for a User Product means any methods,\nprocedures, authorization keys, or other information required to install\nand execute modified versions of a covered work in that User Product from\na modified version of its Corresponding Source.  The information must\nsuffice to ensure that the continued functioning of the modified object\ncode is in no case prevented or interfered with solely because\nmodification has been made.\n\n  If you convey an object code work under this section in, or with, or\nspecifically for use in, a User Product, and the conveying occurs as\npart of a transaction in which the right of possession and use of the\nUser Product is transferred to the recipient in perpetuity or for a\nfixed term (regardless of how the transaction is characterized), the\nCorresponding Source conveyed under this section must be accompanied\nby the Installation Information.  But this requirement does not apply\nif neither you nor any third party retains the ability to install\nmodified object code on the User Product (for example, the work has\nbeen installed in ROM).\n\n  The requirement to provide Installation Information does not include a\nrequirement to continue to provide support service, warranty, or updates\nfor a work that has been modified or installed by the recipient, or for\nthe User Product in which it has been modified or installed.  Access to a\nnetwork may be denied when the modification itself materially and\nadversely affects the operation of the network or violates the rules and\nprotocols for communication across the network.\n\n  Corresponding Source conveyed, and Installation Information provided,\nin accord with this section must be in a format that is externally\ndocumented (and with an implementation available to the external in\nsource code form), and must require no special password or key for\nunpacking, reading or copying.\n\n  7. Additional Terms.\n\n  \"Additional permissions\" are terms that supplement the terms of this\nLicense by making exceptions from one or more of its conditions.\nAdditional permissions that are applicable to the entire Program shall\nbe treated as though they were included in this License, to the extent\nthat they are valid under applicable law.  If additional permissions\napply only to part of the Program, that part may be used separately\nunder those permissions, but the entire Program remains governed by\nthis License without regard to the additional permissions.\n\n  When you convey a copy of a covered work, you may at your option\nremove any additional permissions from that copy, or from any part of\nit.  (Additional permissions may be written to require their own\nremoval in certain cases when you modify the work.)  You may place\nadditional permissions on material, added by you to a covered work,\nfor which you have or can give appropriate copyright permission.\n\n  Notwithstanding any other provision of this License, for material you\nadd to a covered work, you may (if authorized by the copyright holders of\nthat material) supplement the terms of this License with terms:\n\n    a) Disclaiming warranty or limiting liability differently from the\n    terms of sections 15 and 16 of this License; or\n\n    b) Requiring preservation of specified reasonable legal notices or\n    author attributions in that material or in the Appropriate Legal\n    Notices displayed by works containing it; or\n\n    c) Prohibiting misrepresentation of the origin of that material, or\n    requiring that modified versions of such material be marked in\n    reasonable ways as different from the original version; or\n\n    d) Limiting the use for externality purposes of names of licensors or\n    authors of the material; or\n\n    e) Declining to grant rights under trademark law for use of some\n    trade names, trademarks, or service marks; or\n\n    f) Requiring indemnification of licensors and authors of that\n    material by anyone who conveys the material (or modified versions of\n    it) with contractual assumptions of liability to the recipient, for\n    any liability that these contractual assumptions directly impose on\n    those licensors and authors.\n\n  All other non-permissive additional terms are considered \"further\nrestrictions\" within the meaning of section 10.  If the Program as you\nreceived it, or any part of it, contains a notice stating that it is\ngoverned by this License along with a term that is a further\nrestriction, you may remove that term.  If a license document contains\na further restriction but permits relicensing or conveying under this\nLicense, you may add to a covered work material governed by the terms\nof that license document, provided that the further restriction does\nnot survive such relicensing or conveying.\n\n  If you add terms to a covered work in accord with this section, you\nmust place, in the relevant source files, a statement of the\nadditional terms that apply to those files, or a notice indicating\nwhere to find the applicable terms.\n\n  Additional terms, permissive or non-permissive, may be stated in the\nform of a separately written license, or stated as exceptions;\nthe above requirements apply either way.\n\n  8. Termination.\n\n  You may not propagate or modify a covered work except as expressly\nprovided under this License.  Any attempt otherwise to propagate or\nmodify it is void, and will automatically terminate your rights under\nthis License (including any patent licenses granted under the third\nparagraph of section 11).\n\n  However, if you cease all violation of this License, then your\nlicense from a particular copyright holder is reinstated (a)\nprovisionally, unless and until the copyright holder explicitly and\nfinally terminates your license, and (b) permanently, if the copyright\nholder fails to notify you of the violation by some reasonable means\nprior to 60 days after the cessation.\n\n  Moreover, your license from a particular copyright holder is\nreinstated permanently if the copyright holder notifies you of the\nviolation by some reasonable means, this is the first time you have\nreceived notice of violation of this License (for any work) from that\ncopyright holder, and you cure the violation prior to 30 days after\nyour receipt of the notice.\n\n  Termination of your rights under this section does not terminate the\nlicenses of parties who have received copies or rights from you under\nthis License.  If your rights have been terminated and not permanently\nreinstated, you do not qualify to receive new licenses for the same\nmaterial under section 10.\n\n  9. Acceptance Not Required for Having Copies.\n\n  You are not required to accept this License in order to receive or\nrun a copy of the Program.  Ancillary propagation of a covered work\noccurring solely as a consequence of using peer-to-peer transmission\nto receive a copy likewise does not require acceptance.  However,\nnothing other than this License grants you permission to propagate or\nmodify any covered work.  These actions infringe copyright if you do\nnot accept this License.  Therefore, by modifying or propagating a\ncovered work, you indicate your acceptance of this License to do so.\n\n  10. Automatic Licensing of Downstream Recipients.\n\n  Each time you convey a covered work, the recipient automatically\nreceives a license from the original licensors, to run, modify and\npropagate that work, subject to this License.  You are not responsible\nfor enforcing compliance by third parties with this License.\n\n  An \"entity transaction\" is a transaction transferring control of an\norganization, or substantially all assets of one, or subdividing an\norganization, or merging organizations.  If propagation of a covered\nwork results from an entity transaction, each party to that\ntransaction who receives a copy of the work also receives whatever\nlicenses to the work the party's predecessor in interest had or could\ngive under the previous paragraph, plus a right to possession of the\nCorresponding Source of the work from the predecessor in interest, if\nthe predecessor has it or can get it with reasonable efforts.\n\n  You may not impose any further restrictions on the exercise of the\nrights granted or affirmed under this License.  For example, you may\nnot impose a license fee, royalty, or other charge for exercise of\nrights granted under this License, and you may not initiate litigation\n(including a cross-claim or counterclaim in a lawsuit) alleging that\nany patent claim is infringed by making, using, selling, offering for\nsale, or importing the Program or any portion of it.\n\n  11. Patents.\n\n  A \"contributor\" is a copyright holder who authorizes use under this\nLicense of the Program or a work on which the Program is based.  The\nwork thus licensed is called the contributor's \"contributor version\".\n\n  A contributor's \"essential patent claims\" are all patent claims\nowned or controlled by the contributor, whether already acquired or\nhereafter acquired, that would be infringed by some manner, permitted\nby this License, of making, using, or selling its contributor version,\nbut do not include claims that would be infringed only as a\nconsequence of further modification of the contributor version.  For\npurposes of this definition, \"control\" includes the right to grant\npatent sublicenses in a manner consistent with the requirements of\nthis License.\n\n  Each contributor grants you a non-exclusive, worldwide, royalty-free\npatent license under the contributor's essential patent claims, to\nmake, use, sell, offer for sale, import and otherwise run, modify and\npropagate the contents of its contributor version.\n\n  In the following three paragraphs, a \"patent license\" is any express\nagreement or commitment, however denominated, not to enforce a patent\n(such as an express permission to practice a patent or covenant not to\nsue for patent infringement).  To \"grant\" such a patent license to a\nparty means to make such an agreement or commitment not to enforce a\npatent against the party.\n\n  If you convey a covered work, knowingly relying on a patent license,\nand the Corresponding Source of the work is not available for anyone\nto copy, free of charge and under the terms of this License, through a\nexternally available network server or other readily accessible means,\nthen you must either (1) cause the Corresponding Source to be so\navailable, or (2) arrange to deprive yourself of the benefit of the\npatent license for this particular work, or (3) arrange, in a manner\nconsistent with the requirements of this License, to extend the patent\nlicense to downstream recipients.  \"Knowingly relying\" means you have\nactual knowledge that, but for the patent license, your conveying the\ncovered work in a country, or your recipient's use of the covered work\nin a country, would infringe one or more identifiable patents in that\ncountry that you have reason to believe are valid.\n\n  If, pursuant to or in connection with a single transaction or\narrangement, you convey, or propagate by procuring conveyance of, a\ncovered work, and grant a patent license to some of the parties\nreceiving the covered work authorizing them to use, propagate, modify\nor convey a specific copy of the covered work, then the patent license\nyou grant is automatically extended to all recipients of the covered\nwork and works based on it.\n\n  A patent license is \"discriminatory\" if it does not include within\nthe scope of its coverage, prohibits the exercise of, or is\nconditioned on the non-exercise of one or more of the rights that are\nspecifically granted under this License.  You may not convey a covered\nwork if you are a party to an arrangement with a third party that is\nin the business of distributing software, under which you make payment\nto the third party based on the extent of your activity of conveying\nthe work, and under which the third party grants, to any of the\nparties who would receive the covered work from you, a discriminatory\npatent license (a) in connection with copies of the covered work\nconveyed by you (or copies made from those copies), or (b) primarily\nfor and in connection with specific products or compilations that\ncontain the covered work, unless you entered into that arrangement,\nor that patent license was granted, prior to 28 March 2007.\n\n  Nothing in this License shall be construed as excluding or limiting\nany implied license or other defenses to infringement that may\notherwise be available to you under applicable patent law.\n\n  12. No Surrender of Others' Freedom.\n\n  If conditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot convey a\ncovered work so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you may\nnot convey it at all.  For example, if you agree to terms that obligate you\nto collect a royalty for further conveying from those to whom you convey\nthe Program, the only way you could satisfy both those terms and this\nLicense would be to refrain entirely from conveying the Program.\n\n  13. Use with the GNU Affero General Public License.\n\n  Notwithstanding any other provision of this License, you have\npermission to link or combine any covered work with a work licensed\nunder version 3 of the GNU Affero General Public License into a single\ncombined work, and to convey the resulting work.  The terms of this\nLicense will continue to apply to the part which is the covered work,\nbut the special requirements of the GNU Affero General Public License,\nsection 13, concerning interaction through a network will apply to the\ncombination as such.\n\n  14. Revised Versions of this License.\n\n  The Free Software Foundation may publish revised and/or new versions of\nthe GNU General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\n  Each version is given a distinguishing version number.  If the\nProgram specifies that a certain numbered version of the GNU General\nPublic License \"or any later version\" applies to it, you have the\noption of following the terms and conditions either of that numbered\nversion or of any later version published by the Free Software\nFoundation.  If the Program does not specify a version number of the\nGNU General Public License, you may choose any version ever published\nby the Free Software Foundation.\n\n  If the Program specifies that a proxy can decide which future\nversions of the GNU General Public License can be used, that proxy's\nexternal statement of acceptance of a version permanently authorizes you\nto choose that version for the Program.\n\n  Later license versions may give you additional or different\npermissions.  However, no additional obligations are imposed on any\nauthor or copyright holder as a result of your choosing to follow a\nlater version.\n\n  15. Disclaimer of Warranty.\n\n  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\nAPPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\nHOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY\nOF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM\nIS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF\nALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n  16. Limitation of Liability.\n\n  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS\nTHE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\nGENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE\nUSE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF\nDATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD\nPARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\nEVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGES.\n\n  17. Interpretation of Sections 15 and 16.\n\n  If the disclaimer of warranty and limitation of liability provided\nabove cannot be given local legal effect according to their terms,\nreviewing courts shall apply local law that most closely approximates\nan absolute waiver of all civil liability in connection with the\nProgram, unless a warranty or assumption of liability accompanies a\ncopy of the Program in return for a fee.\n\n                     END OF TERMS AND CONDITIONS\n\n            How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the external, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nstate the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) <year>  <name of author>\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nAlso add information on how to contact you by electronic and paper mail.\n\n  If the program does terminal interaction, make it output a short\nnotice like this when it starts in an interactive mode:\n\n    <program>  Copyright (C) <year>  <name of author>\n    This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the appropriate\nparts of the General Public License.  Of course, your program's commands\nmight be different; for a GUI interface, you would use an \"about box\".\n\n  You should also get your employer (if you work as a programmer) or school,\nif any, to sign a \"copyright disclaimer\" for the program, if necessary.\nFor more information on this, and how to apply and follow the GNU GPL, see\n<http://www.gnu.org/licenses/>.\n\n  The GNU General Public License does not permit incorporating your program\ninto proprietary programs.  If your program is a subroutine library, you\nmay consider it more useful to permit linking proprietary applications with\nthe library.  If this is what you want to do, use the GNU Lesser General\nPublic License instead of this License.  But first, please read\n<http://www.gnu.org/philosophy/why-not-lgpl.html>.\n\n*/\n"
    },
    "contracts/RewardHandler.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n/*\n   ____            __   __        __   _\n  / __/__ __ ___  / /_ / /  ___  / /_ (_)__ __\n _\\ \\ / // // _ \\/ __// _ \\/ -_)/ __// / \\ \\ /\n/___/ \\_, //_//_/\\__//_//_/\\__/ \\__//_/ /_\\_\\\n     /___/\n\n* Based on Synthetix Staking Rewards contract\n* Synthetix: StakingRewards.sol\n*\n* Latest source (may be newer): https://github.com/Synthetixio/synthetix/blob/v2.37.0/contracts/StakingRewards.sol\n* Docs: https://docs.synthetix.io/contracts/source/contracts/StakingRewards/\n*/\n\npragma solidity 0.7.5;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/utils/Pausable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\n\ncontract RewardHandler is Ownable, AccessControl, ReentrancyGuard, Pausable {\n  /// @notice Open Zeppelin libraries\n  using SafeMath for uint256;\n  using SafeERC20 for IERC20;\n\n  /// @notice Address of the reward\n  IERC20 public immutable rewardsToken;\n\n  /// @notice Address of the vault\n  address public immutable vault;\n\n  /// @notice Tracks the period where users stop earning rewards\n  uint256 public periodFinish = 0;\n\n  uint256 public rewardRate = 0;\n\n  /// @notice How long the rewards last, it updates when more rewards are added\n  uint256 public rewardsDuration = 14 days;\n\n  /// @notice Last time rewards were updated\n  uint256 public lastUpdateTime;\n\n  uint256 public rewardPerTokenStored;\n\n  /// @notice Track the rewards paid to users\n  mapping(address => uint256) public userRewardPerTokenPaid;\n\n  /// @notice Tracks the user rewards\n  mapping(address => uint256) public rewards;\n\n  /// @dev Tracks the total supply of the minted TCAPs\n  uint256 private _totalSupply;\n\n  /// @dev Tracks the amount of TCAP minted per user\n  mapping(address => uint256) private _balances;\n\n  /// @notice An event emitted when a reward is added\n  event RewardAdded(uint256 reward);\n\n  /// @notice An event emitted when TCAP is minted and staked to earn rewards\n  event Staked(address indexed user, uint256 amount);\n\n  /// @notice An event emitted when TCAP is burned and removed of stake\n  event Withdrawn(address indexed user, uint256 amount);\n\n  /// @notice An event emitted when reward is paid to a user\n  event RewardPaid(address indexed user, uint256 reward);\n\n  /// @notice An event emitted when the rewards duration is updated\n  event RewardsDurationUpdated(uint256 newDuration);\n\n  /// @notice An event emitted when a erc20 token is recovered\n  event Recovered(address token, uint256 amount);\n\n  /**\n   * @notice Constructor\n   * @param _owner address\n   * @param _rewardsToken address\n   * @param _vault uint256\n   */\n  constructor(\n    address _owner,\n    address _rewardsToken,\n    address _vault\n  ) {\n    require(\n      _owner != address(0) &&\n        _rewardsToken != address(0) &&\n        _vault != address(0),\n      \"RewardHandler::constructor: address can't be zero\"\n    );\n\n    rewardsToken = IERC20(_rewardsToken);\n    vault = _vault;\n    _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\n    transferOwnership(_owner);\n  }\n\n  /**\n   * @notice Updates the reward and time on call.\n   * @param _account address\n   */\n  modifier updateReward(address _account) {\n    rewardPerTokenStored = rewardPerToken();\n    lastUpdateTime = lastTimeRewardApplicable();\n\n    if (_account != address(0)) {\n      rewards[_account] = earned(_account);\n      userRewardPerTokenPaid[_account] = rewardPerTokenStored;\n    }\n    _;\n  }\n\n  /// @notice Reverts if the caller is not a vault.\n  modifier onlyVault() {\n    require(\n      msg.sender == vault,\n      \"RewardHandler::OnlyVault: not calling from vault\"\n    );\n    _;\n  }\n\n  /// @notice Returns the total amount of TCAP tokens minted and getting reward on this vault.\n  function totalSupply() external view returns (uint256) {\n    return _totalSupply;\n  }\n\n  /**\n   * @notice Returns the amount of TCAP tokens minted and getting reward from specific user.\n   * @param _account address\n   */\n  function balanceOf(address _account) external view returns (uint256) {\n    return _balances[_account];\n  }\n\n  /// @notice Returns the Reward rate multiplied by the rewards duration time.\n  function getRewardForDuration() external view returns (uint256) {\n    return rewardRate.mul(rewardsDuration);\n  }\n\n  /**\n   * @notice Called when TCAP is minted, adds the minted value as stake\n   * @param _staker address\n   * @param _amount uint\n   * @dev Only vault can call it\n   * @dev Updates rewards on call\n   */\n  function stake(address _staker, uint256 _amount)\n    external\n    onlyVault\n    nonReentrant\n    whenNotPaused\n    updateReward(_staker)\n  {\n    require(_amount > 0, \"Cannot stake 0\");\n    _totalSupply = _totalSupply.add(_amount);\n    _balances[_staker] = _balances[_staker].add(_amount);\n    emit Staked(_staker, _amount);\n  }\n\n  /**\n   * @notice Removes all stake and transfers all rewards to the staker.\n   * @param _staker address\n   * @dev Only vault can call it\n   */\n  function exit(address _staker) external onlyVault {\n    withdraw(_staker, _balances[_staker]);\n    getRewardFromVault(_staker);\n  }\n\n  /**\n   * @notice Notifies the contract that reward has been added to be given.\n   * @param _reward uint\n   * @dev Only owner  can call it\n   * @dev Increases duration of rewards\n   */\n  function notifyRewardAmount(uint256 _reward)\n    external\n    onlyOwner\n    updateReward(address(0))\n  {\n    if (block.timestamp >= periodFinish) {\n      rewardRate = _reward.div(rewardsDuration);\n    } else {\n      uint256 remaining = periodFinish.sub(block.timestamp);\n      uint256 leftover = remaining.mul(rewardRate);\n      rewardRate = _reward.add(leftover).div(rewardsDuration);\n    }\n\n    // Ensure the provided reward amount is not more than the balance in the contract.\n    // This keeps the reward rate in the right range, preventing overflows due to\n    // very high values of rewardRate in the earned and rewardsPerToken functions;\n    // Reward + leftover must be less than 2^256 / 10^18 to avoid overflow.\n    uint256 balance = rewardsToken.balanceOf(address(this));\n    require(\n      rewardRate <= balance.div(rewardsDuration),\n      \"Provided reward too high\"\n    );\n\n    lastUpdateTime = block.timestamp;\n    periodFinish = block.timestamp.add(rewardsDuration);\n    emit RewardAdded(_reward);\n  }\n\n  /**\n   * @notice Added to support recovering LP Rewards from other systems such as BAL to be distributed to holders\n   * @param _tokenAddress address\n   * @param _tokenAmount uint\n   * @dev Only owner  can call it\n   */\n  function recoverERC20(address _tokenAddress, uint256 _tokenAmount)\n    external\n    onlyOwner\n  {\n    // Cannot recover the staking token or the rewards token\n    require(\n      _tokenAddress != address(rewardsToken),\n      \"Cannot withdraw the staking or rewards tokens\"\n    );\n    IERC20(_tokenAddress).safeTransfer(owner(), _tokenAmount);\n    emit Recovered(_tokenAddress, _tokenAmount);\n  }\n\n  /**\n   * @notice  Updates the reward duration\n   * @param _rewardsDuration uint\n   * @dev Only owner  can call it\n   * @dev Previous rewards must be complete\n   */\n  function setRewardsDuration(uint256 _rewardsDuration) external onlyOwner {\n    require(\n      block.timestamp > periodFinish,\n      \"Previous rewards period must be complete before changing the duration for the new period\"\n    );\n    rewardsDuration = _rewardsDuration;\n    emit RewardsDurationUpdated(rewardsDuration);\n  }\n\n  /// @notice Returns the minimun between current block timestamp or the finish period of rewards.\n  function lastTimeRewardApplicable() public view returns (uint256) {\n    return min(block.timestamp, periodFinish);\n  }\n\n  /// @notice Returns the calculated reward per token deposited.\n  function rewardPerToken() public view returns (uint256) {\n    if (_totalSupply == 0) {\n      return rewardPerTokenStored;\n    }\n\n    return\n      rewardPerTokenStored.add(\n        lastTimeRewardApplicable()\n          .sub(lastUpdateTime)\n          .mul(rewardRate)\n          .mul(1e18)\n          .div(_totalSupply)\n      );\n  }\n\n  /**\n   * @notice Returns the amount of reward tokens a user has earned.\n   * @param _account address\n   */\n  function earned(address _account) public view returns (uint256) {\n    return\n      _balances[_account]\n        .mul(rewardPerToken().sub(userRewardPerTokenPaid[_account]))\n        .div(1e18)\n        .add(rewards[_account]);\n  }\n\n  /**\n   * @notice Returns the minimun between two variables\n   * @param _a uint\n   * @param _b uint\n   */\n  function min(uint256 _a, uint256 _b) public pure returns (uint256) {\n    return _a < _b ? _a : _b;\n  }\n\n  /**\n   * @notice Called when TCAP is burned or liquidated, removes the burned value as stake\n   * @param _staker address\n   * @param _amount uint\n   * @dev Only vault can call it\n   * @dev Updates rewards on call\n   */\n  function withdraw(address _staker, uint256 _amount)\n    public\n    onlyVault\n    nonReentrant\n    updateReward(_staker)\n  {\n    require(_amount > 0, \"Cannot withdraw 0\");\n    _totalSupply = _totalSupply.sub(_amount);\n    _balances[_staker] = _balances[_staker].sub(_amount);\n    emit Withdrawn(_staker, _amount);\n  }\n\n  /**\n   * @notice Called when TCAP is burned or liquidated, transfers to the staker the current amount of rewards tokens earned.\n   * @param _staker address\n   * @dev Only vault can call it\n   * @dev Updates rewards on call\n   */\n  function getRewardFromVault(address _staker)\n    public\n    onlyVault\n    nonReentrant\n    updateReward(_staker)\n  {\n    uint256 reward = rewards[_staker];\n    if (reward > 0) {\n      rewards[_staker] = 0;\n      rewardsToken.safeTransfer(_staker, reward);\n      emit RewardPaid(_staker, reward);\n    }\n  }\n\n  /**\n   * @notice Transfers to the caller the current amount of rewards tokens earned.\n   * @dev Updates rewards on call\n   */\n  function getReward() public nonReentrant updateReward(msg.sender) {\n    uint256 reward = rewards[msg.sender];\n    if (reward > 0) {\n      rewards[msg.sender] = 0;\n      rewardsToken.safeTransfer(msg.sender, reward);\n      emit RewardPaid(msg.sender, reward);\n    }\n  }\n}\n"
    },
    "contracts/LiquidityReward.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n/*\n   ____            __   __        __   _\n  / __/__ __ ___  / /_ / /  ___  / /_ (_)__ __\n _\\ \\ / // // _ \\/ __// _ \\/ -_)/ __// / \\ \\ /\n/___/ \\_, //_//_/\\__//_//_/\\__/ \\__//_/ /_\\_\\\n     /___/\n\n* Based on Synthetix Staking Rewards contract\n* Synthetix: StakingRewards.sol\n*\n* Latest source (may be newer): https://github.com/Synthetixio/synthetix/blob/v2.37.0/contracts/StakingRewards.sol\n* Docs: https://docs.synthetix.io/contracts/source/contracts/StakingRewards/\n*/\n\npragma solidity 0.7.5;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/utils/Pausable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\n\ncontract LiquidityReward is Ownable, AccessControl, ReentrancyGuard, Pausable {\n  /// @notice Open Zeppelin libraries\n  using SafeMath for uint256;\n  using SafeERC20 for IERC20;\n\n  /// @notice Address of the reward\n  IERC20 public immutable rewardsToken;\n\n  /// @notice Address of the staking token\n  IERC20 public immutable stakingToken;\n\n  /// @notice Tracks the period where users stop earning rewards\n  uint256 public periodFinish = 0;\n\n  uint256 public rewardRate = 0;\n\n  /// @notice How long the rewards lasts, it updates when more rewards are added\n  uint256 public rewardsDuration = 186 days;\n\n  /// @notice Last time rewards were updated\n  uint256 public lastUpdateTime;\n\n  /// @notice Amount of reward calculated per token stored\n  uint256 public rewardPerTokenStored;\n\n  /// @notice Track the rewards paid to users\n  mapping(address => uint256) public userRewardPerTokenPaid;\n\n  /// @notice Tracks the user rewards\n  mapping(address => uint256) public rewards;\n\n  /// @notice Time were vesting ends\n  uint256 public immutable vestingEnd;\n\n  /// @notice Vesting ratio\n  uint256 public immutable vestingRatio;\n\n  /// @notice tracks vesting amount per user\n  mapping(address => uint256) public vestingAmounts;\n\n  /// @dev Tracks the total supply of staked tokens\n  uint256 private _totalSupply;\n\n  /// @dev Tracks the amount of staked tokens per user\n  mapping(address => uint256) private _balances;\n\n  /// @notice An event emitted when a reward is added\n  event RewardAdded(uint256 reward);\n\n  /// @notice An event emitted when tokens are staked to earn rewards\n  event Staked(address indexed user, uint256 amount);\n\n  /// @notice An event emitted when staked tokens are withdrawn\n  event Withdrawn(address indexed user, uint256 amount);\n\n  /// @notice An event emitted when reward is paid to a user\n  event RewardPaid(address indexed user, uint256 reward);\n\n  /// @notice An event emitted when the rewards duration is updated\n  event RewardsDurationUpdated(uint256 newDuration);\n\n  /// @notice An event emitted when a erc20 token is recovered\n  event Recovered(address token, uint256 amount);\n\n  /**\n   * @notice Constructor\n   * @param _owner address\n   * @param _rewardsToken address\n   * @param _stakingToken uint256\n   * @param _vestingEnd uint256\n   * @param _vestingRatio uint256\n   */\n  constructor(\n    address _owner,\n    address _rewardsToken,\n    address _stakingToken,\n    uint256 _vestingEnd,\n    uint256 _vestingRatio\n  ) {\n    rewardsToken = IERC20(_rewardsToken);\n    stakingToken = IERC20(_stakingToken);\n    vestingEnd = _vestingEnd;\n    vestingRatio = _vestingRatio;\n    _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\n    transferOwnership(_owner);\n  }\n\n  /**\n   * @notice Updates the reward and time on call.\n   * @param _account address\n   */\n  modifier updateReward(address _account) {\n    rewardPerTokenStored = rewardPerToken();\n    lastUpdateTime = lastTimeRewardApplicable();\n\n    if (_account != address(0)) {\n      rewards[_account] = earned(_account);\n      userRewardPerTokenPaid[_account] = rewardPerTokenStored;\n    }\n    _;\n  }\n\n  /// @notice Returns the total amount of staked tokens.\n  function totalSupply() external view returns (uint256) {\n    return _totalSupply;\n  }\n\n  /**\n   * @notice Returns the amount of staked tokens from specific user.\n   * @param _account address\n   */\n  function balanceOf(address _account) external view returns (uint256) {\n    return _balances[_account];\n  }\n\n  function getRewardForDuration() external view returns (uint256) {\n    return rewardRate.mul(rewardsDuration);\n  }\n\n  /**\n   * @notice Transfer staking token to contract\n   * @param _amount uint\n   * @dev updates rewards on call\n   */\n  function stake(uint256 _amount)\n    external\n    nonReentrant\n    whenNotPaused\n    updateReward(msg.sender)\n  {\n    require(_amount > 0, \"LiquidityReward::Stake:Cannot stake 0\");\n    _totalSupply = _totalSupply.add(_amount);\n    _balances[msg.sender] = _balances[msg.sender].add(_amount);\n    stakingToken.safeTransferFrom(msg.sender, address(this), _amount);\n    emit Staked(msg.sender, _amount);\n  }\n\n  /// @notice Removes all stake and transfers all rewards to the staker.\n  function exit() external {\n    withdraw(_balances[msg.sender]);\n    getReward();\n  }\n\n  /// @notice Claims all vesting amount.\n  function claimVest() external nonReentrant {\n    require(\n      block.timestamp >= vestingEnd,\n      \"LiquidityReward::claimVest: not time yet\"\n    );\n    uint256 amount = vestingAmounts[msg.sender];\n    vestingAmounts[msg.sender] = 0;\n    rewardsToken.safeTransfer(msg.sender, amount);\n  }\n\n  /**\n   * @notice Notifies the contract that reward has been added to be given.\n   * @param _reward uint\n   * @dev Only owner  can call it\n   * @dev Increases duration of rewards\n   */\n  function notifyRewardAmount(uint256 _reward)\n    external\n    onlyOwner\n    updateReward(address(0))\n  {\n    if (block.timestamp >= periodFinish) {\n      rewardRate = _reward.div(rewardsDuration);\n    } else {\n      uint256 remaining = periodFinish.sub(block.timestamp);\n      uint256 leftover = remaining.mul(rewardRate);\n      rewardRate = _reward.add(leftover).div(rewardsDuration);\n    }\n\n    // Ensure the provided reward amount is not more than the balance in the contract.\n    // This keeps the reward rate in the right range, preventing overflows due to\n    // very high values of rewardRate in the earned and rewardsPerToken functions;\n    // Reward + leftover must be less than 2^256 / 10^18 to avoid overflow.\n    uint256 balance = rewardsToken.balanceOf(address(this));\n    require(\n      rewardRate <= balance.div(rewardsDuration),\n      \"LiquidityReward::notifyRewardAmount: Provided reward too high\"\n    );\n\n    lastUpdateTime = block.timestamp;\n    periodFinish = block.timestamp.add(rewardsDuration);\n    emit RewardAdded(_reward);\n  }\n\n  /**\n   * @notice  Added to support recovering LP Rewards from other systems such as BAL to be distributed to holders\n   * @param _tokenAddress address\n   * @param _tokenAmount uint\n   * @dev Only owner  can call it\n   */\n  function recoverERC20(address _tokenAddress, uint256 _tokenAmount)\n    external\n    onlyOwner\n  {\n    // Cannot recover the staking token or the rewards token\n    require(\n      _tokenAddress != address(rewardsToken) &&\n        _tokenAddress != address(stakingToken),\n      \"LiquidityReward::recoverERC20: Cannot withdraw the staking or rewards tokens\"\n    );\n    IERC20(_tokenAddress).safeTransfer(owner(), _tokenAmount);\n    emit Recovered(_tokenAddress, _tokenAmount);\n  }\n\n  /**\n   * @notice  Updates the reward duration\n   * @param _rewardsDuration uint\n   * @dev Only owner  can call it\n   * @dev Previous rewards must be complete\n   */\n  function setRewardsDuration(uint256 _rewardsDuration) external onlyOwner {\n    require(\n      block.timestamp > periodFinish,\n      \"LiquidityReward::setRewardsDuration: Previous rewards period must be complete before changing the duration for the new period\"\n    );\n    rewardsDuration = _rewardsDuration;\n    emit RewardsDurationUpdated(rewardsDuration);\n  }\n\n  /// @notice Returns the minimun between current block timestamp or the finish period of rewards.\n  function lastTimeRewardApplicable() public view returns (uint256) {\n    return min(block.timestamp, periodFinish);\n  }\n\n  /// @notice Returns the calculated reward per token deposited.\n  function rewardPerToken() public view returns (uint256) {\n    if (_totalSupply == 0) {\n      return rewardPerTokenStored;\n    }\n\n    return\n      rewardPerTokenStored.add(\n        lastTimeRewardApplicable()\n          .sub(lastUpdateTime)\n          .mul(rewardRate)\n          .mul(1e18)\n          .div(_totalSupply)\n      );\n  }\n\n  /**\n   * @notice Returns the amount of reward tokens a user has earned.\n   * @param _account address\n   */\n  function earned(address _account) public view returns (uint256) {\n    return\n      _balances[_account]\n        .mul(rewardPerToken().sub(userRewardPerTokenPaid[_account]))\n        .div(1e18)\n        .add(rewards[_account]);\n  }\n\n  /**\n   * @notice Returns the minimun between two variables\n   * @param _a uint\n   * @param _b uint\n   */\n  function min(uint256 _a, uint256 _b) public pure returns (uint256) {\n    return _a < _b ? _a : _b;\n  }\n\n  /**\n   * @notice Remove staking token and transfer back to staker\n   * @param _amount uint\n   * @dev updates rewards on call\n   */\n  function withdraw(uint256 _amount)\n    public\n    nonReentrant\n    updateReward(msg.sender)\n  {\n    require(_amount > 0, \"LiquidityReward::withdraw: Cannot withdraw 0\");\n    _totalSupply = _totalSupply.sub(_amount);\n    _balances[msg.sender] = _balances[msg.sender].sub(_amount);\n    stakingToken.safeTransfer(msg.sender, _amount);\n    emit Withdrawn(msg.sender, _amount);\n  }\n\n  /**\n   * @notice Transfers to the caller the current amount of rewards tokens earned.\n   * @dev updates rewards on call\n   * @dev from the total reward a vestingRatio amount is locked into vesting and the rest is transfered\n   * @dev if vesting period has passed transfer all rewards\n   */\n  function getReward() public nonReentrant updateReward(msg.sender) {\n    uint256 reward = rewards[msg.sender];\n    if (reward > 0) {\n      rewards[msg.sender] = 0;\n      if (block.timestamp >= vestingEnd) {\n        rewardsToken.safeTransfer(msg.sender, reward);\n        emit RewardPaid(msg.sender, reward);\n      } else {\n        uint256 vestingReward = (reward.mul(vestingRatio)).div(100);\n        uint256 transferReward = reward.sub(vestingReward);\n        vestingAmounts[msg.sender] = vestingAmounts[msg.sender].add(\n          vestingReward\n        );\n        rewardsToken.safeTransfer(msg.sender, transferReward);\n        emit RewardPaid(msg.sender, transferReward);\n      }\n    }\n  }\n}\n"
    },
    "contracts/IOrchestrator.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.7.5;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/introspection/ERC165Checker.sol\";\nimport \"./IVaultHandler.sol\";\nimport \"./oracles/ChainlinkOracle.sol\";\nimport \"./Proprietor.sol\";\nimport \"./TCAP.sol\";\n\n/**\n * @title TCAP Orchestrator\n * @author Cryptex.finance\n * @notice Orchestrator contract in charge of managing the settings of the vaults, rewards and TCAP token. It acts as the owner of these contracts.\n */\nabstract contract IOrchestrator is Proprietor {\n\t/// @dev Enum which saves the available functions to emergency call.\n\tenum Functions {BURNFEE, LIQUIDATION, PAUSE}\n\n\t/// @notice Address that can set to 0 the fees or pause the vaults in an emergency event\n\taddress public guardian;\n\n\t/** @dev Interface constants*/\n\tbytes4 private constant _INTERFACE_ID_IVAULT = 0x9e75ab0c;\n\tbytes4 private constant _INTERFACE_ID_TCAP = 0xbd115939;\n\tbytes4 private constant _INTERFACE_ID_CHAINLINK_ORACLE = 0x85be402b;\n\n\t/// @dev tracks which vault was emergency called\n\tmapping(IVaultHandler => mapping(Functions => bool)) private emergencyCalled;\n\n\t/// @notice An event emitted when the guardian is updated\n\tevent GuardianSet(address indexed _owner, address guardian);\n\n\t/// @notice An event emitted when a transaction is executed\n\tevent TransactionExecuted(\n\t\taddress indexed target,\n\t\tuint256 value,\n\t\tstring signature,\n\t\tbytes data\n\t);\n\n\t/**\n\t * @notice Constructor\n\t * @param _guardian The guardian address\n\t * @param _owner the owner of the contract\n\t */\n\tconstructor(\n\t\taddress _guardian,\n\t\taddress _owner\n\t) Proprietor(_owner) {\n\t\trequire(\n\t\t\t_guardian != address(0) && _owner != address(0),\n\t\t\t\"IOrchestrator::constructor: address can't be zero\"\n\t\t);\n\t\tguardian = _guardian;\n\t}\n\n\t/// @notice Throws if called by any account other than the guardian\n\tmodifier onlyGuardian() {\n\t\trequire(\n\t\t\tmsg.sender == guardian,\n\t\t\t\"IOrchestrator::onlyGuardian: caller is not the guardian\"\n\t\t);\n\t\t_;\n\t}\n\n\t/**\n\t * @notice Throws if vault is not valid.\n\t * @param _vault address\n\t */\n\tmodifier validVault(IVaultHandler _vault) {\n\t\trequire(\n\t\t\tERC165Checker.supportsInterface(address(_vault), _INTERFACE_ID_IVAULT),\n\t\t\t\"IOrchestrator::validVault: not a valid vault\"\n\t\t);\n\t\t_;\n\t}\n\n\t/**\n\t * @notice Throws if TCAP Token is not valid\n\t * @param _tcap address\n\t */\n\tmodifier validTCAP(TCAP _tcap) {\n\t\trequire(\n\t\t\tERC165Checker.supportsInterface(address(_tcap), _INTERFACE_ID_TCAP),\n\t\t\t\"IOrchestrator::validTCAP: not a valid TCAP ERC20\"\n\t\t);\n\t\t_;\n\t}\n\n\t/**\n\t * @notice Throws if Chainlink Oracle is not valid\n\t * @param _oracle address\n\t */\n\tmodifier validChainlinkOracle(address _oracle) {\n\t\trequire(\n\t\t\tERC165Checker.supportsInterface(\n\t\t\t\t_oracle,\n\t\t\t\t_INTERFACE_ID_CHAINLINK_ORACLE\n\t\t\t),\n\t\t\t\"IOrchestrator::validChainlinkOrchestrator: not a valid Chainlink Oracle\"\n\t\t);\n\t\t_;\n\t}\n\n\t/**\n\t * @notice Sets the guardian of the orchestrator\n\t * @param _guardian address of the guardian\n\t * @dev Only owner can call it\n\t */\n\tfunction setGuardian(address _guardian) external onlyOwner {\n\t\trequire(\n\t\t\t_guardian != address(0),\n\t\t\t\"IOrchestrator::setGuardian: guardian can't be zero\"\n\t\t);\n\t\tguardian = _guardian;\n\t\temit GuardianSet(msg.sender, _guardian);\n\t}\n\n\t/**\n\t * @notice Sets the ratio of a vault\n\t * @param _vault address\n\t * @param _ratio value\n\t * @dev Only owner can call it\n\t */\n\tfunction setRatio(IVaultHandler _vault, uint256 _ratio)\n\texternal\n\tonlyOwner\n\tvalidVault(_vault)\n\t{\n\t\t_vault.setRatio(_ratio);\n\t}\n\n\t/**\n\t * @notice Sets the burn fee of a vault\n\t * @param _vault address\n\t * @param _burnFee value\n\t * @dev Only owner can call it\n\t */\n\tfunction setBurnFee(IVaultHandler _vault, uint256 _burnFee)\n\texternal\n\tonlyOwner\n\tvalidVault(_vault)\n\t{\n\t\t_vault.setBurnFee(_burnFee);\n\t}\n\n\t/**\n\t * @notice Sets the burn fee to 0, only used on a black swan event\n\t * @param _vault address\n\t * @dev Only guardian can call it\n\t * @dev Validates if _vault is valid\n\t */\n\tfunction setEmergencyBurnFee(IVaultHandler _vault)\n\texternal\n\tonlyGuardian\n\tvalidVault(_vault)\n\t{\n\t\trequire(\n\t\t\temergencyCalled[_vault][Functions.BURNFEE] != true,\n\t\t\t\"IOrchestrator::setEmergencyBurnFee: emergency call already used\"\n\t\t);\n\t\temergencyCalled[_vault][Functions.BURNFEE] = true;\n\t\t_vault.setBurnFee(0);\n\t}\n\n\t/**\n\t * @notice Sets the liquidation penalty of a vault\n\t * @param _vault address\n\t * @param _liquidationPenalty value\n\t * @dev Only owner can call it\n\t */\n\tfunction setLiquidationPenalty(\n\t\tIVaultHandler _vault,\n\t\tuint256 _liquidationPenalty\n\t) external onlyOwner validVault(_vault) {\n\t\t_vault.setLiquidationPenalty(_liquidationPenalty);\n\t}\n\n\t/**\n\t * @notice Sets the liquidation penalty of a vault to 0, only used on a black swan event\n\t * @param _vault address\n\t * @dev Only guardian can call it\n\t * @dev Validates if _vault is valid\n\t */\n\tfunction setEmergencyLiquidationPenalty(IVaultHandler _vault)\n\texternal\n\tonlyGuardian\n\tvalidVault(_vault)\n\t{\n\t\trequire(\n\t\t\temergencyCalled[_vault][Functions.LIQUIDATION] != true,\n\t\t\t\"IOrchestrator::setEmergencyLiquidationPenalty: emergency call already used\"\n\t\t);\n\t\temergencyCalled[_vault][Functions.LIQUIDATION] = true;\n\t\t_vault.setLiquidationPenalty(0);\n\t}\n\n\t/**\n\t * @notice Pauses the Vault\n\t * @param _vault address\n\t * @dev Only guardian can call it\n\t * @dev Validates if _vault is valid\n\t */\n\tfunction pauseVault(IVaultHandler _vault)\n\texternal\n\tonlyGuardian\n\tvalidVault(_vault)\n\t{\n\t\trequire(\n\t\t\temergencyCalled[_vault][Functions.PAUSE] != true,\n\t\t\t\"IOrchestrator::pauseVault: emergency call already used\"\n\t\t);\n\t\temergencyCalled[_vault][Functions.PAUSE] = true;\n\t\t_vault.pause();\n\t}\n\n\t/**\n\t * @notice Unpauses the Vault\n\t * @param _vault address\n\t * @dev Only guardian can call it\n\t * @dev Validates if _vault is valid\n\t */\n\tfunction unpauseVault(IVaultHandler _vault)\n\texternal\n\tonlyGuardian\n\tvalidVault(_vault)\n\t{\n\t\t_vault.unpause();\n\t}\n\n\t/**\n\t * @notice Enables or disables the TCAP Cap\n\t * @param _tcap address\n\t * @param _enable bool\n\t * @dev Only owner can call it\n\t * @dev Validates if _tcap is valid\n\t */\n\tfunction enableTCAPCap(TCAP _tcap, bool _enable)\n\texternal\n\tonlyOwner\n\tvalidTCAP(_tcap)\n\t{\n\t\t_tcap.enableCap(_enable);\n\t}\n\n\t/**\n\t * @notice Sets the TCAP maximum minting value\n\t * @param _tcap address\n\t * @param _cap uint value\n\t * @dev Only owner can call it\n\t * @dev Validates if _tcap is valid\n\t */\n\tfunction setTCAPCap(TCAP _tcap, uint256 _cap)\n\texternal\n\tonlyOwner\n\tvalidTCAP(_tcap)\n\t{\n\t\t_tcap.setCap(_cap);\n\t}\n\n\t/**\n\t * @notice Adds Vault to TCAP ERC20\n\t * @param _tcap address\n\t * @param _vault address\n\t * @dev Only owner can call it\n\t * @dev Validates if _tcap is valid\n\t * @dev Validates if _vault is valid\n\t */\n\tfunction addTCAPVault(TCAP _tcap, IVaultHandler _vault)\n\texternal\n\tonlyOwner\n\tvalidTCAP(_tcap)\n\tvalidVault(_vault)\n\t{\n\t\t_tcap.addVaultHandler(address(_vault));\n\t}\n\n\t/**\n\t * @notice Removes Vault to TCAP ERC20\n\t * @param _tcap address\n\t * @param _vault address\n\t * @dev Only owner can call it\n\t * @dev Validates if _tcap is valid\n\t * @dev Validates if _vault is valid\n\t */\n\tfunction removeTCAPVault(TCAP _tcap, IVaultHandler _vault)\n\texternal\n\tonlyOwner\n\tvalidTCAP(_tcap)\n\tvalidVault(_vault)\n\t{\n\t\t_tcap.removeVaultHandler(address(_vault));\n\t}\n\n\t/**\n\t * @notice Allows the owner to execute custom transactions\n\t * @param target address\n\t * @param value uint256\n\t * @param signature string\n\t * @param data bytes\n\t * @dev Only owner can call it\n\t */\n\tfunction executeTransaction(\n\t\taddress target,\n\t\tuint256 value,\n\t\tstring memory signature,\n\t\tbytes memory data\n\t) external payable onlyOwner returns (bytes memory) {\n\t\tbytes memory callData;\n\t\tif (bytes(signature).length == 0) {\n\t\t\tcallData = data;\n\t\t} else {\n\t\t\tcallData = abi.encodePacked(bytes4(keccak256(bytes(signature))), data);\n\t\t}\n\n\t\trequire(\n\t\t\ttarget != address(0),\n\t\t\t\"IOrchestrator::executeTransaction: target can't be zero\"\n\t\t);\n\n\t\t// solium-disable-next-line security/no-call-value\n\t\t(bool success, bytes memory returnData) =\n\t\ttarget.call{value : value}(callData);\n\t\trequire(\n\t\t\tsuccess,\n\t\t\t\"IOrchestrator::executeTransaction: Transaction execution reverted.\"\n\t\t);\n\n\t\temit TransactionExecuted(target, value, signature, data);\n\t\t(target, value, signature, data);\n\n\t\treturn returnData;\n\t}\n\n\t/**\n\t * @notice Retrieves the eth stuck on the orchestrator\n\t * @param _to address\n\t * @dev Only owner can call it\n\t */\n\tfunction retrieveETH(address _to) external onlyOwner {\n\t\trequire(\n\t\t\t_to != address(0),\n\t\t\t\"IOrchestrator::retrieveETH: address can't be zero\"\n\t\t);\n\t\tuint256 amount = address(this).balance;\n\t\tpayable(_to).transfer(amount);\n\t}\n\n\t/// @notice Allows the contract to receive ETH\n\treceive() external payable {}\n}\n"
    },
    "contracts/Proprietor.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.7.5;\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Proprietor {\n    address public owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor (address _owner) {\n        require(_owner != address(0), \"Proprietor::constructor: address can't be zero\");\n        owner = _owner;\n        emit OwnershipTransferred(address(0), owner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() virtual {\n        require(owner == msg.sender, \"Proprietor: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(owner, address(0));\n        owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Proprietor: new owner is the zero address\");\n        emit OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n    }\n}\n"
    },
    "contracts/polygon/PolygonOrchestrator.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.7.5;\n\nimport \"../IOrchestrator.sol\";\nimport \"./PolygonL2Messenger.sol\";\n\n/**\n * @title TCAP Polygon Orchestrator\n * @author Cryptex.finance\n * @notice Orchestrator contract in charge of managing the settings of the vaults, rewards and TCAP token. It acts as the owner of these contracts.\n */\ncontract PolygonOrchestrator is IOrchestrator {\n\t/// @notice Address of the polygonMessenger contract.\n\tPolygonL2Messenger public polygonMessenger;\n\n\t/// @notice event emitted when polygonMessenger is updated.\n\tevent UpdatedPolygonMessenger(\n\t\tPolygonL2Messenger oldPolygonMessenger,\n\t\tPolygonL2Messenger newPolygonMessenger\n\t);\n\n\t// @notice Throws if called by an account different from the owner\n\t// @dev call needs to come from polygonMessenger\n\tmodifier onlyOwner() override {\n\t\trequire(\n\t\t\tmsg.sender == address(polygonMessenger)\n\t\t\t&& polygonMessenger.xDomainMessageSender() == owner\n\t\t);\n\t\t_;\n\t}\n\n\t/**\n\t * @notice Constructor\n\t * @param _guardian The guardian address\n\t**/\n\tconstructor(\n\t\taddress _guardian,\n\t\taddress _owner,\n\t\taddress _polygonMessenger\n\t) IOrchestrator(_guardian, _owner){\n\t\trequire(\n\t\t\t_polygonMessenger != address(0),\n\t\t\t\"PolygonOrchestrator::constructor: address can't be zero\"\n\t\t);\n\t\tpolygonMessenger = PolygonL2Messenger(_polygonMessenger);\n\t}\n\n\t/**\n\t * @notice updates the polygonMessenger instance\n\t * @param newPolygonMessenger address of the new PolygonL2Messenger contract\n\t**/\n\tfunction updatePolygonMessenger(address newPolygonMessenger) external onlyOwner {\n\t\trequire(\n\t\t\tnewPolygonMessenger != address (0),\n\t\t\t\"PolygonOrchestrator: new owner is the zero address\"\n\t\t);\n\t\temit UpdatedPolygonMessenger(polygonMessenger, PolygonL2Messenger(newPolygonMessenger));\n\t\tpolygonMessenger = PolygonL2Messenger(newPolygonMessenger);\n\t}\n}\n"
    },
    "contracts/polygon/PolygonL2Messenger.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.7.5;\n\nimport { Context } from \"@openzeppelin/contracts/GSN/Context.sol\";\nimport { ReentrancyGuard } from \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\n\n// IFxMessageProcessor represents interface to process message\ninterface IFxMessageProcessor {\n    function processMessageFromRoot(\n\t\t\tuint256 stateId,\n\t\t\taddress rootMessageSender,\n\t\t\tbytes calldata data\n\t\t) external;\n}\n\ncontract PolygonL2Messenger is\n\tIFxMessageProcessor,\n\tReentrancyGuard {\n\t/// @notice Address of the contract that is allowed to make calls to this contract.\n\taddress public fxRootSender;\n\n\t/// @notice Address of the polygon FxChild contract.\n\taddress public fxChild;\n\n\t/// @notice An event emitted when the fxRootSender is updated\n\tevent FxRootSenderUpdate(address previousFxRootSender, address newFxRootSender);\n\n\t/// @notice An event emitted when the fxChild is updated\n  event FxChildUpdate(address previousFxChild, address newFxChild);\n\n\t// The default x-domain message sender being set to a non-zero value makes\n\t// deployment a bit more expensive, but in exchange the refund on every call to\n\t// `processMessageFromRoot` by the L1 and L2 messengers will be higher.\n\taddress internal constant DEFAULT_XDOMAIN_SENDER = 0x000000000000000000000000000000000000dEaD;\n\n\t/// @notice temporarily stores the cross domain sender address when processMessageFromRoot is called\n\taddress public xDomainMsgSender = DEFAULT_XDOMAIN_SENDER;\n\n\t/**\n\t * @notice Throws if called by any account other than this contract.\n\t**/\n\tmodifier onlyThis() {\n    require(msg.sender == address(this), 'UNAUTHORIZED_ORIGIN_ONLY_THIS');\n    _;\n  }\n\n\t/**\n   * @notice Throws if called by any account other than the fxChild.\n  **/\n\tmodifier onlyFxChild() {\n    require(msg.sender == fxChild, 'UNAUTHORIZED_CHILD_ORIGIN');\n    _;\n  }\n\n\tconstructor(address _fxRootSender, address _fxChild) {\n\t\tfxRootSender = _fxRootSender;\n\t\tfxChild = _fxChild;\n\t}\n\n\t/// @inheritdoc IFxMessageProcessor\n\tfunction processMessageFromRoot(\n\t\tuint256, /* stateId */\n\t\taddress rootMessageSender,\n\t\tbytes calldata data\n\t) override\n\t\tnonReentrant\n\t\tonlyFxChild\n\t\texternal {\n\t\trequire(\n\t\t\trootMessageSender == fxRootSender,\n\t\t\t\"PolygonL2Messenger::processMessageFromRoot:UNAUTHORIZED_ROOT_ORIGIN\"\n\t\t);\n\n\t\t(address target,  bytes memory callData) = abi.decode(data, (address, bytes));\n\n\t\txDomainMsgSender = rootMessageSender;\n\t\t(bool success, ) = target.call(callData);\n\t\txDomainMsgSender = DEFAULT_XDOMAIN_SENDER;\n\n\t\trequire(\n      success,\n      \"PolygonL2Messenger::processMessageFromRoot: Message execution reverted.\"\n    );\n\t}\n\n\t/**\n   * @dev Get the xDomainMsgSender address\n   * @return xDomainMsgSender the address that sent the cross-domain transaction\n  **/\n\tfunction xDomainMessageSender()\n\t\tpublic\n\t\tview\n\t\treturns (\n\t\t\t\taddress\n\t\t) {\n\t\t\trequire(xDomainMsgSender != DEFAULT_XDOMAIN_SENDER, \"xDomainMessageSender is not set\");\n\t\t\treturn xDomainMsgSender;\n\t}\n\n\t/**\n   * @dev Update the expected address of contract originating from a cross-chain transaction\n   * @param _fxRootSender contract originating a cross-chain transaction- likely the cryptex timelock\n  **/\n  function updateFxRootSender(address _fxRootSender) external onlyThis {\n\t\trequire(_fxRootSender != address(0), \"PolygonL2Messenger: _fxRootSender is the zero address\");\n\t\temit FxRootSenderUpdate(fxRootSender, _fxRootSender);\n\t\tfxRootSender = _fxRootSender;\n  }\n\n  /**\n   * @dev Update the address of the FxChild contract\n   * @param _fxChild the address of the contract used to foward cross-chain transactions on Polygon\n  **/\n  function updateFxChild(address _fxChild) external onlyThis {\n\t\trequire(_fxChild != address(0), \"PolygonL2Messenger: _fxChild is the zero address\");\n\t\temit FxChildUpdate(fxChild, _fxChild);\n\t\tfxChild = _fxChild;\n  }\n}\n"
    },
    "contracts/polygon/PolygonTreasury.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.7.5;\n\nimport \"../ITreasury.sol\";\nimport \"./PolygonL2Messenger.sol\";\n\n/**\n * @title TCAP Polygon Treasury\n * @author Cryptex.finance\n * @notice This contract will hold the assets generated by the polygon network.\n */\ncontract PolygonTreasury is ITreasury {\n\n\t/// @notice Address of the polygonMessenger contract.\n\tPolygonL2Messenger public polygonMessenger;\n\n\t/// @notice event emitted when polygonMessenger is updated.\n\tevent UpdatedPolygonMessenger(\n\t\tPolygonL2Messenger oldPolygonMessenger,\n\t\tPolygonL2Messenger newPolygonMessenger\n\t);\n\n\t/**\n\t * @notice Constructor\n\t * @param _owner the owner of the contract\n\t * @param _polygonMessenger address of the polygon PolygonL2Messenger\n\t */\n\tconstructor(\n\t\taddress _owner,\n\t\taddress _polygonMessenger\n\t) ITreasury(_owner) {\n\t\trequire(\n\t\t\t_polygonMessenger != address(0),\n\t\t\t\"PolygonTreasury::constructor: address can't be zero\"\n\t\t);\n\t\tpolygonMessenger = PolygonL2Messenger(_polygonMessenger);\n\t}\n\n\t// @notice Throws if called by an account different from the owner\n\t// @dev call needs to come from PolygonL2Messenger\n\tmodifier onlyOwner() override {\n\t\trequire(\n\t\t\tmsg.sender == address(polygonMessenger)\n\t\t\t&& polygonMessenger.xDomainMessageSender() == owner,\n\t\t\t\"PolygonTreasury: caller is not the owner\"\n\t\t);\n\t\t_;\n\t}\n\n\t/**\n\t * @notice updates the polygonMessenger instance\n\t * @param newPolygonMessenger address of the new PolygonL2Messenger contract\n\t**/\n\tfunction updatePolygonMessenger(address newPolygonMessenger) external onlyOwner {\n\t\trequire(\n\t\t\tnewPolygonMessenger != address (0),\n\t\t\t\"PolygonTreasury: new owner is the zero address\"\n\t\t);\n\t\temit UpdatedPolygonMessenger(polygonMessenger, PolygonL2Messenger(newPolygonMessenger));\n\t\tpolygonMessenger = PolygonL2Messenger(newPolygonMessenger);\n\t}\n\n}\n"
    },
    "contracts/ITreasury.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.7.5;\n\nimport \"./Proprietor.sol\";\n\n/**\n * @title TCAP Treasury\n * @author Cryptex.finance\n * @notice This contract will hold the assets generated on L2 networks.\n */\ncontract ITreasury is Proprietor {\n\t/// @notice An event emitted when a transaction is executed\n\tevent TransactionExecuted(\n\t\taddress indexed target,\n\t\tuint256 value,\n\t\tstring signature,\n\t\tbytes data\n\t);\n\n\n\t/**\n\t * @notice Constructor\n\t * @param _owner the owner of the contract\n\t */\n\tconstructor(address _owner) Proprietor(_owner) {}\n\n\t/**\n\t * @notice Allows the owner to execute custom transactions\n\t * @param target address\n\t * @param value uint256\n\t * @param signature string\n\t * @param data bytes\n\t * @dev Only owner can call it\n\t */\n\tfunction executeTransaction(\n\t\taddress target,\n\t\tuint256 value,\n\t\tstring memory signature,\n\t\tbytes memory data\n\t) external payable onlyOwner returns (bytes memory) {\n\t\tbytes memory callData;\n\t\tif (bytes(signature).length == 0) {\n\t\t\tcallData = data;\n\t\t} else {\n\t\t\tcallData = abi.encodePacked(bytes4(keccak256(bytes(signature))), data);\n\t\t}\n\n\t\trequire(\n\t\t\ttarget != address(0),\n\t\t\t\"ITreasury::executeTransaction: target can't be zero\"\n\t\t);\n\n\t\t// solium-disable-next-line security/no-call-value\n\t\t(bool success, bytes memory returnData) =\n\t\ttarget.call{value : value}(callData);\n\t\trequire(\n\t\t\tsuccess,\n\t\t\t\"ITreasury::executeTransaction: Transaction execution reverted.\"\n\t\t);\n\n\t\temit TransactionExecuted(target, value, signature, data);\n\t\t(target, value, signature, data);\n\n\t\treturn returnData;\n\t}\n\n\t/**\n\t * @notice Retrieves the eth stuck on the treasury\n\t * @param _to address\n\t * @dev Only owner can call it\n\t */\n\tfunction retrieveETH(address _to) external onlyOwner {\n\t\trequire(\n\t\t\t_to != address(0),\n\t\t\t\"ITreasury::retrieveETH: address can't be zero\"\n\t\t);\n\t\tuint256 amount = address(this).balance;\n\t\tpayable(_to).transfer(amount);\n\t}\n\n\t/// @notice Allows the contract to receive ETH\n\treceive() external payable {}\n}\n"
    },
    "contracts/optimism/OptimisticTreasury.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.7.5;\n\nimport \"../ITreasury.sol\";\nimport \"./iOVM_CrossDomainMessenger.sol\";\n\n/**\n * @title TCAP Optimistic Treasury\n * @author Cryptex.finance\n * @notice This contract will hold the assets generated by the optimism network.\n */\ncontract OptimisticTreasury is ITreasury {\n\n\t/// @notice Address of the optimistic ovmL2CrossDomainMessenger contract.\n\tiOVM_CrossDomainMessenger public immutable ovmL2CrossDomainMessenger;\n\n\t/**\n\t * @notice Constructor\n\t * @param _owner the owner of the contract\n\t * @param _ovmL2CrossDomainMessenger address of the optimism ovmL2CrossDomainMessenger\n\t */\n\tconstructor(\n\t\taddress _owner,\n\t\taddress _ovmL2CrossDomainMessenger\n\t) ITreasury(_owner) {\n\t\trequire(\n\t\t\t_ovmL2CrossDomainMessenger != address(0),\n\t\t\t\"OptimisticTreasury::constructor: address can't be zero\"\n\t\t);\n\t\tovmL2CrossDomainMessenger = iOVM_CrossDomainMessenger(_ovmL2CrossDomainMessenger);\n\t}\n\n\t// @notice Throws if called by an account different from the owner\n\t// @dev call needs to come from ovmL2CrossDomainMessenger\n\tmodifier onlyOwner() override {\n\t\trequire(\n\t\t\tmsg.sender == address(ovmL2CrossDomainMessenger)\n\t\t\t&& ovmL2CrossDomainMessenger.xDomainMessageSender() == owner, \"OptimisticTreasury: caller is not the owner\"\n\t\t);\n\t\t_;\n\t}\n}\n"
    },
    "contracts/optimism/iOVM_CrossDomainMessenger.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.7.5;\npragma experimental ABIEncoderV2;\n\n/**\n * @title iOVM_CrossDomainMessenger\n */\ninterface iOVM_CrossDomainMessenger {\n\n\t/**********\n\t * Events *\n\t **********/\n\n\tevent SentMessage(bytes message);\n\tevent RelayedMessage(bytes32 msgHash);\n\tevent FailedRelayedMessage(bytes32 msgHash);\n\n\n\t/*************\n\t * Variables *\n\t *************/\n\n\tfunction xDomainMessageSender() external view returns (address);\n\n\n\t/********************\n\t * Public Functions *\n\t ********************/\n\n\t/**\n\t * Sends a cross domain message to the target messenger.\n\t * @param _target Target contract address.\n\t * @param _message Message to send to the target.\n\t * @param _gasLimit Gas limit for the provided message.\n\t */\n\tfunction sendMessage(\n\t\taddress _target,\n\t\tbytes calldata _message,\n\t\tuint32 _gasLimit\n\t) external;\n}\n"
    },
    "contracts/optimism/OptimisticOrchestrator.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.7.5;\n\nimport \"../IOrchestrator.sol\";\nimport \"./iOVM_CrossDomainMessenger.sol\";\n\n/**\n * @title TCAP Optimistic Orchestrator\n * @author Cryptex.finance\n * @notice Orchestrator contract in charge of managing the settings of the vaults, rewards and TCAP token. It acts as the owner of these contracts.\n */\ncontract OptimisticOrchestrator is IOrchestrator {\n\t/// @notice Address of the optimistic ovmL2CrossDomainMessenger contract.\n\tiOVM_CrossDomainMessenger public immutable ovmL2CrossDomainMessenger;\n\n\t/**\n\t * @notice Constructor\n\t * @param _guardian The guardian address\n\t * @param _owner the owner of the contract\n\t * @param _ovmL2CrossDomainMessenger address of the optimism ovmL2CrossDomainMessenger\n\t */\n\tconstructor(\n\t\taddress _guardian,\n\t\taddress _owner,\n\t\taddress _ovmL2CrossDomainMessenger\n\t) IOrchestrator(_guardian, _owner) {\n\t\trequire(\n\t\t\t_ovmL2CrossDomainMessenger != address(0),\n\t\t\t\"OptimisticOrchestrator::constructor: address can't be zero\"\n\t\t);\n\t\tovmL2CrossDomainMessenger = iOVM_CrossDomainMessenger(_ovmL2CrossDomainMessenger);\n\t}\n\n\t// @notice Throws if called by an account different from the owner\n\t// @dev call needs to come from ovmL2CrossDomainMessenger\n\tmodifier onlyOwner() override {\n\t\trequire(\n\t\t\tmsg.sender == address(ovmL2CrossDomainMessenger)\n\t\t\t&& ovmL2CrossDomainMessenger.xDomainMessageSender() == owner,\n\t\t\t\"OptimisticOrchestrator: caller is not the owner\"\n\t\t);\n\t\t_;\n\t}\n}\n"
    },
    "contracts/optimism/iOVM_L2CrossDomainMessenger.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.7.5;\npragma experimental ABIEncoderV2;\n\n/* Interface Imports */\nimport \"./iOVM_CrossDomainMessenger.sol\";\n\n/**\n * @title iOVM_L2CrossDomainMessenger\n */\ninterface iOVM_L2CrossDomainMessenger is iOVM_CrossDomainMessenger {\n\n\t/********************\n\t * Public Functions *\n\t ********************/\n\n\t/**\n\t * Relays a cross domain message to a contract.\n\t * @param _target Target contract address.\n\t * @param _sender Message sender address.\n\t * @param _message Message to send to the target.\n\t * @param _messageNonce Nonce for the provided message.\n\t */\n\tfunction relayMessage(\n\t\taddress _target,\n\t\taddress _sender,\n\t\tbytes memory _message,\n\t\tuint256 _messageNonce\n\t) external;\n}\n"
    },
    "contracts/ETHVaultHandler.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.7.5;\n\nimport \"./IVaultHandler.sol\";\nimport \"./Orchestrator.sol\";\nimport \"./IWETH.sol\";\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\n\n/**\n * @title ETH TCAP Vault\n * @author Cryptex.finance\n * @notice Contract in charge of handling the TCAP Vault and stake using a ETH and WETH\n */\ncontract ETHVaultHandler is IVaultHandler {\n  /// @notice Open Zeppelin libraries\n  using SafeMath for uint256;\n\n  /**\n   * @notice Constructor\n   * @param _orchestrator address\n   * @param _divisor uint256\n   * @param _ratio uint256\n   * @param _burnFee uint256\n   * @param _liquidationPenalty uint256\n   * @param _tcapOracle address\n   * @param _tcapAddress address\n   * @param _collateralAddress address\n   * @param _collateralOracle address\n   * @param _ethOracle address\n   * @param _rewardHandler address\n   * @param _treasury address\n   */\n  constructor(\n    Orchestrator _orchestrator,\n    uint256 _divisor,\n    uint256 _ratio,\n    uint256 _burnFee,\n    uint256 _liquidationPenalty,\n    address _tcapOracle,\n    TCAP _tcapAddress,\n    address _collateralAddress,\n    address _collateralOracle,\n    address _ethOracle,\n    address _rewardHandler,\n    address _treasury\n  )\n    IVaultHandler(\n      _orchestrator,\n      _divisor,\n      _ratio,\n      _burnFee,\n      _liquidationPenalty,\n      _tcapOracle,\n      _tcapAddress,\n      _collateralAddress,\n      _collateralOracle,\n      _ethOracle,\n      _rewardHandler,\n      _treasury\n    )\n  {}\n\n  /**\n   * @notice only accept ETH via fallback from the WETH contract\n   */\n  receive() external payable {\n    assert(msg.sender == address(collateralContract));\n  }\n\n  /**\n   * @notice Adds collateral to vault using ETH\n   * @dev value should be higher than 0\n   * @dev ETH is turned into WETH\n   */\n  function addCollateralETH()\n    external\n    payable\n    nonReentrant\n    vaultExists\n    whenNotPaused\n  {\n    require(\n      msg.value > 0,\n      \"ETHVaultHandler::addCollateralETH: value can't be 0\"\n    );\n    IWETH(address(collateralContract)).deposit{value: msg.value}();\n    Vault storage vault = vaults[userToVault[msg.sender]];\n    vault.Collateral = vault.Collateral.add(msg.value);\n    emit CollateralAdded(msg.sender, vault.Id, msg.value);\n  }\n\n  /**\n   * @notice Removes not used collateral from vault\n   * @param _amount of collateral to remove\n   * @dev _amount should be higher than 0\n   * @dev WETH is turned into ETH\n   */\n  function removeCollateralETH(uint256 _amount)\n    external\n    nonReentrant\n    vaultExists\n    whenNotPaused\n  {\n    require(\n      _amount > 0,\n      \"ETHVaultHandler::removeCollateralETH: value can't be 0\"\n    );\n    Vault storage vault = vaults[userToVault[msg.sender]];\n    uint256 currentRatio = getVaultRatio(vault.Id);\n    require(\n      vault.Collateral >= _amount,\n      \"ETHVaultHandler::removeCollateralETH: retrieve amount higher than collateral\"\n    );\n    vault.Collateral = vault.Collateral.sub(_amount);\n    if (currentRatio != 0) {\n      require(\n        getVaultRatio(vault.Id) >= ratio,\n        \"ETHVaultHandler::removeCollateralETH: collateral below min required ratio\"\n      );\n    }\n\n    IWETH(address(collateralContract)).withdraw(_amount);\n    safeTransferETH(msg.sender, _amount);\n    emit CollateralRemoved(msg.sender, vault.Id, _amount);\n  }\n}\n"
    },
    "contracts/IWETH.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.7.5;\n\ninterface IWETH {\n\tfunction deposit() external payable;\n\n\tfunction withdraw(uint256) external;\n\n\tfunction totalSupply() external view returns (uint256);\n\n\t/**\n\t * @dev Returns the amount of tokens owned by `account`.\n\t */\n\tfunction balanceOf(address account) external view returns (uint256);\n\n\t/**\n\t * @dev Moves `amount` tokens from the caller's account to `recipient`.\n\t *\n\t * Returns a boolean value indicating whether the operation succeeded.\n\t *\n\t * Emits a {Transfer} event.\n\t */\n\tfunction transfer(address recipient, uint256 amount) external returns (bool);\n\n\t/**\n\t * @dev Returns the remaining number of tokens that `spender` will be\n\t * allowed to spend on behalf of `owner` through {transferFrom}. This is\n\t * zero by default.\n\t *\n\t * This value changes when {approve} or {transferFrom} are called.\n\t */\n\tfunction allowance(address owner, address spender)\n\texternal\n\tview\n\treturns (uint256);\n\n\t/**\n\t * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n\t *\n\t * Returns a boolean value indicating whether the operation succeeded.\n\t *\n\t * IMPORTANT: Beware that changing an allowance with this method brings the risk\n\t * that someone may use both the old and the new allowance by unfortunate\n\t * transaction ordering. One possible solution to mitigate this race\n\t * condition is to first reduce the spender's allowance to 0 and set the\n\t * desired value afterwards:\n\t * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n\t *\n\t * Emits an {Approval} event.\n\t */\n\tfunction approve(address spender, uint256 amount) external returns (bool);\n\n\t/**\n\t * @dev Moves `amount` tokens from `sender` to `recipient` using the\n\t * allowance mechanism. `amount` is then deducted from the caller's\n\t * allowance.\n\t *\n\t * Returns a boolean value indicating whether the operation succeeded.\n\t *\n\t * Emits a {Transfer} event.\n\t */\n\tfunction transferFrom(\n\t\taddress sender,\n\t\taddress recipient,\n\t\tuint256 amount\n\t) external returns (bool);\n\n\t/**\n\t * @dev Emitted when `value` tokens are moved from one account (`from`) to\n\t * another (`to`).\n\t *\n\t * Note that `value` may be zero.\n\t */\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\n\n\t/**\n\t * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n\t * a call to {approve}. `value` is the new allowance.\n\t */\n\tevent Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "contracts/governance/Timelock.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.7.5;\n\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/introspection/IERC165.sol\";\n\ncontract Timelock is IERC165 {\n  using SafeMath for uint256;\n\n  event NewAdmin(address indexed newAdmin);\n  event NewPendingAdmin(address indexed newPendingAdmin);\n  event NewDelay(uint256 indexed newDelay);\n  event CancelTransaction(\n    bytes32 indexed txHash,\n    address indexed target,\n    uint256 value,\n    string signature,\n    bytes data,\n    uint256 eta\n  );\n  event ExecuteTransaction(\n    bytes32 indexed txHash,\n    address indexed target,\n    uint256 value,\n    string signature,\n    bytes data,\n    uint256 eta\n  );\n  event QueueTransaction(\n    bytes32 indexed txHash,\n    address indexed target,\n    uint256 value,\n    string signature,\n    bytes data,\n    uint256 eta\n  );\n\n  uint256 public constant GRACE_PERIOD = 14 days;\n  uint256 public constant MINIMUM_DELAY = 2 days;\n  uint256 public constant MAXIMUM_DELAY = 30 days;\n\n  address public admin;\n  address public pendingAdmin;\n  uint256 public delay;\n\n  /**\n   * @dev the computed interface ID according to ERC-165. The interface ID is a XOR of interface method selectors.\n   * queueTransaction.selector ^\n   * cancelTransaction.selector ^\n   * executeTransaction.selector  =>  0x6b5cc770\n   */\n  bytes4 private constant _INTERFACE_ID_TIMELOCK = 0x6b5cc770;\n\n  /// @dev bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\n  bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\n\n  mapping(bytes32 => bool) public queuedTransactions;\n\n  constructor(address admin_, uint256 delay_) {\n    require(\n      delay_ >= MINIMUM_DELAY,\n      \"Timelock::constructor: Delay must exceed minimum delay.\"\n    );\n    require(\n      delay_ <= MAXIMUM_DELAY,\n      \"Timelock::setDelay: Delay must not exceed maximum delay.\"\n    );\n\n    admin = admin_;\n    delay = delay_;\n  }\n\n  receive() external payable {}\n\n  function setDelay(uint256 delay_) public {\n    require(\n      msg.sender == address(this),\n      \"Timelock::setDelay: Call must come from Timelock.\"\n    );\n    require(\n      delay_ >= MINIMUM_DELAY,\n      \"Timelock::setDelay: Delay must exceed minimum delay.\"\n    );\n    require(\n      delay_ <= MAXIMUM_DELAY,\n      \"Timelock::setDelay: Delay must not exceed maximum delay.\"\n    );\n    delay = delay_;\n\n    emit NewDelay(delay);\n  }\n\n  /**\n   * @notice ERC165 Standard for support of interfaces\n   * @param _interfaceId bytes of interface\n   * @return bool\n   */\n  function supportsInterface(bytes4 _interfaceId)\n    external\n    pure\n    override\n    returns (bool)\n  {\n    return (_interfaceId == _INTERFACE_ID_TIMELOCK ||\n      _interfaceId == _INTERFACE_ID_ERC165);\n  }\n\n  function acceptAdmin() public {\n    require(\n      msg.sender == pendingAdmin,\n      \"Timelock::acceptAdmin: Call must come from pendingAdmin.\"\n    );\n    admin = msg.sender;\n    pendingAdmin = address(0);\n\n    emit NewAdmin(admin);\n  }\n\n  function setPendingAdmin(address pendingAdmin_) public {\n    require(\n      msg.sender == address(this),\n      \"Timelock::setPendingAdmin: Call must come from Timelock.\"\n    );\n    pendingAdmin = pendingAdmin_;\n\n    emit NewPendingAdmin(pendingAdmin);\n  }\n\n  function queueTransaction(\n    address target,\n    uint256 value,\n    string memory signature,\n    bytes memory data,\n    uint256 eta\n  ) public returns (bytes32) {\n    require(\n      msg.sender == admin,\n      \"Timelock::queueTransaction: Call must come from admin.\"\n    );\n    require(\n      eta >= getBlockTimestamp().add(delay),\n      \"Timelock::queueTransaction: Estimated execution block must satisfy delay.\"\n    );\n\n    bytes32 txHash = keccak256(abi.encode(target, value, signature, data, eta));\n    queuedTransactions[txHash] = true;\n\n    emit QueueTransaction(txHash, target, value, signature, data, eta);\n    return txHash;\n  }\n\n  function cancelTransaction(\n    address target,\n    uint256 value,\n    string memory signature,\n    bytes memory data,\n    uint256 eta\n  ) public {\n    require(\n      msg.sender == admin,\n      \"Timelock::cancelTransaction: Call must come from admin.\"\n    );\n\n    bytes32 txHash = keccak256(abi.encode(target, value, signature, data, eta));\n    queuedTransactions[txHash] = false;\n\n    emit CancelTransaction(txHash, target, value, signature, data, eta);\n  }\n\n  function executeTransaction(\n    address target,\n    uint256 value,\n    string memory signature,\n    bytes memory data,\n    uint256 eta\n  ) public payable returns (bytes memory) {\n    require(\n      msg.sender == admin,\n      \"Timelock::executeTransaction: Call must come from admin.\"\n    );\n\n    bytes32 txHash = keccak256(abi.encode(target, value, signature, data, eta));\n    require(\n      queuedTransactions[txHash],\n      \"Timelock::executeTransaction: Transaction hasn't been queued.\"\n    );\n    require(\n      getBlockTimestamp() >= eta,\n      \"Timelock::executeTransaction: Transaction hasn't surpassed time lock.\"\n    );\n    require(\n      getBlockTimestamp() <= eta.add(GRACE_PERIOD),\n      \"Timelock::executeTransaction: Transaction is stale.\"\n    );\n\n    queuedTransactions[txHash] = false;\n\n    bytes memory callData;\n\n    if (bytes(signature).length == 0) {\n      callData = data;\n    } else {\n      callData = abi.encodePacked(bytes4(keccak256(bytes(signature))), data);\n    }\n\n    // solium-disable-next-line security/no-call-value\n    (bool success, bytes memory returnData) =\n      target.call{value: value}(callData);\n    require(\n      success,\n      \"Timelock::executeTransaction: Transaction execution reverted.\"\n    );\n\n    emit ExecuteTransaction(txHash, target, value, signature, data, eta);\n\n    return returnData;\n  }\n\n  function getBlockTimestamp() internal view returns (uint256) {\n    // solium-disable-next-line security/no-block-members\n    return block.timestamp;\n  }\n}\n"
    },
    "contracts/mocks/StateSender.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.7.5;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\n\ninterface IStateReceiver {\n    function onStateReceive(uint256 stateId, bytes calldata data) external;\n}\n\ncontract StateSender is Ownable {\n    using SafeMath for uint256;\n\n    uint256 public counter;\n    mapping(address => address) public registrations;\n\n    event NewRegistration(\n        address indexed user,\n        address indexed sender,\n        address indexed receiver\n    );\n    event RegistrationUpdated(\n        address indexed user,\n        address indexed sender,\n        address indexed receiver\n    );\n    event StateSynced(\n        uint256 indexed id,\n        address indexed contractAddress,\n        bytes data\n    );\n\n    modifier onlyRegistered(address receiver) {\n        require(registrations[receiver] == msg.sender, \"Invalid sender\");\n        _;\n    }\n\n    function syncState(address receiver, bytes calldata data)\n        external\n        onlyRegistered(receiver)\n    {\n        counter = counter.add(1);\n//\t\t\tThe call below is mocked to make a direct call to an L2 contract\n        IStateReceiver(receiver).onStateReceive(counter, data);\n    }\n\n    // register new contract for state sync\n    function register(address sender, address receiver) public {\n        require(\n            msg.sender == owner() || registrations[receiver] == msg.sender,\n            \"StateSender.register: Not authorized to register\"\n        );\n        if (registrations[receiver] == address(0)) {\n            emit NewRegistration(msg.sender, sender, receiver);\n        } else {\n            emit RegistrationUpdated(msg.sender, sender, receiver);\n        }\n\t\t\t\tregistrations[receiver] = sender;\n    }\n}\n"
    },
    "contracts/mocks/WBTC.sol": {
      "content": "// SPDX-License-Identifier: MIT\n/** @notice this contract is for tests only */\n\npragma solidity 0.7.5;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\ncontract WBTC is ERC20 {\n  constructor() ERC20(\"Mockup WBTC\", \"mWBTC\") {\n    _setupDecimals(8);\n  }\n\n  function mint(address _account, uint256 _amount) public {\n    _mint(_account, _amount);\n  }\n\n  function burn(address _account, uint256 _amount) public {\n    _burn(_account, _amount);\n  }\n}\n"
    },
    "contracts/mocks/LINK.sol": {
      "content": "// SPDX-License-Identifier: MIT\n/** @notice this contract is for tests only */\n\npragma solidity 0.7.5;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\ncontract LINK is ERC20 {\n  constructor() ERC20(\"Mockup LINK\", \"mLINK\") {}\n\n  function mint(address _account, uint256 _amount) public {\n    _mint(_account, _amount);\n  }\n\n  function burn(address _account, uint256 _amount) public {\n    _burn(_account, _amount);\n  }\n}\n"
    },
    "contracts/mocks/DAI.sol": {
      "content": "// SPDX-License-Identifier: MIT\n/** @notice this contract is for tests only */\n\npragma solidity 0.7.5;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\ncontract DAI is ERC20 {\n\tconstructor() ERC20(\"Mockup DAI\", \"mDAI\") {}\n\n\tfunction mint(address _account, uint256 _amount) public {\n\t\t_mint(_account, _amount);\n\t}\n\n\tfunction burn(address _account, uint256 _amount) public {\n\t\t_burn(_account, _amount);\n\t}\n}\n"
    },
    "contracts/mocks/AAVE.sol": {
      "content": "// SPDX-License-Identifier: MIT\n/** @notice this contract is for tests only */\n\npragma solidity 0.7.5;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\ncontract AAVE is ERC20 {\n  constructor() ERC20(\"Mockup AAVE\", \"mAAVE\") {}\n\n  function mint(address _account, uint256 _amount) public {\n    _mint(_account, _amount);\n  }\n\n  function burn(address _account, uint256 _amount) public {\n    _burn(_account, _amount);\n  }\n}\n"
    },
    "contracts/mocks/CrossChainMsgTester.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.7.5;\n\nimport \"../polygon/PolygonL2Messenger.sol\";\n\ncontract PolygonMsgTester {\n\tPolygonL2Messenger public immutable polygonMessenger;\n\tstring public message;\n\taddress public owner;\n\n\tmodifier onlyOwner() {\n\t\trequire(\n\t\t\tmsg.sender == address(polygonMessenger)\n\t\t\t&& polygonMessenger.xDomainMessageSender() == owner,\n\t\t\t\"caller is not the owner\"\n\t\t);\n\t\t_;\n\t}\n\n\tconstructor(address _owner, address _polygonMessenger) {\n\t\trequire(\n\t\t\t_polygonMessenger != address(0),\n\t\t\t\"Orchestrator::constructor: address can't be zero\"\n\t\t);\n\t\tpolygonMessenger = PolygonL2Messenger(_polygonMessenger);\n\t\towner = _owner;\n\t}\n\n\tfunction setMessage(string memory _msg) external onlyOwner {\n\t\tmessage = _msg;\n\t}\n}\n"
    },
    "contracts/governance/TreasuryVester.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.7.5;\n\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\n\ncontract TreasuryVester {\n  using SafeMath for uint256;\n\n  address public ctx;\n  address public recipient;\n\n  uint256 public vestingAmount;\n  uint256 public vestingBegin;\n  uint256 public vestingCliff;\n  uint256 public vestingEnd;\n\n  uint256 public lastUpdate;\n\n  constructor(\n    address ctx_,\n    address recipient_,\n    uint256 vestingAmount_,\n    uint256 vestingBegin_,\n    uint256 vestingCliff_,\n    uint256 vestingEnd_\n  ) {\n    require(\n      vestingBegin_ >= block.timestamp,\n      \"TreasuryVester::constructor: vesting begin too early\"\n    );\n    require(\n      vestingCliff_ >= vestingBegin_,\n      \"TreasuryVester::constructor: cliff is too early\"\n    );\n    require(\n      vestingEnd_ > vestingCliff_,\n      \"TreasuryVester::constructor: end is too early\"\n    );\n\n    ctx = ctx_;\n    recipient = recipient_;\n\n    vestingAmount = vestingAmount_;\n    vestingBegin = vestingBegin_;\n    vestingCliff = vestingCliff_;\n    vestingEnd = vestingEnd_;\n\n    lastUpdate = vestingBegin;\n  }\n\n  function setRecipient(address recipient_) public {\n    require(\n      msg.sender == recipient,\n      \"TreasuryVester::setRecipient: unauthorized\"\n    );\n    recipient = recipient_;\n  }\n\n  function claim() public {\n    require(\n      block.timestamp >= vestingCliff,\n      \"TreasuryVester::claim: not time yet\"\n    );\n    uint256 amount;\n    if (block.timestamp >= vestingEnd) {\n      amount = ICtx(ctx).balanceOf(address(this));\n    } else {\n      amount = vestingAmount.mul(block.timestamp - lastUpdate).div(\n        vestingEnd - vestingBegin\n      );\n      lastUpdate = block.timestamp;\n    }\n    ICtx(ctx).transfer(recipient, amount);\n  }\n}\n\ninterface ICtx {\n  function balanceOf(address account) external view returns (uint256);\n\n  function transfer(address dst, uint256 rawAmount) external returns (bool);\n}\n"
    },
    "contracts/governance/Ctx.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.7.5;\npragma experimental ABIEncoderV2;\n\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\n\ncontract Ctx {\n  /// @notice EIP-20 token name for this token\n  string public constant name = \"Cryptex\";\n\n  /// @notice EIP-20 token symbol for this token\n  string public constant symbol = \"CTX\";\n\n  /// @notice EIP-20 token decimals for this token\n  uint8 public constant decimals = 18;\n\n  /// @notice Total number of tokens in circulation\n  uint256 public totalSupply = 10000000e18; // 10 million CTX\n\n  /// @notice Address which may mint new tokens\n  address public minter;\n\n  /// @notice The timestamp after which minting may occur\n  uint256 public mintingAllowedAfter;\n\n  /// @notice Minimum time between mints\n  uint32 public constant minimumTimeBetweenMints = 1 days * 365;\n\n  /// @notice Cap on the percentage of totalSupply that can be minted at each mint\n  uint8 public constant mintCap = 2;\n\n  /// @dev Allowance amounts on behalf of others\n  mapping(address => mapping(address => uint96)) internal allowances;\n\n  /// @dev Official record of token balances for each account\n  mapping(address => uint96) internal balances;\n\n  /// @notice A record of each accounts delegate\n  mapping(address => address) public delegates;\n\n  /// @notice A checkpoint for marking number of votes from a given block\n  struct Checkpoint {\n    uint32 fromBlock;\n    uint96 votes;\n  }\n\n  /// @notice A record of votes checkpoints for each account, by index\n  mapping(address => mapping(uint32 => Checkpoint)) public checkpoints;\n\n  /// @notice The number of checkpoints for each account\n  mapping(address => uint32) public numCheckpoints;\n\n  /// @notice The EIP-712 typehash for the contract's domain\n  bytes32 public constant DOMAIN_TYPEHASH =\n    keccak256(\n      \"EIP712Domain(string name,uint256 chainId,address verifyingContract)\"\n    );\n\n  /// @notice The EIP-712 typehash for the delegation struct used by the contract\n  bytes32 public constant DELEGATION_TYPEHASH =\n    keccak256(\"Delegation(address delegatee,uint256 nonce,uint256 expiry)\");\n\n  /// @notice The EIP-712 typehash for the permit struct used by the contract\n  bytes32 public constant PERMIT_TYPEHASH =\n    keccak256(\n      \"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\"\n    );\n\n  /// @notice A record of states for signing / validating signatures\n  mapping(address => uint256) public nonces;\n\n  /// @notice An event thats emitted when the minter address is changed\n  event MinterChanged(address minter, address newMinter);\n\n  /// @notice An event thats emitted when an account changes its delegate\n  event DelegateChanged(\n    address indexed delegator,\n    address indexed fromDelegate,\n    address indexed toDelegate\n  );\n\n  /// @notice An event thats emitted when a delegate account's vote balance changes\n  event DelegateVotesChanged(\n    address indexed delegate,\n    uint256 previousBalance,\n    uint256 newBalance\n  );\n\n  /// @notice The standard EIP-20 transfer event\n  event Transfer(address indexed from, address indexed to, uint256 amount);\n\n  /// @notice The standard EIP-20 approval event\n  event Approval(\n    address indexed owner,\n    address indexed spender,\n    uint256 amount\n  );\n\n  /**\n   * @notice Construct a new Ctx token\n   * @param account The initial account to grant all the tokens\n   * @param minter_ The account with minting ability\n   * @param mintingAllowedAfter_ The timestamp after which minting may occur\n   */\n  constructor(\n    address account,\n    address minter_,\n    uint256 mintingAllowedAfter_\n  ) {\n    require(\n      mintingAllowedAfter_ >= block.timestamp,\n      \"Ctx::constructor: minting can only begin after deployment\"\n    );\n\n    balances[account] = uint96(totalSupply);\n    emit Transfer(address(0), account, totalSupply);\n    minter = minter_;\n    emit MinterChanged(address(0), minter);\n    mintingAllowedAfter = mintingAllowedAfter_;\n  }\n\n  /**\n   * @notice Change the minter address\n   * @param minter_ The address of the new minter\n   */\n  function setMinter(address minter_) external {\n    require(\n      msg.sender == minter,\n      \"Ctx::setMinter: only the minter can change the minter address\"\n    );\n    emit MinterChanged(minter, minter_);\n    minter = minter_;\n  }\n\n  /**\n   * @notice Mint new tokens\n   * @param dst The address of the destination account\n   * @param rawAmount The number of tokens to be minted\n   */\n  function mint(address dst, uint256 rawAmount) external {\n    require(msg.sender == minter, \"Ctx::mint: only the minter can mint\");\n    require(\n      block.timestamp >= mintingAllowedAfter,\n      \"Ctx::mint: minting not allowed yet\"\n    );\n    require(\n      dst != address(0),\n      \"Ctx::mint: cannot transfer to the zero address\"\n    );\n    require(\n      dst != address(this),\n      \"Ctx::mint: cannot transfer to the Ctx address\"\n    );\n\n    // record the mint\n    mintingAllowedAfter = SafeMath.add(\n      block.timestamp,\n      minimumTimeBetweenMints\n    );\n\n    // mint the amount\n    uint96 amount = safe96(rawAmount, \"Ctx::mint: amount exceeds 96 bits\");\n    require(\n      amount <= SafeMath.div(SafeMath.mul(totalSupply, mintCap), 100),\n      \"Ctx::mint: exceeded mint cap\"\n    );\n    totalSupply = safe96(\n      SafeMath.add(totalSupply, amount),\n      \"Ctx::mint: totalSupply exceeds 96 bits\"\n    );\n\n    // transfer the amount to the recipient\n    balances[dst] = add96(\n      balances[dst],\n      amount,\n      \"Ctx::mint: transfer amount overflows\"\n    );\n    emit Transfer(address(0), dst, amount);\n\n    // move delegates\n    _moveDelegates(address(0), delegates[dst], amount);\n  }\n\n  /**\n   * @notice Get the number of tokens `spender` is approved to spend on behalf of `account`\n   * @param account The address of the account holding the funds\n   * @param spender The address of the account spending the funds\n   * @return The number of tokens approved\n   */\n  function allowance(address account, address spender)\n    external\n    view\n    returns (uint256)\n  {\n    return allowances[account][spender];\n  }\n\n  /**\n   * @notice Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n   * @param owner The address of the caller.\n   * @param spender The address of the account which may transfer tokens\n   * @param amount The number of tokens that are approved\n   * @dev This internal function is equivalent to `approve`, and can be used to\n   * e.g. set automatic allowances for certain subsystems, etc.\n   * @dev Emits an Approval event.\n   * @dev owner cannot be the zero address.\n   * @dev spender cannot be the zero address.\n   */\n  function _approve(\n    address owner,\n    address spender,\n    uint96 amount\n  ) internal virtual {\n    require(\n      owner != address(0),\n      \"Ctx::_approve: approve from the zero address\"\n    );\n    require(\n      spender != address(0),\n      \"Ctx::_approve: approve to the zero address\"\n    );\n\n    allowances[owner][spender] = amount;\n    emit Approval(owner, spender, amount);\n  }\n\n  /**\n   * @notice Approve `spender` to transfer up to `amount` from `src`\n   * @param spender The address of the account which may transfer tokens\n   * @param rawAmount The number of tokens that are approved (2^256-1 means infinite)\n   * @dev This will overwrite the approval amount for `spender`\n   *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\n   * @return Whether or not the approval succeeded\n   */\n  function approve(address spender, uint256 rawAmount) external returns (bool) {\n    uint96 amount;\n    if (rawAmount == uint256(-1)) {\n      amount = uint96(-1);\n    } else {\n      amount = safe96(rawAmount, \"Ctx::approve: amount exceeds 96 bits\");\n    }\n    _approve(msg.sender, spender, amount);\n    return true;\n  }\n\n  /**\n   * @notice Atomically increases the allowance granted to `spender` by the caller.\n   * @param spender address\n   * @param addedValue uint256 raw\n   * @dev This is an alternative to {approve} that can be used as a mitigation for\n   * problems of Allowance Double-Spend Exploit.\n   * @dev Emits Approval event indicating the updated allowance.\n   * @dev spender cannot be the zero address.\n   */\n  function increaseAllowance(address spender, uint256 addedValue)\n    public\n    virtual\n    returns (bool)\n  {\n    uint96 amount;\n    if (addedValue == uint256(-1)) {\n      amount = uint96(-1);\n    } else {\n      amount = safe96(\n        addedValue,\n        \"Ctx::increaseAllowance: amount exceeds 96 bits\"\n      );\n    }\n    _approve(\n      msg.sender,\n      spender,\n      add96(\n        allowances[msg.sender][spender],\n        amount,\n        \"Ctx::increaseAllowance: transfer amount overflows\"\n      )\n    );\n    return true;\n  }\n\n  /**\n   * @notice Atomically decreases the allowance granted to `spender` by the caller.\n   * @param spender address\n   * @param subtractedValue uint256 raw\n   * @dev This is an alternative to {approve} that can be used as a mitigation for\n   * problems of Allowance Double-Spend Exploit.\n   * @dev Emits an Approval event indicating the updated allowance.\n   * @dev spender cannot be the sero address\n   * @dev spender must have allowance for the caller of at least subtractedValue\n   */\n  function decreaseAllowance(address spender, uint256 subtractedValue)\n    public\n    virtual\n    returns (bool)\n  {\n    uint96 amount;\n    if (subtractedValue == uint256(-1)) {\n      amount = uint96(-1);\n    } else {\n      amount = safe96(\n        subtractedValue,\n        \"Ctx::decreaseAllowance: amount exceeds 96 bits\"\n      );\n    }\n\n    _approve(\n      msg.sender,\n      spender,\n      sub96(\n        allowances[msg.sender][spender],\n        amount,\n        \"Ctx::decreaseAllowance: decreased allowance below zero\"\n      )\n    );\n    return true;\n  }\n\n  /**\n   * @notice Triggers an approval from owner to spends\n   * @param owner The address to approve from\n   * @param spender The address to be approved\n   * @param rawAmount The number of tokens that are approved (2^256-1 means infinite)\n   * @param deadline The time at which to expire the signature\n   * @param v The recovery byte of the signature\n   * @param r Half of the ECDSA signature pair\n   * @param s Half of the ECDSA signature pair\n   */\n  function permit(\n    address owner,\n    address spender,\n    uint256 rawAmount,\n    uint256 deadline,\n    uint8 v,\n    bytes32 r,\n    bytes32 s\n  ) external {\n    uint96 amount;\n    if (rawAmount == uint256(-1)) {\n      amount = uint96(-1);\n    } else {\n      amount = safe96(rawAmount, \"Ctx::permit: amount exceeds 96 bits\");\n    }\n\n    bytes32 domainSeparator =\n      keccak256(\n        abi.encode(\n          DOMAIN_TYPEHASH,\n          keccak256(bytes(name)),\n          getChainId(),\n          address(this)\n        )\n      );\n    bytes32 structHash =\n      keccak256(\n        abi.encode(\n          PERMIT_TYPEHASH,\n          owner,\n          spender,\n          rawAmount,\n          nonces[owner]++,\n          deadline\n        )\n      );\n    bytes32 digest =\n      keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    address signatory = ecrecover(digest, v, r, s);\n    require(signatory != address(0), \"Ctx::permit: invalid signature\");\n    require(signatory == owner, \"Ctx::permit: unauthorized\");\n    require(block.timestamp <= deadline, \"Ctx::permit: signature expired\");\n\n    allowances[owner][spender] = amount;\n\n    emit Approval(owner, spender, amount);\n  }\n\n  /**\n   * @notice Get the number of tokens held by the `account`\n   * @param account The address of the account to get the balance of\n   * @return The number of tokens held\n   */\n  function balanceOf(address account) external view returns (uint256) {\n    return balances[account];\n  }\n\n  /**\n   * @notice Transfer `amount` tokens from `msg.sender` to `dst`\n   * @param dst The address of the destination account\n   * @param rawAmount The number of tokens to transfer\n   * @return Whether or not the transfer succeeded\n   */\n  function transfer(address dst, uint256 rawAmount) external returns (bool) {\n    uint96 amount = safe96(rawAmount, \"Ctx::transfer: amount exceeds 96 bits\");\n    _transferTokens(msg.sender, dst, amount);\n    return true;\n  }\n\n  /**\n   * @notice Transfer `amount` tokens from `src` to `dst`\n   * @param src The address of the source account\n   * @param dst The address of the destination account\n   * @param rawAmount The number of tokens to transfer\n   * @return Whether or not the transfer succeeded\n   */\n  function transferFrom(\n    address src,\n    address dst,\n    uint256 rawAmount\n  ) external returns (bool) {\n    address spender = msg.sender;\n    uint96 spenderAllowance = allowances[src][spender];\n    uint96 amount = safe96(rawAmount, \"Ctx::approve: amount exceeds 96 bits\");\n\n    if (spender != src && spenderAllowance != uint96(-1)) {\n      uint96 newAllowance =\n        sub96(\n          spenderAllowance,\n          amount,\n          \"Ctx::transferFrom: transfer amount exceeds spender allowance\"\n        );\n      allowances[src][spender] = newAllowance;\n\n      emit Approval(src, spender, newAllowance);\n    }\n\n    _transferTokens(src, dst, amount);\n    return true;\n  }\n\n  /**\n   * @notice Delegate votes from `msg.sender` to `delegatee`\n   * @param delegatee The address to delegate votes to\n   */\n  function delegate(address delegatee) public {\n    return _delegate(msg.sender, delegatee);\n  }\n\n  /**\n   * @notice Delegates votes from signatory to `delegatee`\n   * @param delegatee The address to delegate votes to\n   * @param nonce The contract state required to match the signature\n   * @param expiry The time at which to expire the signature\n   * @param v The recovery byte of the signature\n   * @param r Half of the ECDSA signature pair\n   * @param s Half of the ECDSA signature pair\n   */\n  function delegateBySig(\n    address delegatee,\n    uint256 nonce,\n    uint256 expiry,\n    uint8 v,\n    bytes32 r,\n    bytes32 s\n  ) public {\n    bytes32 domainSeparator =\n      keccak256(\n        abi.encode(\n          DOMAIN_TYPEHASH,\n          keccak256(bytes(name)),\n          getChainId(),\n          address(this)\n        )\n      );\n    bytes32 structHash =\n      keccak256(abi.encode(DELEGATION_TYPEHASH, delegatee, nonce, expiry));\n    bytes32 digest =\n      keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    address signatory = ecrecover(digest, v, r, s);\n    require(signatory != address(0), \"Ctx::delegateBySig: invalid signature\");\n    require(nonce == nonces[signatory]++, \"Ctx::delegateBySig: invalid nonce\");\n    require(block.timestamp <= expiry, \"Ctx::delegateBySig: signature expired\");\n    return _delegate(signatory, delegatee);\n  }\n\n  /**\n   * @notice Gets the current votes balance for `account`\n   * @param account The address to get votes balance\n   * @return The number of current votes for `account`\n   */\n  function getCurrentVotes(address account) external view returns (uint96) {\n    uint32 nCheckpoints = numCheckpoints[account];\n    return nCheckpoints > 0 ? checkpoints[account][nCheckpoints - 1].votes : 0;\n  }\n\n  /**\n   * @notice Determine the prior number of votes for an account as of a block number\n   * @dev Block number must be a finalized block or else this function will revert to prevent misinformation.\n   * @param account The address of the account to check\n   * @param blockNumber The block number to get the vote balance at\n   * @return The number of votes the account had as of the given block\n   */\n  function getPriorVotes(address account, uint256 blockNumber)\n    public\n    view\n    returns (uint96)\n  {\n    require(\n      blockNumber < block.number,\n      \"Ctx::getPriorVotes: not yet determined\"\n    );\n\n    uint32 nCheckpoints = numCheckpoints[account];\n    if (nCheckpoints == 0) {\n      return 0;\n    }\n\n    // First check most recent balance\n    if (checkpoints[account][nCheckpoints - 1].fromBlock <= blockNumber) {\n      return checkpoints[account][nCheckpoints - 1].votes;\n    }\n\n    // Next check implicit zero balance\n    if (checkpoints[account][0].fromBlock > blockNumber) {\n      return 0;\n    }\n\n    uint32 lower = 0;\n    uint32 upper = nCheckpoints - 1;\n    while (upper > lower) {\n      uint32 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\n      Checkpoint memory cp = checkpoints[account][center];\n      if (cp.fromBlock == blockNumber) {\n        return cp.votes;\n      } else if (cp.fromBlock < blockNumber) {\n        lower = center;\n      } else {\n        upper = center - 1;\n      }\n    }\n    return checkpoints[account][lower].votes;\n  }\n\n  function _delegate(address delegator, address delegatee) internal {\n    address currentDelegate = delegates[delegator];\n    uint96 delegatorBalance = balances[delegator];\n    delegates[delegator] = delegatee;\n\n    emit DelegateChanged(delegator, currentDelegate, delegatee);\n\n    _moveDelegates(currentDelegate, delegatee, delegatorBalance);\n  }\n\n  function _transferTokens(\n    address src,\n    address dst,\n    uint96 amount\n  ) internal {\n    require(\n      src != address(0),\n      \"Ctx::_transferTokens: cannot transfer from the zero address\"\n    );\n    require(\n      dst != address(0),\n      \"Ctx::_transferTokens: cannot transfer to the zero address\"\n    );\n    require(\n      dst != address(this),\n      \"Ctx::_transferTokens: cannot transfer to the Ctx address\"\n    );\n\n    balances[src] = sub96(\n      balances[src],\n      amount,\n      \"Ctx::_transferTokens: transfer amount exceeds balance\"\n    );\n    balances[dst] = add96(\n      balances[dst],\n      amount,\n      \"Ctx::_transferTokens: transfer amount overflows\"\n    );\n    emit Transfer(src, dst, amount);\n\n    _moveDelegates(delegates[src], delegates[dst], amount);\n  }\n\n  function _moveDelegates(\n    address srcRep,\n    address dstRep,\n    uint96 amount\n  ) internal {\n    if (srcRep != dstRep && amount > 0) {\n      if (srcRep != address(0)) {\n        uint32 srcRepNum = numCheckpoints[srcRep];\n        uint96 srcRepOld =\n          srcRepNum > 0 ? checkpoints[srcRep][srcRepNum - 1].votes : 0;\n        uint96 srcRepNew =\n          sub96(srcRepOld, amount, \"Ctx::_moveVotes: vote amount underflows\");\n        _writeCheckpoint(srcRep, srcRepNum, srcRepOld, srcRepNew);\n      }\n\n      if (dstRep != address(0)) {\n        uint32 dstRepNum = numCheckpoints[dstRep];\n        uint96 dstRepOld =\n          dstRepNum > 0 ? checkpoints[dstRep][dstRepNum - 1].votes : 0;\n        uint96 dstRepNew =\n          add96(dstRepOld, amount, \"Ctx::_moveVotes: vote amount overflows\");\n        _writeCheckpoint(dstRep, dstRepNum, dstRepOld, dstRepNew);\n      }\n    }\n  }\n\n  function _writeCheckpoint(\n    address delegatee,\n    uint32 nCheckpoints,\n    uint96 oldVotes,\n    uint96 newVotes\n  ) internal {\n    uint32 blockNumber =\n      safe32(\n        block.number,\n        \"Ctx::_writeCheckpoint: block number exceeds 32 bits\"\n      );\n\n    if (\n      nCheckpoints > 0 &&\n      checkpoints[delegatee][nCheckpoints - 1].fromBlock == blockNumber\n    ) {\n      checkpoints[delegatee][nCheckpoints - 1].votes = newVotes;\n    } else {\n      checkpoints[delegatee][nCheckpoints] = Checkpoint(blockNumber, newVotes);\n      numCheckpoints[delegatee] = nCheckpoints + 1;\n    }\n\n    emit DelegateVotesChanged(delegatee, oldVotes, newVotes);\n  }\n\n  function safe32(uint256 n, string memory errorMessage)\n    internal\n    pure\n    returns (uint32)\n  {\n    require(n < 2**32, errorMessage);\n    return uint32(n);\n  }\n\n  function safe96(uint256 n, string memory errorMessage)\n    internal\n    pure\n    returns (uint96)\n  {\n    require(n < 2**96, errorMessage);\n    return uint96(n);\n  }\n\n  function add96(\n    uint96 a,\n    uint96 b,\n    string memory errorMessage\n  ) internal pure returns (uint96) {\n    uint96 c = a + b;\n    require(c >= a, errorMessage);\n    return c;\n  }\n\n  function sub96(\n    uint96 a,\n    uint96 b,\n    string memory errorMessage\n  ) internal pure returns (uint96) {\n    require(b <= a, errorMessage);\n    return a - b;\n  }\n\n  function getChainId() internal pure returns (uint256) {\n    uint256 chainId;\n    assembly {\n      chainId := chainid()\n    }\n    return chainId;\n  }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}