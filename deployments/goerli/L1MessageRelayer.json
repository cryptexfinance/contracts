{
  "address": "0xE2dDFfC0d9D0151e633a247Fa96548fb12969131",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_timeLock",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_inbox",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "ticketId",
          "type": "uint256"
        }
      ],
      "name": "RetryableTicketCreated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "inbox",
      "outputs": [
        {
          "internalType": "contract IInbox",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "l2MessageExecutorProxy",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "payLoad",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "maxSubmissionCost",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxGas",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "gasPriceBid",
          "type": "uint256"
        }
      ],
      "name": "relayMessage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_l2MessageExecutorProxy",
          "type": "address"
        }
      ],
      "name": "setL2MessageExecutorProxy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "timeLock",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_l2MessageExecutorProxy",
          "type": "address"
        }
      ],
      "name": "updateL2MessageExecutorProxy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xa90ec1eeda4fe9343f3fb8298382e485cf9043c42fe04323d2222d6844d54eac",
  "receipt": {
    "to": null,
    "from": "0x49Ae0618578D12cc06eE992C23DB683D8ADAf43E",
    "contractAddress": "0xE2dDFfC0d9D0151e633a247Fa96548fb12969131",
    "transactionIndex": 40,
    "gasUsed": "673946",
    "logsBloom": "0x
    "blockHash": "0xb0199f628ad6f976e96ddf9a9457a0e07a91bb744c16da07b54ac1f4e05b4ced",
    "transactionHash": "0xa90ec1eeda4fe9343f3fb8298382e485cf9043c42fe04323d2222d6844d54eac",
    "logs": [
      {
        "transactionIndex": 40,
        "blockNumber": 8267692,
        "transactionHash": "0xa90ec1eeda4fe9343f3fb8298382e485cf9043c42fe04323d2222d6844d54eac",
        "address": "0xE2dDFfC0d9D0151e633a247Fa96548fb12969131",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000049ae0618578d12cc06ee992c23db683d8adaf43e"
        ],
        "data": "0x",
        "logIndex": 167,
        "blockHash": "0xb0199f628ad6f976e96ddf9a9457a0e07a91bb744c16da07b54ac1f4e05b4ced"
      }
    ],
    "blockNumber": 8267692,
    "cumulativeGasUsed": "9260947",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x49Ae0618578D12cc06eE992C23DB683D8ADAf43E",
    "0x6BEbC4925716945D46F0Ec336D5C2564F419682C"
  ],
  "numDeployments": 2,
  "solcInputHash": "57fd964943961eb21329ffa8c2b6f646",
  "metadata": "{\"compiler\":{\"version\":\"0.7.5+commit.eb77ed08\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_timeLock\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_inbox\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"ticketId\",\"type\":\"uint256\"}],\"name\":\"RetryableTicketCreated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"inbox\",\"outputs\":[{\"internalType\":\"contract IInbox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l2MessageExecutorProxy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"payLoad\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"maxSubmissionCost\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasPriceBid\",\"type\":\"uint256\"}],\"name\":\"relayMessage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_l2MessageExecutorProxy\",\"type\":\"address\"}],\"name\":\"setL2MessageExecutorProxy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timeLock\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_l2MessageExecutorProxy\",\"type\":\"address\"}],\"name\":\"updateL2MessageExecutorProxy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"relayMessage(bytes,uint256,uint256,uint256)\":{\"params\":{\"payLoad\":\"message received from L1 that needs to be executed.*\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setL2MessageExecutorProxy(address)\":{\"details\":\"Initialises the address of the l2MessageExecutorProxy contract.\",\"params\":{\"_l2MessageExecutorProxy\":\"the address of L2 contract used to relay L1 messages.*\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateL2MessageExecutorProxy(address)\":{\"details\":\"Update the address of the L2MessageExecutorProxy contract.\",\"params\":{\"_l2MessageExecutorProxy\":\"the address of L2 contract used to relay L1 messages.*\"}}},\"version\":1},\"userdoc\":{\"events\":{\"RetryableTicketCreated(uint256)\":{\"notice\":\"Emitted when a retryable ticket is created for relaying L1 message to L2.\"}},\"kind\":\"user\",\"methods\":{\"inbox()\":{\"notice\":\"Address of arbitrum's L1 inbox contract.\"},\"l2MessageExecutorProxy()\":{\"notice\":\"Address of the L2MessageExecutorProxy contract on arbitrum.\"},\"relayMessage(bytes,uint256,uint256,uint256)\":{\"notice\":\"sends message received from timeLock to L2MessageExecutorProxy.\"},\"renounceOwnership()\":{\"notice\":\"renounceOwnership has been disabled so that the contract is never left without a onwer\"},\"timeLock()\":{\"notice\":\"Address of the governance TimeLock contract.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/arbitrum/L1MessageRelayer.sol\":\"L1MessageRelayer\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@arbitrum/nitro-contracts/src/bridge/IBridge.sol\":{\"content\":\"// Copyright 2021-2022, Offchain Labs, Inc.\\n// For license information, see https://github.com/nitro/blob/master/LICENSE\\n// SPDX-License-Identifier: BUSL-1.1\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.6.9 <0.9.0;\\n\\nimport \\\"./IOwnable.sol\\\";\\n\\ninterface IBridge {\\n    event MessageDelivered(\\n        uint256 indexed messageIndex,\\n        bytes32 indexed beforeInboxAcc,\\n        address inbox,\\n        uint8 kind,\\n        address sender,\\n        bytes32 messageDataHash,\\n        uint256 baseFeeL1,\\n        uint64 timestamp\\n    );\\n\\n    event BridgeCallTriggered(\\n        address indexed outbox,\\n        address indexed to,\\n        uint256 value,\\n        bytes data\\n    );\\n\\n    event InboxToggle(address indexed inbox, bool enabled);\\n\\n    event OutboxToggle(address indexed outbox, bool enabled);\\n\\n    event SequencerInboxUpdated(address newSequencerInbox);\\n\\n    function enqueueDelayedMessage(\\n        uint8 kind,\\n        address sender,\\n        bytes32 messageDataHash\\n    ) external payable returns (uint256);\\n\\n    function enqueueSequencerMessage(bytes32 dataHash, uint256 afterDelayedMessagesRead)\\n        external\\n        returns (\\n            uint256 seqMessageIndex,\\n            bytes32 beforeAcc,\\n            bytes32 delayedAcc,\\n            bytes32 acc\\n        );\\n\\n    function submitBatchSpendingReport(address batchPoster, bytes32 dataHash)\\n        external\\n        returns (uint256 msgNum);\\n\\n    function executeCall(\\n        address to,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bool success, bytes memory returnData);\\n\\n    // These are only callable by the admin\\n    function setDelayedInbox(address inbox, bool enabled) external;\\n\\n    function setOutbox(address inbox, bool enabled) external;\\n\\n    function setSequencerInbox(address _sequencerInbox) external;\\n\\n    // View functions\\n\\n    function sequencerInbox() external view returns (address);\\n\\n    function activeOutbox() external view returns (address);\\n\\n    function allowedDelayedInboxes(address inbox) external view returns (bool);\\n\\n    function allowedOutboxes(address outbox) external view returns (bool);\\n\\n    function delayedInboxAccs(uint256 index) external view returns (bytes32);\\n\\n    function sequencerInboxAccs(uint256 index) external view returns (bytes32);\\n\\n    function delayedMessageCount() external view returns (uint256);\\n\\n    function sequencerMessageCount() external view returns (uint256);\\n\\n    function rollup() external view returns (IOwnable);\\n\\n    function acceptFundsFromOldBridge() external payable;\\n}\\n\",\"keccak256\":\"0x0c456c523be8a6c6df8caf6e054d1825312aa71e3fb67bb8b71cf1d2cd11c3c1\",\"license\":\"BUSL-1.1\"},\"@arbitrum/nitro-contracts/src/bridge/IDelayedMessageProvider.sol\":{\"content\":\"// Copyright 2021-2022, Offchain Labs, Inc.\\n// For license information, see https://github.com/nitro/blob/master/LICENSE\\n// SPDX-License-Identifier: BUSL-1.1\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.6.9 <0.9.0;\\n\\ninterface IDelayedMessageProvider {\\n    /// @dev event emitted when a inbox message is added to the Bridge's delayed accumulator\\n    event InboxMessageDelivered(uint256 indexed messageNum, bytes data);\\n\\n    /// @dev event emitted when a inbox message is added to the Bridge's delayed accumulator\\n    /// same as InboxMessageDelivered but the batch data is available in tx.input\\n    event InboxMessageDeliveredFromOrigin(uint256 indexed messageNum);\\n}\\n\",\"keccak256\":\"0xeb901f4bd275074e64f05a678c2c40a79876f926a4dd222e8d662e008b5f4903\",\"license\":\"BUSL-1.1\"},\"@arbitrum/nitro-contracts/src/bridge/IInbox.sol\":{\"content\":\"// Copyright 2021-2022, Offchain Labs, Inc.\\n// For license information, see https://github.com/nitro/blob/master/LICENSE\\n// SPDX-License-Identifier: BUSL-1.1\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.6.9 <0.9.0;\\n\\nimport \\\"./IBridge.sol\\\";\\nimport \\\"./IDelayedMessageProvider.sol\\\";\\n\\ninterface IInbox is IDelayedMessageProvider {\\n    function sendL2Message(bytes calldata messageData) external returns (uint256);\\n\\n    function sendUnsignedTransaction(\\n        uint256 gasLimit,\\n        uint256 maxFeePerGas,\\n        uint256 nonce,\\n        address to,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (uint256);\\n\\n    function sendContractTransaction(\\n        uint256 gasLimit,\\n        uint256 maxFeePerGas,\\n        address to,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (uint256);\\n\\n    function sendL1FundedUnsignedTransaction(\\n        uint256 gasLimit,\\n        uint256 maxFeePerGas,\\n        uint256 nonce,\\n        address to,\\n        bytes calldata data\\n    ) external payable returns (uint256);\\n\\n    function sendL1FundedContractTransaction(\\n        uint256 gasLimit,\\n        uint256 maxFeePerGas,\\n        address to,\\n        bytes calldata data\\n    ) external payable returns (uint256);\\n\\n    /// @dev Gas limit and maxFeePerGas should not be set to 1 as that is used to trigger the RetryableData error\\n    function createRetryableTicket(\\n        address to,\\n        uint256 arbTxCallValue,\\n        uint256 maxSubmissionCost,\\n        address submissionRefundAddress,\\n        address valueRefundAddress,\\n        uint256 gasLimit,\\n        uint256 maxFeePerGas,\\n        bytes calldata data\\n    ) external payable returns (uint256);\\n\\n    /// @dev Gas limit and maxFeePerGas should not be set to 1 as that is used to trigger the RetryableData error\\n    function unsafeCreateRetryableTicket(\\n        address to,\\n        uint256 arbTxCallValue,\\n        uint256 maxSubmissionCost,\\n        address submissionRefundAddress,\\n        address valueRefundAddress,\\n        uint256 gasLimit,\\n        uint256 maxFeePerGas,\\n        bytes calldata data\\n    ) external payable returns (uint256);\\n\\n    function depositEth() external payable returns (uint256);\\n\\n    /// @notice deprecated in favour of depositEth with no parameters\\n    function depositEth(uint256 maxSubmissionCost) external payable returns (uint256);\\n\\n    function bridge() external view returns (IBridge);\\n\\n    function postUpgradeInit(IBridge _bridge) external;\\n}\\n\",\"keccak256\":\"0xa13598264f80f9182a0dccbf63d2b6d7050ae10e1d76d2d1b91ef1efdee0dfa6\",\"license\":\"BUSL-1.1\"},\"@arbitrum/nitro-contracts/src/bridge/IOwnable.sol\":{\"content\":\"// Copyright 2021-2022, Offchain Labs, Inc.\\n// For license information, see https://github.com/nitro/blob/master/LICENSE\\n// SPDX-License-Identifier: BUSL-1.1\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.21 <0.9.0;\\n\\ninterface IOwnable {\\n    function owner() external view returns (address);\\n}\\n\",\"keccak256\":\"0xf32ba8fd2fb9e661997c145874f22ff9cd52cfa2dc8f3aa050714c7637d8efdd\",\"license\":\"BUSL-1.1\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x15e2d5bd4c28a88548074c54d220e8086f638a71ed07e6b3ba5a70066fcf458d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x8bbbc2f5c10065ee272592ae0a7a6ceb23de2fbd81564ee0bb015ecf404d5f61\",\"license\":\"MIT\"},\"contracts/arbitrum/AddressAliasHelper.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/*\\n * Copyright 2019-2021, Offchain Labs, Inc.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *    http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity 0.7.5;\\n\\nlibrary AddressAliasHelper {\\n  uint160 constant OFFSET = uint160(0x1111000000000000000000000000000000001111);\\n\\n  /// @notice Utility function that converts the address in the L1 that submitted a tx to\\n  /// the inbox to the msg.sender viewed in the L2\\n  /// @param l1Address the address in the L1 that triggered the tx to L2\\n  /// @return l2Address L2 address as viewed in msg.sender\\n  function applyL1ToL2Alias(address l1Address)\\n    internal\\n    pure\\n    returns (address l2Address)\\n  {\\n    l2Address = address(uint160(l1Address) + OFFSET);\\n  }\\n\\n  /// @notice Utility function that converts the msg.sender viewed in the L2 to the\\n  /// address in the L1 that submitted a tx to the inbox\\n  /// @param l2Address L2 address as viewed in msg.sender\\n  /// @return l1Address the address in the L1 that triggered the tx to L2\\n  function undoL1ToL2Alias(address l2Address)\\n    internal\\n    pure\\n    returns (address l1Address)\\n  {\\n    l1Address = address(uint160(l2Address) - OFFSET);\\n  }\\n}\\n\",\"keccak256\":\"0x5587b600f2e53e42772f8c7ad66b71f6c87525f8e0dadee41f6774ecad377ad4\",\"license\":\"Apache-2.0\"},\"contracts/arbitrum/L1MessageRelayer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.5;\\n\\nimport \\\"@arbitrum/nitro-contracts/src/bridge/IInbox.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"./L2MessageExecutor.sol\\\";\\n\\ncontract L1MessageRelayer is Ownable {\\n  /// @notice Address of the governance TimeLock contract.\\n  address public timeLock;\\n\\n  /// @notice Address of the L2MessageExecutorProxy contract on arbitrum.\\n  address public l2MessageExecutorProxy;\\n\\n  /// @notice Address of arbitrum's L1 inbox contract.\\n  IInbox public inbox;\\n\\n  /// @notice Emitted when a retryable ticket is created for relaying L1 message to L2.\\n  event RetryableTicketCreated(uint256 indexed ticketId);\\n\\n  /// @notice Throws if called by any account other than the timeLock contract.\\n  modifier onlyTimeLock() {\\n    require(\\n      msg.sender == timeLock,\\n      \\\"L1MessageRelayer::onlyTimeLock: Unauthorized message sender\\\"\\n    );\\n    _;\\n  }\\n\\n  constructor(address _timeLock, address _inbox) {\\n    require(_timeLock != address(0), \\\"_timeLock can't the zero address\\\");\\n    require(_inbox != address(0), \\\"_inbox can't the zero address\\\");\\n    timeLock = _timeLock;\\n    inbox = IInbox(_inbox);\\n  }\\n\\n  /**\\n   * @dev Initialises the address of the l2MessageExecutorProxy contract.\\n   * @param _l2MessageExecutorProxy the address of L2 contract used to relay L1 messages.\\n   **/\\n  function setL2MessageExecutorProxy(address _l2MessageExecutorProxy) external onlyOwner {\\n    require(\\n      l2MessageExecutorProxy == address(0x0),\\n      \\\"L1MessageRelayer::setL2MessageExecutorProxy: l2MessageExecutorProxy is already set\\\"\\n    );\\n    l2MessageExecutorProxy = _l2MessageExecutorProxy;\\n  }\\n\\n\\t/// @notice renounceOwnership has been disabled so that the contract is never left without a onwer\\n  /// @inheritdoc Ownable\\n  function renounceOwnership() public override onlyOwner {\\n    revert(\\\"function disabled\\\");\\n  }\\n\\n  /**\\n   * @dev Update the address of the L2MessageExecutorProxy contract.\\n   * @param _l2MessageExecutorProxy the address of L2 contract used to relay L1 messages.\\n   **/\\n  function updateL2MessageExecutorProxy(address _l2MessageExecutorProxy)\\n    external\\n    onlyTimeLock\\n  {\\n    require(\\n      _l2MessageExecutorProxy != address(0),\\n      \\\"L1MessageRelayer::updateL2MessageExecutorProxy _l2MessageExecutorProxy is the zero address\\\"\\n    );\\n    l2MessageExecutorProxy = _l2MessageExecutorProxy;\\n  }\\n\\n  /**\\n   * @notice sends message received from timeLock to L2MessageExecutorProxy.\\n   * @param payLoad message received from L1 that needs to be executed.\\n   **/\\n  function relayMessage(\\n    bytes calldata payLoad,\\n    uint256 maxSubmissionCost,\\n    uint256 maxGas,\\n    uint256 gasPriceBid\\n  ) external payable onlyTimeLock returns (uint256) {\\n    require(maxGas != 1, \\\"maxGas can't be 1\\\");\\n    require(gasPriceBid != 1, \\\"gasPriceBid can't be 1\\\");\\n    bytes memory data = abi.encodeWithSelector(\\n      L2MessageExecutor.executeMessage.selector,\\n      payLoad\\n    );\\n    uint256 ticketID = inbox.createRetryableTicket{value: msg.value}(\\n      l2MessageExecutorProxy,\\n      0,\\n      maxSubmissionCost,\\n      msg.sender,\\n      msg.sender,\\n      maxGas,\\n      gasPriceBid,\\n      data\\n    );\\n    emit RetryableTicketCreated(ticketID);\\n    return ticketID;\\n  }\\n}\\n\",\"keccak256\":\"0xd2d92cc8279c40c15400d19d92f6c7f0c2976e1efeb45a28864d18f087779446\",\"license\":\"MIT\"},\"contracts/arbitrum/L2MessageExecutor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.5;\\n\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\n\\nimport {AddressAliasHelper} from \\\"./AddressAliasHelper.sol\\\";\\n\\n/**\\n * @dev This contract executes messages received from layer1 governance on arbitrum.\\n * This meant to be an upgradeable contract and it should only be used with TransparentUpgradeableProxy.\\n */\\ncontract L2MessageExecutor is ReentrancyGuard {\\n  /// @notice Address of the L1MessageRelayer contract on mainnet.\\n  address public l1MessageRelayer;\\n\\n  /// @dev flag to make sure that the initialize function is only called once\\n  bool private isInitialized = false;\\n\\n  function initialize(address _l1MessageRelayer) external {\\n    require(!isInitialized, \\\"Contract is already initialized!\\\");\\n    isInitialized = true;\\n    require(\\n      _l1MessageRelayer != address(0),\\n      \\\"_l1MessageRelayer can't be the zero address\\\"\\n    );\\n    l1MessageRelayer = _l1MessageRelayer;\\n  }\\n\\n  /**\\n   * @notice Throws if called by any account other than this contract.\\n   **/\\n  modifier onlyThis() {\\n    require(\\n      msg.sender == address(this),\\n      \\\"L2MessageExecutor: Unauthorized message sender\\\"\\n    );\\n    _;\\n  }\\n\\n  /**\\n   * @notice executes message received from L1.\\n   * @param payLoad message received from L1 that needs to be executed.\\n   **/\\n  function executeMessage(bytes calldata payLoad) external nonReentrant {\\n    // To check that message came from L1, we check that the sender is the L1 contract's L2 alias.\\n    require(\\n      msg.sender == AddressAliasHelper.applyL1ToL2Alias(l1MessageRelayer),\\n      \\\"L2MessageExecutor::executeMessage: Unauthorized message sender\\\"\\n    );\\n\\n    (address target, bytes memory callData) = abi.decode(\\n      payLoad,\\n      (address, bytes)\\n    );\\n    require(target != address(0), \\\"target can't be the zero address\\\");\\n    (bool success, ) = target.call(callData);\\n    require(\\n      success,\\n      \\\"L2MessageExecutor::executeMessage: Message execution reverted.\\\"\\n    );\\n  }\\n}\\n\",\"keccak256\":\"0x5288070dbf2d39d46207ab6b0cc26a3bbc7688c58acdcd10a68951ede4f7e649\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051610b6a380380610b6a8339818101604052604081101561003357600080fd5b5080516020909101516000610046610177565b600080546001600160a01b0319166001600160a01b0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3506001600160a01b0382166100eb576040805162461bcd60e51b815260206004820181905260248201527f5f74696d654c6f636b2063616e277420746865207a65726f2061646472657373604482015290519081900360640190fd5b6001600160a01b038116610146576040805162461bcd60e51b815260206004820152601d60248201527f5f696e626f782063616e277420746865207a65726f2061646472657373000000604482015290519081900360640190fd5b600180546001600160a01b039384166001600160a01b0319918216179091556003805492909316911617905561017b565b3390565b6109e08061018a6000396000f3fe6080604052600436106100865760003560e01c8063a6040be911610059578063a6040be914610194578063d085835a146101c7578063f2fde38b146101dc578063f781d2111461020f578063fb0e722b1461022457610086565b80630cf9fdb01461008b578063715018a6146100c0578063885d6ba0146100d55780638da5cb5b14610163575b600080fd5b34801561009757600080fd5b506100be600480360360208110156100ae57600080fd5b50356001600160a01b0316610239565b005b3480156100cc57600080fd5b506100be6102e9565b610151600480360360808110156100eb57600080fd5b81019060208101813564010000000081111561010657600080fd5b82018360208201111561011857600080fd5b8035906020019184600183028401116401000000008311171561013a57600080fd5b91935091508035906020810135906040013561039e565b60408051918252519081900360200190f35b34801561016f57600080fd5b5061017861068d565b604080516001600160a01b039092168252519081900360200190f35b3480156101a057600080fd5b506100be600480360360208110156101b757600080fd5b50356001600160a01b031661069c565b3480156101d357600080fd5b50610178610758565b3480156101e857600080fd5b506100be600480360360208110156101ff57600080fd5b50356001600160a01b0316610767565b34801561021b57600080fd5b5061017861087b565b34801561023057600080fd5b5061017861088a565b6001546001600160a01b031633146102825760405162461bcd60e51b815260040180806020018281038252603b815260200180610970603b913960400191505060405180910390fd5b6001600160a01b0381166102c75760405162461bcd60e51b815260040180806020018281038252605a81526020018061089e605a913960600191505060405180910390fd5b600280546001600160a01b0319166001600160a01b0392909216919091179055565b6102f1610899565b6001600160a01b031661030261068d565b6001600160a01b03161461035d576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6040805162461bcd60e51b8152602060048201526011602482015270199d5b98dd1a5bdb88191a5cd8589b1959607a1b604482015290519081900360640190fd5b6001546000906001600160a01b031633146103ea5760405162461bcd60e51b815260040180806020018281038252603b815260200180610970603b913960400191505060405180910390fd5b8260011415610434576040805162461bcd60e51b81526020600482015260116024820152706d61784761732063616e2774206265203160781b604482015290519081900360640190fd5b8160011415610483576040805162461bcd60e51b815260206004820152601660248201527567617350726963654269642063616e2774206265203160501b604482015290519081900360640190fd5b606063e0299bf560e01b878760405160240180806020018281038252848482818152602001925080828437600081840152601f19601f8201169050808301925050509350505050604051602081830303815290604052906001600160e01b0319166020820180516001600160e01b03838183161783525050505090506000600360009054906101000a90046001600160a01b03166001600160a01b031663679b6ded34600260009054906101000a90046001600160a01b031660008a33338c8c8b6040518a63ffffffff1660e01b815260040180896001600160a01b03168152602001888152602001878152602001866001600160a01b03168152602001856001600160a01b0316815260200184815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b838110156105d55781810151838201526020016105bd565b50505050905090810190601f1680156106025780820380516001836020036101000a031916815260200191505b5099505050505050505050506020604051808303818588803b15801561062757600080fd5b505af115801561063b573d6000803e3d6000fd5b50505050506040513d602081101561065257600080fd5b505160405190915081907fde92b5b7839f4a2c640f5e3bbb66d415458dadc57a487b0c7fa562ed7c9c896f90600090a2979650505050505050565b6000546001600160a01b031690565b6106a4610899565b6001600160a01b03166106b561068d565b6001600160a01b031614610710576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6002546001600160a01b0316156102c75760405162461bcd60e51b815260040180806020018281038252605281526020018061091e6052913960600191505060405180910390fd5b6001546001600160a01b031681565b61076f610899565b6001600160a01b031661078061068d565b6001600160a01b0316146107db576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b0381166108205760405162461bcd60e51b81526004018080602001828103825260268152602001806108f86026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6002546001600160a01b031681565b6003546001600160a01b031681565b339056fe4c314d65737361676552656c617965723a3a7570646174654c324d6573736167654578656375746f7250726f7879205f6c324d6573736167654578656375746f7250726f787920697320746865207a65726f20616464726573734f776e61626c653a206e6577206f776e657220697320746865207a65726f20616464726573734c314d65737361676552656c617965723a3a7365744c324d6573736167654578656375746f7250726f78793a206c324d6573736167654578656375746f7250726f787920697320616c7265616479207365744c314d65737361676552656c617965723a3a6f6e6c7954696d654c6f636b3a20556e617574686f72697a6564206d6573736167652073656e646572a2646970667358221220e2372f275f2526bd64611d469b485e1ff2add76871131e84288bc0cf9210abdd64736f6c63430007050033",
  "deployedBytecode": "0x6080604052600436106100865760003560e01c8063a6040be911610059578063a6040be914610194578063d085835a146101c7578063f2fde38b146101dc578063f781d2111461020f578063fb0e722b1461022457610086565b80630cf9fdb01461008b578063715018a6146100c0578063885d6ba0146100d55780638da5cb5b14610163575b600080fd5b34801561009757600080fd5b506100be600480360360208110156100ae57600080fd5b50356001600160a01b0316610239565b005b3480156100cc57600080fd5b506100be6102e9565b610151600480360360808110156100eb57600080fd5b81019060208101813564010000000081111561010657600080fd5b82018360208201111561011857600080fd5b8035906020019184600183028401116401000000008311171561013a57600080fd5b91935091508035906020810135906040013561039e565b60408051918252519081900360200190f35b34801561016f57600080fd5b5061017861068d565b604080516001600160a01b039092168252519081900360200190f35b3480156101a057600080fd5b506100be600480360360208110156101b757600080fd5b50356001600160a01b031661069c565b3480156101d357600080fd5b50610178610758565b3480156101e857600080fd5b506100be600480360360208110156101ff57600080fd5b50356001600160a01b0316610767565b34801561021b57600080fd5b5061017861087b565b34801561023057600080fd5b5061017861088a565b6001546001600160a01b031633146102825760405162461bcd60e51b815260040180806020018281038252603b815260200180610970603b913960400191505060405180910390fd5b6001600160a01b0381166102c75760405162461bcd60e51b815260040180806020018281038252605a81526020018061089e605a913960600191505060405180910390fd5b600280546001600160a01b0319166001600160a01b0392909216919091179055565b6102f1610899565b6001600160a01b031661030261068d565b6001600160a01b03161461035d576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6040805162461bcd60e51b8152602060048201526011602482015270199d5b98dd1a5bdb88191a5cd8589b1959607a1b604482015290519081900360640190fd5b6001546000906001600160a01b031633146103ea5760405162461bcd60e51b815260040180806020018281038252603b815260200180610970603b913960400191505060405180910390fd5b8260011415610434576040805162461bcd60e51b81526020600482015260116024820152706d61784761732063616e2774206265203160781b604482015290519081900360640190fd5b8160011415610483576040805162461bcd60e51b815260206004820152601660248201527567617350726963654269642063616e2774206265203160501b604482015290519081900360640190fd5b606063e0299bf560e01b878760405160240180806020018281038252848482818152602001925080828437600081840152601f19601f8201169050808301925050509350505050604051602081830303815290604052906001600160e01b0319166020820180516001600160e01b03838183161783525050505090506000600360009054906101000a90046001600160a01b03166001600160a01b031663679b6ded34600260009054906101000a90046001600160a01b031660008a33338c8c8b6040518a63ffffffff1660e01b815260040180896001600160a01b03168152602001888152602001878152602001866001600160a01b03168152602001856001600160a01b0316815260200184815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b838110156105d55781810151838201526020016105bd565b50505050905090810190601f1680156106025780820380516001836020036101000a031916815260200191505b5099505050505050505050506020604051808303818588803b15801561062757600080fd5b505af115801561063b573d6000803e3d6000fd5b50505050506040513d602081101561065257600080fd5b505160405190915081907fde92b5b7839f4a2c640f5e3bbb66d415458dadc57a487b0c7fa562ed7c9c896f90600090a2979650505050505050565b6000546001600160a01b031690565b6106a4610899565b6001600160a01b03166106b561068d565b6001600160a01b031614610710576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6002546001600160a01b0316156102c75760405162461bcd60e51b815260040180806020018281038252605281526020018061091e6052913960600191505060405180910390fd5b6001546001600160a01b031681565b61076f610899565b6001600160a01b031661078061068d565b6001600160a01b0316146107db576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b0381166108205760405162461bcd60e51b81526004018080602001828103825260268152602001806108f86026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6002546001600160a01b031681565b6003546001600160a01b031681565b339056fe4c314d65737361676552656c617965723a3a7570646174654c324d6573736167654578656375746f7250726f7879205f6c324d6573736167654578656375746f7250726f787920697320746865207a65726f20616464726573734f776e61626c653a206e6577206f776e657220697320746865207a65726f20616464726573734c314d65737361676552656c617965723a3a7365744c324d6573736167654578656375746f7250726f78793a206c324d6573736167654578656375746f7250726f787920697320616c7265616479207365744c314d65737361676552656c617965723a3a6f6e6c7954696d654c6f636b3a20556e617574686f72697a6564206d6573736167652073656e646572a2646970667358221220e2372f275f2526bd64611d469b485e1ff2add76871131e84288bc0cf9210abdd64736f6c63430007050033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "relayMessage(bytes,uint256,uint256,uint256)": {
        "params": {
          "payLoad": "message received from L1 that needs to be executed.*"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setL2MessageExecutorProxy(address)": {
        "details": "Initialises the address of the l2MessageExecutorProxy contract.",
        "params": {
          "_l2MessageExecutorProxy": "the address of L2 contract used to relay L1 messages.*"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateL2MessageExecutorProxy(address)": {
        "details": "Update the address of the L2MessageExecutorProxy contract.",
        "params": {
          "_l2MessageExecutorProxy": "the address of L2 contract used to relay L1 messages.*"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "RetryableTicketCreated(uint256)": {
        "notice": "Emitted when a retryable ticket is created for relaying L1 message to L2."
      }
    },
    "kind": "user",
    "methods": {
      "inbox()": {
        "notice": "Address of arbitrum's L1 inbox contract."
      },
      "l2MessageExecutorProxy()": {
        "notice": "Address of the L2MessageExecutorProxy contract on arbitrum."
      },
      "relayMessage(bytes,uint256,uint256,uint256)": {
        "notice": "sends message received from timeLock to L2MessageExecutorProxy."
      },
      "renounceOwnership()": {
        "notice": "renounceOwnership has been disabled so that the contract is never left without a onwer"
      },
      "timeLock()": {
        "notice": "Address of the governance TimeLock contract."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 674,
        "contract": "contracts/arbitrum/L1MessageRelayer.sol:L1MessageRelayer",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 9727,
        "contract": "contracts/arbitrum/L1MessageRelayer.sol:L1MessageRelayer",
        "label": "timeLock",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 9730,
        "contract": "contracts/arbitrum/L1MessageRelayer.sol:L1MessageRelayer",
        "label": "l2MessageExecutorProxy",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 9733,
        "contract": "contracts/arbitrum/L1MessageRelayer.sol:L1MessageRelayer",
        "label": "inbox",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IInbox)326"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IInbox)326": {
        "encoding": "inplace",
        "label": "contract IInbox",
        "numberOfBytes": "20"
      }
    }
  }
}