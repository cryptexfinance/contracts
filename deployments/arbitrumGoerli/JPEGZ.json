{
  "address": "0xf9DC37960adC96f347A55Aed9FB92Cb13eDe925b",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_cap",
          "type": "uint256"
        },
        {
          "internalType": "contract Orchestrator",
          "name": "_orchestrator",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "NewCap",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "_enable",
          "type": "bool"
        }
      ],
      "name": "NewCapEnabled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_tokenHandler",
          "type": "address"
        }
      ],
      "name": "VaultHandlerAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_tokenHandler",
          "type": "address"
        }
      ],
      "name": "VaultHandlerRemoved",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vaultHandler",
          "type": "address"
        }
      ],
      "name": "addVaultHandler",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "capEnabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_enable",
          "type": "bool"
        }
      ],
      "name": "enableCap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vaultHandler",
          "type": "address"
        }
      ],
      "name": "removeVaultHandler",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_cap",
          "type": "uint256"
        }
      ],
      "name": "setCap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "_interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "vaultHandlers",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x7394f68c8bd3b27939726af67b94085e1c9906841513c277c99fdb0436c0d9f3",
  "receipt": {
    "to": null,
    "from": "0x570f581D23a2AB09FD1990279D9DB6f5DcE18F4A",
    "contractAddress": "0xf9DC37960adC96f347A55Aed9FB92Cb13eDe925b",
    "transactionIndex": 1,
    "gasUsed": "1357704",
    "logsBloom": "0x
    "blockHash": "0x2c80d4277ed4bb840b4f130dae9cb9196d4fa35cc43a71037f67e51809b0fbc6",
    "transactionHash": "0x7394f68c8bd3b27939726af67b94085e1c9906841513c277c99fdb0436c0d9f3",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 6895306,
        "transactionHash": "0x7394f68c8bd3b27939726af67b94085e1c9906841513c277c99fdb0436c0d9f3",
        "address": "0xf9DC37960adC96f347A55Aed9FB92Cb13eDe925b",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000570f581d23a2ab09fd1990279d9db6f5dce18f4a"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x2c80d4277ed4bb840b4f130dae9cb9196d4fa35cc43a71037f67e51809b0fbc6"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 6895306,
        "transactionHash": "0x7394f68c8bd3b27939726af67b94085e1c9906841513c277c99fdb0436c0d9f3",
        "address": "0xf9DC37960adC96f347A55Aed9FB92Cb13eDe925b",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x000000000000000000000000570f581d23a2ab09fd1990279d9db6f5dce18f4a",
          "0x000000000000000000000000b9ccdf5d90c461557dc3c0d8fd7a782978fb8b4f"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x2c80d4277ed4bb840b4f130dae9cb9196d4fa35cc43a71037f67e51809b0fbc6"
      }
    ],
    "blockNumber": 6895306,
    "cumulativeGasUsed": "1357704",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "JPGEZ Token",
    "JPGEZ",
    0,
    "0xb9CcDF5d90C461557DC3C0D8Fd7A782978FB8b4F"
  ],
  "numDeployments": 1,
  "solcInputHash": "5c91186ce59de7680b65d4ddddd80c54",
  "metadata": "{\"compiler\":{\"version\":\"0.7.5+commit.eb77ed08\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_cap\",\"type\":\"uint256\"},{\"internalType\":\"contract Orchestrator\",\"name\":\"_orchestrator\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"NewCap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_enable\",\"type\":\"bool\"}],\"name\":\"NewCapEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_tokenHandler\",\"type\":\"address\"}],\"name\":\"VaultHandlerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_tokenHandler\",\"type\":\"address\"}],\"name\":\"VaultHandlerRemoved\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultHandler\",\"type\":\"address\"}],\"name\":\"addVaultHandler\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"capEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enable\",\"type\":\"bool\"}],\"name\":\"enableCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultHandler\",\"type\":\"address\"}],\"name\":\"removeVaultHandler\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_cap\",\"type\":\"uint256\"}],\"name\":\"setCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"vaultHandlers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Cryptex.finance\",\"kind\":\"dev\",\"methods\":{\"addVaultHandler(address)\":{\"details\":\"Only owner can call it\",\"params\":{\"_vaultHandler\":\"address of a contract with permissions to mint and burn tokens\"}},\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"burn(address,uint256)\":{\"details\":\"Only vault can call it\",\"params\":{\"_account\":\"address of the account which is burning tokens.\",\"_amount\":\"uint of tokens to burn\"}},\"constructor\":{\"params\":{\"_cap\":\"uint256\",\"_name\":\"uint256\",\"_orchestrator\":\"address\",\"_symbol\":\"uint256\"}},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is called. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"enableCap(bool)\":{\"details\":\"When capEnabled is true, minting will not be allowed above the max capacity. It can exist a supply above the cap, but it prevents minting above the cap.Only owner can call it\",\"params\":{\"_enable\":\"value\"}},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"mint(address,uint256)\":{\"details\":\"Only vault can call it\",\"params\":{\"_account\":\"address of the receiver of tokens\",\"_amount\":\"uint of tokens to mint\"}},\"name()\":{\"details\":\"Returns the name of the token.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"removeVaultHandler(address)\":{\"details\":\"Only owner can call it\",\"params\":{\"_vaultHandler\":\"address of the contract to be removed as vault\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setCap(uint256)\":{\"details\":\"When capEnabled is true, mint is not allowed to issue tokens that would increase the total supply above or equal the specified capacity.Only owner can call it\",\"params\":{\"_cap\":\"value\"}},\"supportsInterface(bytes4)\":{\"params\":{\"_interfaceId\":\"bytes of interface\"},\"returns\":{\"_0\":\"bool\"}},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"_INTERFACE_ID_ERC165\":{\"details\":\"bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\"},\"_INTERFACE_ID_JPEGZ\":{\"details\":\"the computed interface ID according to ERC-165. The interface ID is a XOR of interface method selectors. mint.selector ^ burn.selector ^ setCap.selector ^ enableCap.selector ^ transfer.selector ^ transferFrom.selector ^ addVaultHandler.selector ^ removeVaultHandler.selector ^ approve.selector => 0xbd115939\"},\"vaultHandlers\":{\"details\":\"Only vault handlers can mint and burn JPEGZ\"}},\"title\":\"JPEGZ Token\",\"version\":1},\"userdoc\":{\"events\":{\"NewCap(address,uint256)\":{\"notice\":\"An event emitted when the cap value is updated\"},\"NewCapEnabled(address,bool)\":{\"notice\":\"An event emitted when the cap is enabled or disabled\"},\"VaultHandlerAdded(address,address)\":{\"notice\":\"An event emitted when a vault handler is added\"},\"VaultHandlerRemoved(address,address)\":{\"notice\":\"An event emitted when a vault handler is removed\"}},\"kind\":\"user\",\"methods\":{\"addVaultHandler(address)\":{\"notice\":\"Adds a new address as a vault\"},\"burn(address,uint256)\":{\"notice\":\"Burns JPEGZ Tokens\"},\"cap()\":{\"notice\":\"Maximum value the total supply of JPEGZ\"},\"capEnabled()\":{\"notice\":\"if enabled JPEGZ can't be minted if the total supply is above or equal the cap value\"},\"constructor\":{\"notice\":\"Constructor\"},\"enableCap(bool)\":{\"notice\":\"Enables or Disables the Total Supply Cap.\"},\"mint(address,uint256)\":{\"notice\":\"Mints JPEGZ Tokens\"},\"removeVaultHandler(address)\":{\"notice\":\"Removes an address as a vault\"},\"setCap(uint256)\":{\"notice\":\"Sets maximum value the total supply of JPEGZ can have\"},\"supportsInterface(bytes4)\":{\"notice\":\"ERC165 Standard for support of interfaces\"},\"vaultHandlers(address)\":{\"notice\":\"Address to Vault Handler\"}},\"notice\":\"ERC20 token on the Ethereum Blockchain that provides total exposure to the cryptocurrency sector.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/JPEGZ.sol\":\"JPEGZ\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.6/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0;\\n\\ninterface AggregatorV3Interface {\\n\\n  function decimals() external view returns (uint8);\\n  function description() external view returns (string memory);\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n}\\n\",\"keccak256\":\"0x1862840d741dedb36e774534b877a13b5187555e3b78b8d2815f898b0dc02268\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/EnumerableSet.sol\\\";\\nimport \\\"../utils/Address.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using Address for address;\\n\\n    struct RoleData {\\n        EnumerableSet.AddressSet members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping (bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view returns (bool) {\\n        return _roles[role].members.contains(account);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\\n        return _roles[role].members.length();\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {\\n        return _roles[role].members.at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to grant\\\");\\n\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to revoke\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (_roles[role].members.add(account)) {\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (_roles[role].members.remove(account)) {\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4fc155a2f7837603d69a13cfa481eb5e7f5e02cb77e2ec9edbac30986db37988\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x15e2d5bd4c28a88548074c54d220e8086f638a71ed07e6b3ba5a70066fcf458d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/introspection/ERC165Checker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Library used to query support of an interface declared via {IERC165}.\\n *\\n * Note that these functions return the actual result of the query: they do not\\n * `revert` if an interface is not supported. It is up to the caller to decide\\n * what to do in these cases.\\n */\\nlibrary ERC165Checker {\\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\\n    bytes4 private constant _INTERFACE_ID_INVALID = 0xffffffff;\\n\\n    /*\\n     * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\\n\\n    /**\\n     * @dev Returns true if `account` supports the {IERC165} interface,\\n     */\\n    function supportsERC165(address account) internal view returns (bool) {\\n        // Any contract that implements ERC165 must explicitly indicate support of\\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\\n        return _supportsERC165Interface(account, _INTERFACE_ID_ERC165) &&\\n            !_supportsERC165Interface(account, _INTERFACE_ID_INVALID);\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports the interface defined by\\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // query support of both ERC165 as per the spec and support of _interfaceId\\n        return supportsERC165(account) &&\\n            _supportsERC165Interface(account, interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns a boolean array where each value corresponds to the\\n     * interfaces passed in and whether they're supported or not. This allows\\n     * you to batch check interfaces for a contract where your expectation\\n     * is that some interfaces may not be supported.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function getSupportedInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool[] memory) {\\n        // an array of booleans corresponding to interfaceIds and whether they're supported or not\\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\\n\\n        // query support of ERC165 itself\\n        if (supportsERC165(account)) {\\n            // query support of each interface in interfaceIds\\n            for (uint256 i = 0; i < interfaceIds.length; i++) {\\n                interfaceIdsSupported[i] = _supportsERC165Interface(account, interfaceIds[i]);\\n            }\\n        }\\n\\n        return interfaceIdsSupported;\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports all the interfaces defined in\\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * Batch-querying can lead to gas savings by skipping repeated checks for\\n     * {IERC165} support.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\\n        // query support of ERC165 itself\\n        if (!supportsERC165(account)) {\\n            return false;\\n        }\\n\\n        // query support of each interface in _interfaceIds\\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\\n            if (!_supportsERC165Interface(account, interfaceIds[i])) {\\n                return false;\\n            }\\n        }\\n\\n        // all interfaces supported\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Query if a contract implements an interface, does not check ERC165 support\\n     * @param account The address of the contract to query for support of an interface\\n     * @param interfaceId The interface identifier, as specified in ERC-165\\n     * @return true if the contract at account indicates support of the interface with\\n     * identifier interfaceId, false otherwise\\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\\n     * the behavior of this method is undefined. This precondition can be checked\\n     * with {supportsERC165}.\\n     * Interface identification is specified in ERC-165.\\n     */\\n    function _supportsERC165Interface(address account, bytes4 interfaceId) private view returns (bool) {\\n        // success determines whether the staticcall succeeded and result determines\\n        // whether the contract at account indicates support of _interfaceId\\n        (bool success, bool result) = _callERC165SupportsInterface(account, interfaceId);\\n\\n        return (success && result);\\n    }\\n\\n    /**\\n     * @notice Calls the function with selector 0x01ffc9a7 (ERC165) and suppresses throw\\n     * @param account The address of the contract to query for support of an interface\\n     * @param interfaceId The interface identifier, as specified in ERC-165\\n     * @return success true if the STATICCALL succeeded, false otherwise\\n     * @return result true if the STATICCALL succeeded and the contract at account\\n     * indicates support of the interface with identifier interfaceId, false otherwise\\n     */\\n    function _callERC165SupportsInterface(address account, bytes4 interfaceId)\\n        private\\n        view\\n        returns (bool, bool)\\n    {\\n        bytes memory encodedParams = abi.encodeWithSelector(_INTERFACE_ID_ERC165, interfaceId);\\n        (bool success, bytes memory result) = account.staticcall{ gas: 30000 }(encodedParams);\\n        if (result.length < 32) return (false, false);\\n        return (success, abi.decode(result, (bool)));\\n    }\\n}\\n\",\"keccak256\":\"0x1bdefceaba99e08a6c30400bc686e6380c1e914887bf5780db14f965c09aa9d3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xf70bc25d981e4ec9673a995ad2995d5d493ea188d3d8f388bba9c227ce09fb82\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\",\"keccak256\":\"0x363bd3b45201f07c9b71c2edc96533468cf14a3d029fabd82fddceb1eb3ebd9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\",\"keccak256\":\"0xca0c2396dbeb3503b51abf4248ebf77a1461edad513c01529df51850a012bee3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../math/SafeMath.sol\\\";\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented or decremented by one. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n * Since it is not possible to overflow a 256 bit integer with increments of one, `increment` can skip the {SafeMath}\\n * overflow check, thereby saving gas. This does assume however correct usage, in that the underlying `_value` is never\\n * directly accessed.\\n */\\nlibrary Counters {\\n    using SafeMath for uint256;\\n\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        // The {SafeMath} overflow check can be skipped here, see the comment at the top\\n        counter._value += 1;\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        counter._value = counter._value.sub(1);\\n    }\\n}\\n\",\"keccak256\":\"0x21662e4254ce4ac8570b30cc7ab31435966b3cb778a56ba4d09276881cfb2437\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\",\"keccak256\":\"0x1562cd9922fbf739edfb979f506809e2743789cbde3177515542161c3d04b164\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor () internal {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x212fb1b1d4beaf74354dad9bc329f44ee3c5375ef1c32acff76b4ecefc10f1d8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x8bbbc2f5c10065ee272592ae0a7a6ceb23de2fbd81564ee0bb015ecf404d5f61\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value < 2**128, \\\"SafeCast: value doesn\\\\'t fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value < 2**64, \\\"SafeCast: value doesn\\\\'t fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value < 2**32, \\\"SafeCast: value doesn\\\\'t fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value < 2**16, \\\"SafeCast: value doesn\\\\'t fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value < 2**8, \\\"SafeCast: value doesn\\\\'t fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= -2**127 && value < 2**127, \\\"SafeCast: value doesn\\\\'t fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= -2**63 && value < 2**63, \\\"SafeCast: value doesn\\\\'t fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= -2**31 && value < 2**31, \\\"SafeCast: value doesn\\\\'t fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= -2**15 && value < 2**15, \\\"SafeCast: value doesn\\\\'t fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= -2**7 && value < 2**7, \\\"SafeCast: value doesn\\\\'t fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        require(value < 2**255, \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x7b2b8baa20fd60ab4a328c8e34c64a353651b80ba4b5b157cbb61813f6f85d55\",\"license\":\"MIT\"},\"contracts/IVaultHandler.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.5;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/SafeCast.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/introspection/IERC165.sol\\\";\\nimport \\\"./TCAP.sol\\\";\\nimport \\\"./Orchestrator.sol\\\";\\nimport \\\"./oracles/ChainlinkOracle.sol\\\";\\n\\n/**\\n * @title TCAP Vault Handler Abstract Contract\\n * @author Cryptex.Finance\\n * @notice Contract in charge of handling the TCAP Token and stake\\n */\\nabstract contract IVaultHandler is\\n  Ownable,\\n  AccessControl,\\n  ReentrancyGuard,\\n  Pausable,\\n  IERC165\\n{\\n  /// @notice Open Zeppelin libraries\\n  using SafeMath for uint256;\\n  using SafeCast for int256;\\n  using Counters for Counters.Counter;\\n  using SafeERC20 for IERC20;\\n\\n  enum FunctionChoices {\\n    CreateVault,\\n    AddCollateral,\\n    RemoveCollateral,\\n    Mint,\\n    Burn,\\n    LiquidateVault\\n  }\\n\\n  /**\\n   * @notice Vault object created to manage the mint and burns of TCAP tokens\\n   * @param Id, unique identifier of the vault\\n   * @param Collateral, current collateral on vault\\n   * @param Debt, current amount of TCAP tokens minted\\n   * @param Owner, owner of the vault\\n   */\\n  struct Vault {\\n    uint256 Id;\\n    uint256 Collateral;\\n    uint256 Debt;\\n    address Owner;\\n  }\\n\\n  /// @notice Vault Id counter\\n  Counters.Counter public counter;\\n\\n  /// @notice value used to divide collateral to adjust the decimal places\\n  uint256 public immutable collateralDecimalsAdjustmentFactor;\\n\\n  /// @notice TCAP Token Address\\n  TCAP public immutable TCAPToken;\\n\\n  /// @notice Total Market Cap/USD Oracle Address\\n  ChainlinkOracle public immutable tcapOracle;\\n\\n  /// @notice Collateral Token Address\\n  IERC20 public immutable collateralContract;\\n\\n  /// @notice Collateral/USD Oracle Address\\n  ChainlinkOracle public immutable collateralPriceOracle;\\n\\n  /// @notice ETH/USD Oracle Address\\n  ChainlinkOracle public immutable ETHPriceOracle;\\n\\n  /// @notice Value used as divisor with the total market cap, just like the S&P 500 or any major financial index would to define the final tcap token price\\n  uint256 public divisor;\\n\\n  /// @notice Minimum ratio required to prevent liquidation of vault\\n  uint256 public ratio;\\n\\n  /// @notice Fee percentage of the total amount to burn charged on ETH when burning TCAP Tokens\\n  uint256 public burnFee;\\n\\n  /// @notice Fee percentage of the total amount to mint charged on ETH when burning TCAP Tokens\\n  uint256 public mintFee;\\n\\n  /// @notice Penalty charged to vault owner when a vault is liquidated, this value goes to the liquidator\\n  uint256 public liquidationPenalty;\\n\\n  /// @notice Minimum amount of TCAP an user can mint\\n  uint256 public minimumTCAP = 0;\\n\\n  /// @notice Address of the treasury contract (usually the timelock) where the funds generated by the protocol are sent\\n  address public treasury;\\n\\n  /// @notice Owner address to Vault Id\\n  mapping(address => uint256) public userToVault;\\n\\n  /// @notice Id To Vault\\n  mapping(uint256 => Vault) public vaults;\\n\\n  /// @notice @notice map that holds information about a function being enabled/disabled.\\n  mapping(FunctionChoices => bool) public isDisabled;\\n\\n  /// @notice value used to multiply chainlink oracle for handling decimals\\n  uint256 public constant oracleDigits = 10000000000;\\n\\n  /// @notice Maximum decimal places that are supported by the collateral\\n  uint8 public constant MAX_DECIMAL_PLACES = 18;\\n\\n  /// @notice Minimum value that the ratio can be set to\\n  uint256 public constant MIN_RATIO = 100;\\n\\n  /// @notice Maximum value that the burn fee can be set to, the fee has two decimals, so it's multiplied by 100\\n  uint256 public constant MAX_FEE = 1000; /// max fee 10%\\n\\n  /**\\n   * @dev the computed interface ID according to ERC-165. The interface ID is a XOR of interface method selectors.\\n   * setRatio.selector ^\\n   * setBurnFee.selector ^\\n   * setLiquidationPenalty.selector ^\\n   * pause.selector ^\\n   * unpause.selector =>  0x9e75ab0c\\n   */\\n  bytes4 private constant _INTERFACE_ID_IVAULT = 0x9e75ab0c;\\n\\n  /// @dev bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\\n  bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\\n\\n  /// @notice An event emitted when the ratio is updated\\n  event NewRatio(address indexed _owner, uint256 _ratio);\\n\\n  /// @notice An event emitted when the mint fee is updated\\n  event NewMintFee(address indexed _owner, uint256 _mintFee);\\n\\n  /// @notice An event emitted when the burn fee is updated\\n  event NewBurnFee(address indexed _owner, uint256 _burnFee);\\n\\n  /// @notice An event emitted when the liquidation penalty is updated\\n  event NewLiquidationPenalty(\\n    address indexed _owner,\\n    uint256 _liquidationPenalty\\n  );\\n\\n  /// @notice An event emitted when the minimum required TCAP is updated\\n  event NewMinimumTCAP(address indexed _owner, uint256 _minimumTCAP);\\n\\n  /// @notice An event emitted when the treasury contract is updated\\n  event NewTreasury(address indexed _owner, address _tresury);\\n\\n  /// @notice An event emitted when a vault is created\\n  event VaultCreated(address indexed _owner, uint256 indexed _id);\\n\\n  /// @notice An event emitted when collateral is added to a vault\\n  event CollateralAdded(\\n    address indexed _owner,\\n    uint256 indexed _id,\\n    uint256 _amount\\n  );\\n\\n  /// @notice An event emitted when collateral is removed from a vault\\n  event CollateralRemoved(\\n    address indexed _owner,\\n    uint256 indexed _id,\\n    uint256 _amount\\n  );\\n\\n  /// @notice An event emitted when tokens are minted\\n  event TokensMinted(\\n    address indexed _owner,\\n    uint256 indexed _id,\\n    uint256 _amount\\n  );\\n\\n  /// @notice An event emitted when tokens are burned\\n  event TokensBurned(\\n    address indexed _owner,\\n    uint256 indexed _id,\\n    uint256 _amount\\n  );\\n\\n  /// @notice An event emitted when a vault is liquidated\\n  event VaultLiquidated(\\n    uint256 indexed _vaultId,\\n    address indexed _liquidator,\\n    uint256 _liquidationCollateral,\\n    uint256 _reward\\n  );\\n\\n  /// @notice An event emitted when a erc20 token is recovered\\n  event Recovered(address _token, uint256 _amount);\\n\\n  /// @notice An event emitted when a function is enabled / disabled\\n  event FunctionToggled(\\n    address indexed _owner,\\n    FunctionChoices _function,\\n    bool _isDisabled\\n  );\\n\\n  /**\\n   * @notice Constructor\\n   * @param _orchestrator address\\n   * @param _divisor uint256\\n   * @param _ratio uint256\\n   * @param _burnFee uint256\\n   * @param _mintFee uint256\\n   * @param _liquidationPenalty uint256\\n   * @param _tcapOracle address\\n   * @param _tcapAddress address\\n   * @param _collateralAddress address\\n   * @param _collateralOracle address\\n   * @param _ethOracle address\\n   * @param _treasury address\\n   * @param _minimumTCAP uint256\\n   */\\n  constructor(\\n    Orchestrator _orchestrator,\\n    uint256 _divisor,\\n    uint256 _ratio,\\n    uint256 _burnFee,\\n    uint256 _mintFee,\\n    uint256 _liquidationPenalty,\\n    address _tcapOracle,\\n    TCAP _tcapAddress,\\n    address _collateralAddress,\\n    address _collateralOracle,\\n    address _ethOracle,\\n    address _treasury,\\n    uint256 _minimumTCAP\\n  ) {\\n    require(\\n      _liquidationPenalty.add(100) < _ratio,\\n      \\\"VaultHandler::constructor: liquidation penalty too high\\\"\\n    );\\n    require(\\n      _ratio >= MIN_RATIO,\\n      \\\"VaultHandler::constructor: ratio lower than MIN_RATIO\\\"\\n    );\\n\\n    require(\\n      _burnFee <= MAX_FEE && _mintFee <= MAX_FEE,\\n      \\\"VaultHandler::constructor: fee higher than MAX_FEE\\\"\\n    );\\n\\n    divisor = _divisor;\\n    ratio = _ratio;\\n    burnFee = _burnFee;\\n    mintFee = _mintFee;\\n    liquidationPenalty = _liquidationPenalty;\\n    tcapOracle = ChainlinkOracle(_tcapOracle);\\n    collateralContract = IERC20(_collateralAddress);\\n    collateralPriceOracle = ChainlinkOracle(_collateralOracle);\\n    ETHPriceOracle = ChainlinkOracle(_ethOracle);\\n    TCAPToken = _tcapAddress;\\n    treasury = _treasury;\\n    minimumTCAP = _minimumTCAP;\\n    uint8 _collateralDecimals = ERC20(_collateralAddress).decimals();\\n    require(\\n      _collateralDecimals <= MAX_DECIMAL_PLACES,\\n      \\\"Collateral decimals greater than MAX_DECIMAL_PLACES\\\"\\n    );\\n    collateralDecimalsAdjustmentFactor =\\n      10**(MAX_DECIMAL_PLACES - _collateralDecimals);\\n\\n    /// @dev counter starts in 1 as 0 is reserved for empty objects\\n    counter.increment();\\n\\n    /// @dev transfer ownership to orchestrator\\n    _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n    transferOwnership(address(_orchestrator));\\n  }\\n\\n  /// @notice Reverts if the user hasn't created a vault.\\n  modifier vaultExists() {\\n    require(\\n      userToVault[msg.sender] != 0,\\n      \\\"VaultHandler::vaultExists: no vault created\\\"\\n    );\\n    _;\\n  }\\n\\n  /// @notice Reverts if value is 0.\\n  modifier notZero(uint256 _value) {\\n    require(_value != 0, \\\"VaultHandler::notZero: value can't be 0\\\");\\n    _;\\n  }\\n\\n  /// @notice reverts if function is disabled\\n  modifier whenNotDisabled(FunctionChoices _function) {\\n    require(isDisabled[_function] == false, \\\"VaultHandler:: function disabled\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @notice Sets the collateral ratio needed to mint tokens\\n   * @param _ratio uint\\n   * @dev Only owner can call it\\n   */\\n  function setRatio(uint256 _ratio) external virtual onlyOwner {\\n    require(\\n      _ratio >= MIN_RATIO,\\n      \\\"VaultHandler::setRatio: ratio lower than MIN_RATIO\\\"\\n    );\\n    require(\\n      liquidationPenalty.add(100) < _ratio,\\n      \\\"VaultHandler::setRatio: liquidation penalty too high\\\"\\n    );\\n\\n    ratio = _ratio;\\n    emit NewRatio(msg.sender, _ratio);\\n  }\\n\\n  /**\\n   * @notice Sets the mint fee percentage an user pays when burning tcap tokens\\n   * @param _mintFee uint\\n   * @dev Only owner can call it\\n   */\\n  function setMintFee(uint256 _mintFee) external virtual onlyOwner {\\n    require(\\n      _mintFee <= MAX_FEE,\\n      \\\"VaultHandler::setMintFee: fee higher than MAX_FEE\\\"\\n    );\\n    mintFee = _mintFee;\\n    emit NewMintFee(msg.sender, _mintFee);\\n  }\\n\\n  /**\\n   * @notice Sets the burn fee percentage an user pays when burning tcap tokens\\n   * @param _burnFee uint\\n   * @dev Only owner can call it\\n   */\\n  function setBurnFee(uint256 _burnFee) external virtual onlyOwner {\\n    require(\\n      _burnFee <= MAX_FEE,\\n      \\\"VaultHandler::setBurnFee: fee higher than MAX_FEE\\\"\\n    );\\n    burnFee = _burnFee;\\n    emit NewBurnFee(msg.sender, _burnFee);\\n  }\\n\\n  /**\\n   * @notice Sets the liquidation penalty % charged on liquidation\\n   * @param _liquidationPenalty uint\\n   * @dev Only owner can call it\\n   * @dev recommended value is between 1-15% and can't be above 100%\\n   */\\n  function setLiquidationPenalty(uint256 _liquidationPenalty)\\n    external\\n    virtual\\n    onlyOwner\\n  {\\n    require(\\n      _liquidationPenalty.add(100) < ratio,\\n      \\\"VaultHandler::setLiquidationPenalty: liquidation penalty too high\\\"\\n    );\\n\\n    liquidationPenalty = _liquidationPenalty;\\n    emit NewLiquidationPenalty(msg.sender, _liquidationPenalty);\\n  }\\n\\n  /**\\n   * @notice Sets the minimum TCAP a vault owner can mint\\n   * @param _minimumTCAP uint\\n   * @dev Only owner can call it\\n   * @dev this is mostly used on hard mode vaults with low collateral ratio vaults\\n   */\\n  function setMinimumTCAP(uint256 _minimumTCAP) external virtual onlyOwner {\\n    minimumTCAP = _minimumTCAP;\\n    emit NewMinimumTCAP(msg.sender, _minimumTCAP);\\n  }\\n\\n  /**\\n   * @notice Sets the treasury contract address where fees are transferred to\\n   * @param _treasury address\\n   * @dev Only owner can call it\\n   */\\n  function setTreasury(address _treasury) external virtual onlyOwner {\\n    require(\\n      _treasury != address(0),\\n      \\\"VaultHandler::setTreasury: not a valid treasury\\\"\\n    );\\n    treasury = _treasury;\\n    emit NewTreasury(msg.sender, _treasury);\\n  }\\n\\n  function toggleFunction(FunctionChoices _function, bool _isDisabled)\\n    external\\n    virtual\\n    onlyOwner\\n  {\\n    isDisabled[_function] = _isDisabled;\\n    emit FunctionToggled(msg.sender, _function, _isDisabled);\\n  }\\n\\n  /**\\n   * @notice Allows an user to create an unique Vault\\n   * @dev Only one vault per address can be created\\n   */\\n  function createVault()\\n    external\\n    virtual\\n    whenNotPaused\\n    whenNotDisabled(FunctionChoices.CreateVault)\\n  {\\n    require(\\n      userToVault[msg.sender] == 0,\\n      \\\"VaultHandler::createVault: vault already created\\\"\\n    );\\n\\n    uint256 id = counter.current();\\n    userToVault[msg.sender] = id;\\n    Vault memory vault = Vault(id, 0, 0, msg.sender);\\n    vaults[id] = vault;\\n    counter.increment();\\n    emit VaultCreated(msg.sender, id);\\n  }\\n\\n  /**\\n   * @notice Allows users to add collateral to their vaults\\n   * @param _amount of collateral to be added\\n   * @dev _amount should be higher than 0\\n   * @dev ERC20 token must be approved first\\n   */\\n  function addCollateral(uint256 _amount)\\n    external\\n    virtual\\n    nonReentrant\\n    vaultExists\\n    whenNotPaused\\n    whenNotDisabled(FunctionChoices.AddCollateral)\\n    notZero(_amount)\\n  {\\n    require(\\n      collateralContract.transferFrom(msg.sender, address(this), _amount),\\n      \\\"VaultHandler::addCollateral: ERC20 transfer did not succeed\\\"\\n    );\\n\\n    Vault storage vault = vaults[userToVault[msg.sender]];\\n    vault.Collateral = vault.Collateral.add(_amount);\\n    emit CollateralAdded(msg.sender, vault.Id, _amount);\\n  }\\n\\n  /**\\n   * @notice Allows users to remove collateral currently not being used to generate TCAP tokens from their vaults\\n   * @param _amount of collateral to remove\\n   * @dev reverts if the resulting ratio is less than the minimum ratio\\n   * @dev _amount should be higher than 0\\n   * @dev transfers the collateral back to the user\\n   */\\n  function removeCollateral(uint256 _amount)\\n    external\\n    virtual\\n    nonReentrant\\n    vaultExists\\n    whenNotPaused\\n    whenNotDisabled(FunctionChoices.RemoveCollateral)\\n    notZero(_amount)\\n  {\\n    Vault storage vault = vaults[userToVault[msg.sender]];\\n    uint256 currentRatio = getVaultRatio(vault.Id);\\n\\n    require(\\n      vault.Collateral >= _amount,\\n      \\\"VaultHandler::removeCollateral: retrieve amount higher than collateral\\\"\\n    );\\n\\n    vault.Collateral = vault.Collateral.sub(_amount);\\n    if (currentRatio != 0) {\\n      require(\\n        getVaultRatio(vault.Id) >= ratio,\\n        \\\"VaultHandler::removeCollateral: collateral below min required ratio\\\"\\n      );\\n    }\\n    require(\\n      collateralContract.transfer(msg.sender, _amount),\\n      \\\"VaultHandler::removeCollateral: ERC20 transfer did not succeed\\\"\\n    );\\n    emit CollateralRemoved(msg.sender, vault.Id, _amount);\\n  }\\n\\n  /**\\n   * @notice Uses collateral to generate debt on TCAP Tokens which are minted and assigned to caller\\n   * @param _amount of tokens to mint\\n   * @dev _amount should be higher than 0\\n   * @dev requires to have a vault ratio above the minimum ratio\\n   * @dev if reward handler is set stake to earn rewards\\n   */\\n  function mint(uint256 _amount)\\n    external\\n    payable\\n    virtual\\n    nonReentrant\\n    vaultExists\\n    whenNotPaused\\n    whenNotDisabled(FunctionChoices.Mint)\\n    notZero(_amount)\\n  {\\n    uint256 fee = getMintFee(_amount);\\n    require(\\n      msg.value >= fee,\\n      \\\"VaultHandler::mint: mint fee less than required\\\"\\n    );\\n\\n    Vault storage vault = vaults[userToVault[msg.sender]];\\n    uint256 collateral = requiredCollateral(_amount);\\n\\n    require(\\n      vault.Collateral >= collateral,\\n      \\\"VaultHandler::mint: not enough collateral\\\"\\n    );\\n\\n    vault.Debt = vault.Debt.add(_amount);\\n\\n    require(\\n      getVaultRatio(vault.Id) >= ratio,\\n      \\\"VaultHandler::mint: collateral below min required ratio\\\"\\n    );\\n\\n    require(\\n      vault.Debt >= minimumTCAP,\\n      \\\"VaultHandler::mint: mint amount less than required\\\"\\n    );\\n    TCAPToken.mint(msg.sender, _amount);\\n    safeTransferETH(treasury, fee);\\n    emit TokensMinted(msg.sender, vault.Id, _amount);\\n    //send back ETH above fee\\n    safeTransferETH(msg.sender, msg.value.sub(fee));\\n  }\\n\\n  /**\\n   * @notice Pays the debt of TCAP tokens resulting them on burn, this releases collateral up to minimum vault ratio\\n   * @param _amount of tokens to burn\\n   * @dev _amount should be higher than 0\\n   * @dev A fee of exactly burnFee must be sent as value on ETH\\n   * @dev The fee goes to the treasury contract\\n   * @dev if reward handler is set exit rewards\\n   */\\n  function burn(uint256 _amount)\\n    external\\n    payable\\n    virtual\\n    nonReentrant\\n    vaultExists\\n    whenNotPaused\\n    whenNotDisabled(FunctionChoices.Burn)\\n    notZero(_amount)\\n  {\\n    uint256 fee = getBurnFee(_amount);\\n    require(\\n      msg.value >= fee,\\n      \\\"VaultHandler::burn: burn fee less than required\\\"\\n    );\\n\\n    Vault memory vault = vaults[userToVault[msg.sender]];\\n\\n    _burn(vault.Id, _amount);\\n    safeTransferETH(treasury, fee);\\n\\n    //send back ETH above fee\\n    safeTransferETH(msg.sender, msg.value.sub(fee));\\n    emit TokensBurned(msg.sender, vault.Id, _amount);\\n  }\\n\\n  /**\\n   * @notice Allow users to burn TCAP tokens to liquidate vaults with vault collateral ratio under the minimum ratio, the liquidator receives the staked collateral of the liquidated vault at a premium\\n   * @param _vaultId to liquidate\\n   * @param _maxTCAP max amount of TCAP the liquidator is willing to pay to liquidate vault\\n   * @dev Resulting ratio must be above or equal minimum ratio\\n   * @dev A fee of exactly burnFee must be sent as value on ETH\\n   * @dev The fee goes to the treasury contract\\n   */\\n  function liquidateVault(uint256 _vaultId, uint256 _maxTCAP)\\n    external\\n    payable\\n    nonReentrant\\n    whenNotPaused\\n    whenNotDisabled(FunctionChoices.LiquidateVault)\\n  {\\n    Vault storage vault = vaults[_vaultId];\\n    require(vault.Id != 0, \\\"VaultHandler::liquidateVault: no vault created\\\");\\n\\n    uint256 vaultRatio = getVaultRatio(vault.Id);\\n    require(\\n      vaultRatio < ratio,\\n      \\\"VaultHandler::liquidateVault: vault is not liquidable\\\"\\n    );\\n\\n    uint256 requiredTCAP = requiredLiquidationTCAP(vault.Id);\\n    require(\\n      _maxTCAP >= requiredTCAP,\\n      \\\"VaultHandler::liquidateVault: liquidation amount different than required\\\"\\n    );\\n\\n    uint256 fee = getBurnFee(requiredTCAP);\\n    require(\\n      msg.value >= fee,\\n      \\\"VaultHandler::liquidateVault: burn fee less than required\\\"\\n    );\\n\\n    uint256 reward = liquidationReward(vault.Id);\\n    _burn(vault.Id, requiredTCAP);\\n\\n    //Removes the collateral that is rewarded to liquidator\\n    vault.Collateral = vault.Collateral.sub(reward);\\n\\n    require(\\n      collateralContract.transfer(msg.sender, reward),\\n      \\\"VaultHandler::liquidateVault: ERC20 transfer did not succeed\\\"\\n    );\\n    safeTransferETH(treasury, fee);\\n\\n    //send back ETH above fee\\n    safeTransferETH(msg.sender, msg.value.sub(fee));\\n    emit VaultLiquidated(vault.Id, msg.sender, requiredTCAP, reward);\\n  }\\n\\n  /**\\n   * @notice Allows the owner to Pause the Contract\\n   */\\n  function pause() external onlyOwner {\\n    _pause();\\n  }\\n\\n  /**\\n   * @notice Allows the owner to Unpause the Contract\\n   */\\n  function unpause() external onlyOwner {\\n    _unpause();\\n  }\\n\\n  /**\\n   * @notice  Added to support recovering LP Rewards from other systems such as BAL to be distributed to holders\\n   * @param _tokenAddress address\\n   * @param _tokenAmount uint\\n   * @dev Only owner  can call it\\n   */\\n  function recoverERC20(address _tokenAddress, uint256 _tokenAmount)\\n    external\\n    onlyOwner\\n  {\\n    // Cannot recover the collateral token\\n    require(\\n      _tokenAddress != address(collateralContract),\\n      \\\"Cannot withdraw the collateral tokens\\\"\\n    );\\n    IERC20(_tokenAddress).safeTransfer(owner(), _tokenAmount);\\n    emit Recovered(_tokenAddress, _tokenAmount);\\n  }\\n\\n  /**\\n   * @notice Allows the safe transfer of ETH\\n   * @param _to account to transfer ETH\\n   * @param _value amount of ETH\\n   */\\n  function safeTransferETH(address _to, uint256 _value) internal {\\n    (bool success, ) = _to.call{value: _value}(new bytes(0));\\n    require(success, \\\"IVaultHandler::safeTransferETH: ETH transfer failed\\\");\\n  }\\n\\n  /**\\n   * @notice ERC165 Standard for support of interfaces\\n   * @param _interfaceId bytes of interface\\n   * @return bool\\n   */\\n  function supportsInterface(bytes4 _interfaceId)\\n    external\\n    pure\\n    override\\n    returns (bool)\\n  {\\n    return (_interfaceId == _INTERFACE_ID_IVAULT ||\\n      _interfaceId == _INTERFACE_ID_ERC165);\\n  }\\n\\n  /**\\n   * @notice Returns the Vault information of specified identifier\\n   * @param _id of vault\\n   * @return Id, Collateral, Owner, Debt\\n   */\\n  function getVault(uint256 _id)\\n    external\\n    view\\n    virtual\\n    returns (\\n      uint256,\\n      uint256,\\n      address,\\n      uint256\\n    )\\n  {\\n    Vault memory vault = vaults[_id];\\n    return (vault.Id, vault.Collateral, vault.Owner, vault.Debt);\\n  }\\n\\n  /**\\n   * @notice Returns the price of the chainlink oracle multiplied by the digits to get 18 decimals format\\n   * @param _oracle to be the price called\\n   * @return price\\n   * @dev The price returned here is in USD is equivalent to 1 `ether` unit  times 10 ** 18\\n   * eg. For ETH This will return the price of USD of 1 ETH * 10 ** 18 and **not** 1 wei * 10 ** 18\\n   * eg. For DAI This will return the price of USD of 1 DAI * 10 ** 18 and **not** (1 / 10 ** 18) * 10 ** 18\\n   */\\n  function getOraclePrice(ChainlinkOracle _oracle)\\n    public\\n    view\\n    virtual\\n    returns (uint256 price)\\n  {\\n    price = _oracle.getLatestAnswer().toUint256().mul(oracleDigits);\\n  }\\n\\n  /**\\n   * @notice Returns the price of the TCAP token\\n   * @return price of the TCAP Token\\n   * @dev TCAP token is 18 decimals\\n   * @dev oracle totalMarketPrice must be in wei format\\n   * @dev P = T / d\\n   * P = TCAP Token Price\\n   * T = Total Crypto Market Cap\\n   * d = Divisor\\n   */\\n  function TCAPPrice() public view virtual returns (uint256 price) {\\n    uint256 totalMarketPrice = getOraclePrice(tcapOracle);\\n    price = totalMarketPrice.div(divisor);\\n  }\\n\\n  /**\\n   * @notice Returns the minimal required collateral to mint TCAP token\\n   * @param _amount uint amount to mint\\n   * @return collateral of the TCAP Token\\n   * @dev TCAP token is 18 decimals\\n   * @dev C = ((P * A * r) / 100) / (cp * cdaf)\\n   * C = Required Collateral\\n   * P = TCAP Token Price\\n   * A = Amount to Mint\\n   * cp = Collateral Price\\n   * r = Minimum Ratio for Liquidation\\n   * cdaf = Collateral decimals adjust factor\\n   */\\n  function requiredCollateral(uint256 _amount)\\n    public\\n    view\\n    virtual\\n    returns (uint256 collateral)\\n  {\\n    uint256 tcapPrice = TCAPPrice();\\n    uint256 collateralPrice = getOraclePrice(collateralPriceOracle);\\n    collateral = ((tcapPrice.mul(_amount).mul(ratio)).div(100))\\n      .div(collateralPrice)\\n      .div(collateralDecimalsAdjustmentFactor);\\n  }\\n\\n  /**\\n   * @notice Returns the minimal required TCAP to liquidate a Vault\\n   * @param _vaultId of the vault to liquidate\\n   * @return amount required of the TCAP Token\\n   * @dev LT = ((((D * r) / 100) - cTcap) * 100) / (r - (p + 100))\\n   * cTcap = ((C * cdaf * cp) / P)\\n   * LT = Required TCAP\\n   * D = Vault Debt\\n   * C = Required Collateral\\n   * P = TCAP Token Price\\n   * cdaf = Collateral Decimals adjustment Factor\\n   * cp = Collateral Price\\n   * r = Min Vault Ratio\\n   * p = Liquidation Penalty\\n   */\\n  function requiredLiquidationTCAP(uint256 _vaultId)\\n    public\\n    view\\n    virtual\\n    returns (uint256 amount)\\n  {\\n    Vault memory vault = vaults[_vaultId];\\n    uint256 tcapPrice = TCAPPrice();\\n    uint256 collateralPrice = getOraclePrice(collateralPriceOracle);\\n    uint256 collateralTcap = (\\n      vault.Collateral.mul(collateralDecimalsAdjustmentFactor).mul(\\n        collateralPrice\\n      )\\n    ).div(tcapPrice);\\n    uint256 reqDividend = (\\n      ((vault.Debt.mul(ratio)).div(100)).sub(collateralTcap)\\n    ).mul(100);\\n    uint256 reqDivisor = ratio.sub(liquidationPenalty.add(100));\\n    amount = Math.min(vault.Debt, reqDividend.div(reqDivisor));\\n  }\\n\\n  /**\\n   * @notice Returns the Reward Collateral amount for liquidating a vault\\n   * @param _vaultId of the vault to liquidate\\n   * @return rewardCollateral for liquidating Vault\\n   * @dev the returned value is returned as collateral currency\\n   * @dev R = (LT * (p  + 100)) / 100\\n   * @dev RC = R / (cp * cdaf)\\n   * R = Liquidation Reward\\n   * RC = Liquidation Reward Collateral\\n   * LT = Required Liquidation TCAP\\n   * p = liquidation penalty\\n   * cp = Collateral Price\\n   * cdaf = Collateral Decimals adjustment factor\\n   */\\n  function liquidationReward(uint256 _vaultId)\\n    public\\n    view\\n    virtual\\n    returns (uint256 rewardCollateral)\\n  {\\n    Vault memory vault = vaults[_vaultId];\\n    uint256 req = requiredLiquidationTCAP(_vaultId);\\n    uint256 tcapPrice = TCAPPrice();\\n    uint256 collateralPrice = getOraclePrice(collateralPriceOracle);\\n    uint256 reward = (req.mul(liquidationPenalty.add(100)));\\n    uint256 _rewardCollateral = (reward.mul(tcapPrice))\\n      .div(collateralPrice.mul(100))\\n      .div(collateralDecimalsAdjustmentFactor);\\n    rewardCollateral = Math.min(vault.Collateral, _rewardCollateral);\\n  }\\n\\n  /**\\n   * @notice Returns the Collateral Ratio of the Vault\\n   * @param _vaultId id of vault\\n   * @return currentRatio\\n   * @dev vr = (cp * (C * 100 * cdaf)) / D * P\\n   * vr = Vault Ratio\\n   * C = Vault Collateral\\n   * cdaf = Collateral Decimals Adjustment Factor\\n   * cp = Collateral Price\\n   * D = Vault Debt\\n   * P = TCAP Token Price\\n   */\\n  function getVaultRatio(uint256 _vaultId)\\n    public\\n    view\\n    virtual\\n    returns (uint256 currentRatio)\\n  {\\n    Vault memory vault = vaults[_vaultId];\\n    if (vault.Id == 0 || vault.Debt == 0) {\\n      currentRatio = 0;\\n    } else {\\n      uint256 collateralPrice = getOraclePrice(collateralPriceOracle);\\n      currentRatio = (\\n        (\\n          collateralPrice.mul(\\n            vault.Collateral.mul(100).mul(collateralDecimalsAdjustmentFactor)\\n          )\\n        ).div(vault.Debt.mul(TCAPPrice()))\\n      );\\n    }\\n  }\\n\\n  /**\\n   * @notice Returns the required fee of ETH to mint the tokens\\n   * @param _amount to burn\\n   * @return fee\\n   * @dev The returned value is returned in wei\\n   * @dev f = (((P * A * b)/ 10000))/ EP\\n   * f = Mint Fee Value in wei\\n   * P = Token Price\\n   * A = Amount to Burn\\n   * b = Burn Fee %\\n   * EP = ETH Price\\n   * 10000 = the value is 100 multiplied by 100 to support two decimals on the burn fee\\n   */\\n  function getMintFee(uint256 _amount) public view virtual returns (uint256 fee) {\\n    uint256 ethPrice = getOraclePrice(ETHPriceOracle);\\n    fee = (TCAPPrice().mul(_amount).mul(mintFee)).div(10000).div(ethPrice);\\n  }\\n\\n  /**\\n   * @notice Returns the required fee of ETH to burn the tokens\\n   * @param _amount to burn\\n   * @return fee\\n   * @dev The returned value is returned in wei\\n   * @dev f = (((P * A * b)/ 10000))/ EP\\n   * f = Burn Fee Value in wei\\n   * P = Token Price\\n   * A = Amount to Burn\\n   * b = Burn Fee %\\n   * EP = ETH Price\\n   * 10000 = the value is 100 multiplied by 100 to support two decimals on the burn fee\\n   */\\n  function getBurnFee(uint256 _amount) public view virtual returns (uint256 fee) {\\n    uint256 ethPrice = getOraclePrice(ETHPriceOracle);\\n    fee = (TCAPPrice().mul(_amount).mul(burnFee)).div(10000).div(ethPrice);\\n  }\\n\\n  /**\\n   * @notice Burns an amount of TCAP Tokens\\n   * @param _vaultId vault id\\n   * @param _amount to burn\\n   */\\n  function _burn(uint256 _vaultId, uint256 _amount) internal {\\n    Vault storage vault = vaults[_vaultId];\\n    require(\\n      vault.Debt >= _amount,\\n      \\\"VaultHandler::burn: amount greater than debt\\\"\\n    );\\n    vault.Debt = vault.Debt.sub(_amount);\\n    TCAPToken.burn(msg.sender, _amount);\\n  }\\n}\\n\",\"keccak256\":\"0x9969d47655a90e99113eecff43d8f0f9fdb7573822cc16d5f472e3de6b4ef2bf\",\"license\":\"MIT\"},\"contracts/JPEGZ.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.5;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/introspection/IERC165.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"./Orchestrator.sol\\\";\\n\\n/**\\n * @title JPEGZ Token\\n * @author Cryptex.finance\\n * @notice ERC20 token on the Ethereum Blockchain that provides total exposure to the cryptocurrency sector.\\n */\\ncontract JPEGZ is ERC20, Ownable, IERC165 {\\n  /// @notice Open Zeppelin libraries\\n  using SafeMath for uint256;\\n\\n  /// @notice if enabled JPEGZ can't be minted if the total supply is above or equal the cap value\\n  bool public capEnabled = false;\\n\\n  /// @notice Maximum value the total supply of JPEGZ\\n  uint256 public cap;\\n\\n  /**\\n   * @notice Address to Vault Handler\\n   * @dev Only vault handlers can mint and burn JPEGZ\\n   */\\n  mapping(address => bool) public vaultHandlers;\\n\\n  /**\\n   * @dev the computed interface ID according to ERC-165. The interface ID is a XOR of interface method selectors.\\n   * mint.selector ^\\n   * burn.selector ^\\n   * setCap.selector ^\\n   * enableCap.selector ^\\n   * transfer.selector ^\\n   * transferFrom.selector ^\\n   * addVaultHandler.selector ^\\n   * removeVaultHandler.selector ^\\n   * approve.selector => 0xbd115939\\n   */\\n  bytes4 private constant _INTERFACE_ID_JPEGZ = 0xbd115939;\\n\\n  /// @dev bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\\n  bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\\n\\n  /// @notice An event emitted when a vault handler is added\\n  event VaultHandlerAdded(\\n    address indexed _owner,\\n    address indexed _tokenHandler\\n  );\\n\\n  /// @notice An event emitted when a vault handler is removed\\n  event VaultHandlerRemoved(\\n    address indexed _owner,\\n    address indexed _tokenHandler\\n  );\\n\\n  /// @notice An event emitted when the cap value is updated\\n  event NewCap(address indexed _owner, uint256 _amount);\\n\\n  /// @notice An event emitted when the cap is enabled or disabled\\n  event NewCapEnabled(address indexed _owner, bool _enable);\\n\\n  /**\\n   * @notice Constructor\\n   * @param _name uint256\\n   * @param _symbol uint256\\n   * @param _cap uint256\\n   * @param _orchestrator address\\n   */\\n  constructor(\\n    string memory _name,\\n    string memory _symbol,\\n    uint256 _cap,\\n    Orchestrator _orchestrator\\n  ) ERC20(_name, _symbol) {\\n    cap = _cap;\\n\\n    /// @dev transfer ownership to orchestrator\\n    transferOwnership(address(_orchestrator));\\n  }\\n\\n  /// @notice Reverts if called by any account that is not a vault.\\n  modifier onlyVault() {\\n    require(\\n      vaultHandlers[msg.sender],\\n      \\\"JPEGZ::onlyVault: caller is not a vault\\\"\\n    );\\n    _;\\n  }\\n\\n  /**\\n   * @notice Adds a new address as a vault\\n   * @param _vaultHandler address of a contract with permissions to mint and burn tokens\\n   * @dev Only owner can call it\\n   */\\n  function addVaultHandler(address _vaultHandler) external onlyOwner {\\n    vaultHandlers[_vaultHandler] = true;\\n    emit VaultHandlerAdded(msg.sender, _vaultHandler);\\n  }\\n\\n  /**\\n   * @notice Removes an address as a vault\\n   * @param _vaultHandler address of the contract to be removed as vault\\n   * @dev Only owner can call it\\n   */\\n  function removeVaultHandler(address _vaultHandler) external onlyOwner {\\n    vaultHandlers[_vaultHandler] = false;\\n    emit VaultHandlerRemoved(msg.sender, _vaultHandler);\\n  }\\n\\n  /**\\n   * @notice Mints JPEGZ Tokens\\n   * @param _account address of the receiver of tokens\\n   * @param _amount uint of tokens to mint\\n   * @dev Only vault can call it\\n   */\\n  function mint(address _account, uint256 _amount) external onlyVault {\\n    _mint(_account, _amount);\\n  }\\n\\n  /**\\n   * @notice Burns JPEGZ Tokens\\n   * @param _account address of the account which is burning tokens.\\n   * @param _amount uint of tokens to burn\\n   * @dev Only vault can call it\\n   */\\n  function burn(address _account, uint256 _amount) external onlyVault {\\n    _burn(_account, _amount);\\n  }\\n\\n  /**\\n   * @notice Sets maximum value the total supply of JPEGZ can have\\n   * @param _cap value\\n   * @dev When capEnabled is true, mint is not allowed to issue tokens that would increase the total supply above or equal the specified capacity.\\n   * @dev Only owner can call it\\n   */\\n  function setCap(uint256 _cap) external onlyOwner {\\n    cap = _cap;\\n    emit NewCap(msg.sender, _cap);\\n  }\\n\\n  /**\\n   * @notice Enables or Disables the Total Supply Cap.\\n   * @param _enable value\\n   * @dev When capEnabled is true, minting will not be allowed above the max capacity. It can exist a supply above the cap, but it prevents minting above the cap.\\n   * @dev Only owner can call it\\n   */\\n  function enableCap(bool _enable) external onlyOwner {\\n    capEnabled = _enable;\\n    emit NewCapEnabled(msg.sender, _enable);\\n  }\\n\\n  /**\\n   * @notice ERC165 Standard for support of interfaces\\n   * @param _interfaceId bytes of interface\\n   * @return bool\\n   */\\n  function supportsInterface(bytes4 _interfaceId)\\n    external\\n    pure\\n    override\\n    returns (bool)\\n  {\\n    return (_interfaceId == _INTERFACE_ID_JPEGZ ||\\n      _interfaceId == _INTERFACE_ID_ERC165);\\n  }\\n\\n  /**\\n   * @notice executes before each token transfer or mint\\n   * @param _from address\\n   * @param _to address\\n   * @param _amount value to transfer\\n   * @dev See {ERC20-_beforeTokenTransfer}.\\n   * @dev minted tokens must not cause the total supply to go over the cap.\\n   * @dev Reverts if the to address is equal to token address\\n   */\\n  function _beforeTokenTransfer(\\n    address _from,\\n    address _to,\\n    uint256 _amount\\n  ) internal virtual override {\\n    super._beforeTokenTransfer(_from, _to, _amount);\\n\\n    require(\\n      _to != address(this),\\n      \\\"JPEGZ::transfer: can't transfer to JPEGZ contract\\\"\\n    );\\n\\n    if (_from == address(0) && capEnabled) {\\n      // When minting tokens\\n      require(\\n        totalSupply().add(_amount) <= cap,\\n        \\\"JPEGZ::Transfer: JPEGZ cap exceeded\\\"\\n      );\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xe7dfc58da4087d7172707b6110b5d3c285a78a6332700c2e72e4e4c8fbe46fd2\",\"license\":\"MIT\"},\"contracts/Orchestrator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.5;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/introspection/ERC165Checker.sol\\\";\\nimport \\\"./IVaultHandler.sol\\\";\\nimport \\\"./TCAP.sol\\\";\\nimport \\\"./oracles/ChainlinkOracle.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title TCAP Orchestrator\\n * @author Cryptex.finance\\n * @notice Orchestrator contract in charge of managing the settings of the vaults, rewards and TCAP token. It acts as the owner of these contracts.\\n */\\ncontract Orchestrator is Ownable {\\n  /// @dev Enum which saves the available functions to emergency call.\\n  enum Functions {\\n    MINTFEE,\\n    BURNFEE,\\n    LIQUIDATION,\\n    PAUSE\\n  }\\n\\n  /// @notice Address that can set to 0 the fees or pause the vaults in an emergency event\\n  address public guardian;\\n\\n  /** @dev Interface constants*/\\n  bytes4 private constant _INTERFACE_ID_IVAULT = 0x9e75ab0c;\\n  bytes4 private constant _INTERFACE_ID_TCAP = 0xbd115939;\\n  bytes4 private constant _INTERFACE_ID_CHAINLINK_ORACLE = 0x85be402b;\\n\\n  /// @dev tracks which vault was emergency called\\n  mapping(IVaultHandler => mapping(Functions => bool)) private emergencyCalled;\\n\\n  /// @notice An event emitted when the guardian is updated\\n  event GuardianSet(address indexed _owner, address guardian);\\n\\n  /// @notice An event emitted when a transaction is executed\\n  event TransactionExecuted(\\n    address indexed target,\\n    uint256 value,\\n    string signature,\\n    bytes data\\n  );\\n\\n  /**\\n   * @notice Constructor\\n   * @param _guardian The guardian address\\n   */\\n  constructor(address _guardian) {\\n    require(\\n      _guardian != address(0),\\n      \\\"Orchestrator::constructor: guardian can't be zero\\\"\\n    );\\n    guardian = _guardian;\\n  }\\n\\n  /// @notice Throws if called by any account other than the guardian\\n  modifier onlyGuardian() {\\n    require(\\n      msg.sender == guardian,\\n      \\\"Orchestrator::onlyGuardian: caller is not the guardian\\\"\\n    );\\n    _;\\n  }\\n\\n  /**\\n   * @notice Throws if vault is not valid.\\n   * @param _vault address\\n   */\\n  modifier validVault(IVaultHandler _vault) {\\n    require(\\n      ERC165Checker.supportsInterface(address(_vault), _INTERFACE_ID_IVAULT),\\n      \\\"Orchestrator::validVault: not a valid vault\\\"\\n    );\\n    _;\\n  }\\n\\n  /**\\n   * @notice Throws if TCAP Token is not valid\\n   * @param _tcap address\\n   */\\n  modifier validTCAP(TCAP _tcap) {\\n    require(\\n      ERC165Checker.supportsInterface(address(_tcap), _INTERFACE_ID_TCAP),\\n      \\\"Orchestrator::validTCAP: not a valid TCAP ERC20\\\"\\n    );\\n    _;\\n  }\\n\\n  /**\\n   * @notice Throws if Chainlink Oracle is not valid\\n   * @param _oracle address\\n   */\\n  modifier validChainlinkOracle(address _oracle) {\\n    require(\\n      ERC165Checker.supportsInterface(\\n        address(_oracle),\\n        _INTERFACE_ID_CHAINLINK_ORACLE\\n      ),\\n      \\\"Orchestrator::validChainlinkOrchestrator: not a valid Chainlink Oracle\\\"\\n    );\\n    _;\\n  }\\n\\n  /**\\n   * @notice Sets the guardian of the orchestrator\\n   * @param _guardian address of the guardian\\n   * @dev Only owner can call it\\n   */\\n  function setGuardian(address _guardian) external onlyOwner {\\n    require(\\n      _guardian != address(0),\\n      \\\"Orchestrator::setGuardian: guardian can't be zero\\\"\\n    );\\n    guardian = _guardian;\\n    emit GuardianSet(msg.sender, _guardian);\\n  }\\n\\n  /**\\n   * @notice Sets the ratio of a vault\\n   * @param _vault address\\n   * @param _ratio value\\n   * @dev Only owner can call it\\n   */\\n  function setRatio(IVaultHandler _vault, uint256 _ratio)\\n    external\\n    onlyOwner\\n    validVault(_vault)\\n  {\\n    _vault.setRatio(_ratio);\\n  }\\n\\n  /**\\n   * @notice Sets the mint fee of a vault\\n   * @param _vault address\\n   * @param _mintFee value\\n   * @dev Only owner can call it\\n   */\\n  function setMintFee(IVaultHandler _vault, uint256 _mintFee)\\n    external\\n    onlyOwner\\n    validVault(_vault)\\n  {\\n    _vault.setMintFee(_mintFee);\\n  }\\n\\n  /**\\n   * @notice Sets the mint fee to 0, only used on a black swan event\\n   * @param _vault address\\n   * @dev Only guardian can call it\\n   * @dev Validates if _vault is valid\\n   */\\n  function setEmergencyMintFee(IVaultHandler _vault)\\n    external\\n    onlyGuardian\\n    validVault(_vault)\\n  {\\n    require(\\n      emergencyCalled[_vault][Functions.MINTFEE] != true,\\n      \\\"Orchestrator::setEmergencyMintFee: emergency call already used\\\"\\n    );\\n    emergencyCalled[_vault][Functions.MINTFEE] = true;\\n    _vault.setMintFee(0);\\n  }\\n\\n  /**\\n   * @notice Sets the burn fee of a vault\\n   * @param _vault address\\n   * @param _burnFee value\\n   * @dev Only owner can call it\\n   */\\n  function setBurnFee(IVaultHandler _vault, uint256 _burnFee)\\n    external\\n    onlyOwner\\n    validVault(_vault)\\n  {\\n    _vault.setBurnFee(_burnFee);\\n  }\\n\\n  /**\\n   * @notice Sets the burn fee to 0, only used on a black swan event\\n   * @param _vault address\\n   * @dev Only guardian can call it\\n   * @dev Validates if _vault is valid\\n   */\\n  function setEmergencyBurnFee(IVaultHandler _vault)\\n    external\\n    onlyGuardian\\n    validVault(_vault)\\n  {\\n    require(\\n      emergencyCalled[_vault][Functions.BURNFEE] != true,\\n      \\\"Orchestrator::setEmergencyBurnFee: emergency call already used\\\"\\n    );\\n    emergencyCalled[_vault][Functions.BURNFEE] = true;\\n    _vault.setBurnFee(0);\\n  }\\n\\n  /**\\n   * @notice Sets the liquidation penalty of a vault\\n   * @param _vault address\\n   * @param _liquidationPenalty value\\n   * @dev Only owner can call it\\n   */\\n  function setLiquidationPenalty(\\n    IVaultHandler _vault,\\n    uint256 _liquidationPenalty\\n  ) external onlyOwner validVault(_vault) {\\n    _vault.setLiquidationPenalty(_liquidationPenalty);\\n  }\\n\\n  /**\\n   * @notice Sets the liquidation penalty of a vault to 0, only used on a black swan event\\n   * @param _vault address\\n   * @dev Only guardian can call it\\n   * @dev Validates if _vault is valid\\n   */\\n  function setEmergencyLiquidationPenalty(IVaultHandler _vault)\\n    external\\n    onlyGuardian\\n    validVault(_vault)\\n  {\\n    require(\\n      emergencyCalled[_vault][Functions.LIQUIDATION] != true,\\n      \\\"Orchestrator::setEmergencyLiquidationPenalty: emergency call already used\\\"\\n    );\\n    emergencyCalled[_vault][Functions.LIQUIDATION] = true;\\n    _vault.setLiquidationPenalty(0);\\n  }\\n\\n  /**\\n   * @notice Pauses the Vault\\n   * @param _vault address\\n   * @dev Only guardian can call it\\n   * @dev Validates if _vault is valid\\n   */\\n  function pauseVault(IVaultHandler _vault)\\n    external\\n    onlyGuardian\\n    validVault(_vault)\\n  {\\n    require(\\n      emergencyCalled[_vault][Functions.PAUSE] != true,\\n      \\\"Orchestrator::pauseVault: emergency call already used\\\"\\n    );\\n    emergencyCalled[_vault][Functions.PAUSE] = true;\\n    _vault.pause();\\n  }\\n\\n  /**\\n   * @notice Unpauses the Vault\\n   * @param _vault address\\n   * @dev Only guardian can call it\\n   * @dev Validates if _vault is valid\\n   */\\n  function unpauseVault(IVaultHandler _vault)\\n    external\\n    onlyGuardian\\n    validVault(_vault)\\n  {\\n    _vault.unpause();\\n  }\\n\\n  /**\\n   * @notice Enables or disables the TCAP Cap\\n   * @param _tcap address\\n   * @param _enable bool\\n   * @dev Only owner can call it\\n   * @dev Validates if _tcap is valid\\n   */\\n  function enableTCAPCap(TCAP _tcap, bool _enable)\\n    external\\n    onlyOwner\\n    validTCAP(_tcap)\\n  {\\n    _tcap.enableCap(_enable);\\n  }\\n\\n  /**\\n   * @notice Sets the TCAP maximum minting value\\n   * @param _tcap address\\n   * @param _cap uint value\\n   * @dev Only owner can call it\\n   * @dev Validates if _tcap is valid\\n   */\\n  function setTCAPCap(TCAP _tcap, uint256 _cap)\\n    external\\n    onlyOwner\\n    validTCAP(_tcap)\\n  {\\n    _tcap.setCap(_cap);\\n  }\\n\\n  /**\\n   * @notice Adds Vault to TCAP ERC20\\n   * @param _tcap address\\n   * @param _vault address\\n   * @dev Only owner can call it\\n   * @dev Validates if _tcap is valid\\n   * @dev Validates if _vault is valid\\n   */\\n  function addTCAPVault(TCAP _tcap, IVaultHandler _vault)\\n    external\\n    onlyOwner\\n    validTCAP(_tcap)\\n    validVault(_vault)\\n  {\\n    _tcap.addVaultHandler(address(_vault));\\n  }\\n\\n  /**\\n   * @notice Removes Vault to TCAP ERC20\\n   * @param _tcap address\\n   * @param _vault address\\n   * @dev Only owner can call it\\n   * @dev Validates if _tcap is valid\\n   * @dev Validates if _vault is valid\\n   */\\n  function removeTCAPVault(TCAP _tcap, IVaultHandler _vault)\\n    external\\n    onlyOwner\\n    validTCAP(_tcap)\\n    validVault(_vault)\\n  {\\n    _tcap.removeVaultHandler(address(_vault));\\n  }\\n\\n  /**\\n   * @notice Allows the owner to execute custom transactions\\n   * @param target address\\n   * @param value uint256\\n   * @param signature string\\n   * @param data bytes\\n   * @dev Only owner can call it\\n   */\\n  function executeTransaction(\\n    address target,\\n    uint256 value,\\n    string memory signature,\\n    bytes memory data\\n  ) external payable onlyOwner returns (bytes memory) {\\n    bytes memory callData;\\n    if (bytes(signature).length == 0) {\\n      callData = data;\\n    } else {\\n      callData = abi.encodePacked(bytes4(keccak256(bytes(signature))), data);\\n    }\\n\\n    require(\\n      target != address(0),\\n      \\\"Orchestrator::executeTransaction: target can't be zero\\\"\\n    );\\n\\n    // solium-disable-next-line security/no-call-value\\n    (bool success, bytes memory returnData) = target.call{value: value}(\\n      callData\\n    );\\n    require(\\n      success,\\n      \\\"Orchestrator::executeTransaction: Transaction execution reverted.\\\"\\n    );\\n\\n    emit TransactionExecuted(target, value, signature, data);\\n\\n    return returnData;\\n  }\\n\\n  /**\\n   * @notice Retrieves the eth stuck on the orchestrator\\n   * @param _to address\\n   * @dev Only owner can call it\\n   */\\n  function retrieveETH(address _to) external onlyOwner {\\n    require(\\n      _to != address(0),\\n      \\\"Orchestrator::retrieveETH: address can't be zero\\\"\\n    );\\n    uint256 amount = address(this).balance;\\n    payable(_to).transfer(amount);\\n  }\\n\\n  /// @notice Allows the contract to receive ETH\\n  receive() external payable {}\\n}\\n\",\"keccak256\":\"0x9eff25c3b14b11abcb6e4778bec075bc0cdece3c7db5948f0432b437f4b18b4c\",\"license\":\"MIT\"},\"contracts/TCAP.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.5;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/introspection/IERC165.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"./Orchestrator.sol\\\";\\n\\n/**\\n * @title Total Market Cap Token\\n * @author Cryptex.finance\\n * @notice ERC20 token on the Ethereum Blockchain that provides total exposure to the cryptocurrency sector.\\n */\\ncontract TCAP is ERC20, Ownable, IERC165 {\\n  /// @notice Open Zeppelin libraries\\n  using SafeMath for uint256;\\n\\n  /// @notice if enabled TCAP can't be minted if the total supply is above or equal the cap value\\n  bool public capEnabled = false;\\n\\n  /// @notice Maximum value the total supply of TCAP\\n  uint256 public cap;\\n\\n  /**\\n   * @notice Address to Vault Handler\\n   * @dev Only vault handlers can mint and burn TCAP\\n   */\\n  mapping(address => bool) public vaultHandlers;\\n\\n  /**\\n   * @dev the computed interface ID according to ERC-165. The interface ID is a XOR of interface method selectors.\\n   * mint.selector ^\\n   * burn.selector ^\\n   * setCap.selector ^\\n   * enableCap.selector ^\\n   * transfer.selector ^\\n   * transferFrom.selector ^\\n   * addVaultHandler.selector ^\\n   * removeVaultHandler.selector ^\\n   * approve.selector => 0xbd115939\\n   */\\n  bytes4 private constant _INTERFACE_ID_TCAP = 0xbd115939;\\n\\n  /// @dev bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\\n  bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\\n\\n  /// @notice An event emitted when a vault handler is added\\n  event VaultHandlerAdded(\\n    address indexed _owner,\\n    address indexed _tokenHandler\\n  );\\n\\n  /// @notice An event emitted when a vault handler is removed\\n  event VaultHandlerRemoved(\\n    address indexed _owner,\\n    address indexed _tokenHandler\\n  );\\n\\n  /// @notice An event emitted when the cap value is updated\\n  event NewCap(address indexed _owner, uint256 _amount);\\n\\n  /// @notice An event emitted when the cap is enabled or disabled\\n  event NewCapEnabled(address indexed _owner, bool _enable);\\n\\n  /**\\n   * @notice Constructor\\n   * @param _name uint256\\n   * @param _symbol uint256\\n   * @param _cap uint256\\n   * @param _orchestrator address\\n   */\\n  constructor(\\n    string memory _name,\\n    string memory _symbol,\\n    uint256 _cap,\\n    Orchestrator _orchestrator\\n  ) ERC20(_name, _symbol) {\\n    cap = _cap;\\n\\n    /// @dev transfer ownership to orchestrator\\n    transferOwnership(address(_orchestrator));\\n  }\\n\\n  /// @notice Reverts if called by any account that is not a vault.\\n  modifier onlyVault() {\\n    require(\\n      vaultHandlers[msg.sender],\\n      \\\"TCAP::onlyVault: caller is not a vault\\\"\\n    );\\n    _;\\n  }\\n\\n  /**\\n   * @notice Adds a new address as a vault\\n   * @param _vaultHandler address of a contract with permissions to mint and burn tokens\\n   * @dev Only owner can call it\\n   */\\n  function addVaultHandler(address _vaultHandler) external onlyOwner {\\n    vaultHandlers[_vaultHandler] = true;\\n    emit VaultHandlerAdded(msg.sender, _vaultHandler);\\n  }\\n\\n  /**\\n   * @notice Removes an address as a vault\\n   * @param _vaultHandler address of the contract to be removed as vault\\n   * @dev Only owner can call it\\n   */\\n  function removeVaultHandler(address _vaultHandler) external onlyOwner {\\n    vaultHandlers[_vaultHandler] = false;\\n    emit VaultHandlerRemoved(msg.sender, _vaultHandler);\\n  }\\n\\n  /**\\n   * @notice Mints TCAP Tokens\\n   * @param _account address of the receiver of tokens\\n   * @param _amount uint of tokens to mint\\n   * @dev Only vault can call it\\n   */\\n  function mint(address _account, uint256 _amount) external onlyVault {\\n    _mint(_account, _amount);\\n  }\\n\\n  /**\\n   * @notice Burns TCAP Tokens\\n   * @param _account address of the account which is burning tokens.\\n   * @param _amount uint of tokens to burn\\n   * @dev Only vault can call it\\n   */\\n  function burn(address _account, uint256 _amount) external onlyVault {\\n    _burn(_account, _amount);\\n  }\\n\\n  /**\\n   * @notice Sets maximum value the total supply of TCAP can have\\n   * @param _cap value\\n   * @dev When capEnabled is true, mint is not allowed to issue tokens that would increase the total supply above or equal the specified capacity.\\n   * @dev Only owner can call it\\n   */\\n  function setCap(uint256 _cap) external onlyOwner {\\n    cap = _cap;\\n    emit NewCap(msg.sender, _cap);\\n  }\\n\\n  /**\\n   * @notice Enables or Disables the Total Supply Cap.\\n   * @param _enable value\\n   * @dev When capEnabled is true, minting will not be allowed above the max capacity. It can exist a supply above the cap, but it prevents minting above the cap.\\n   * @dev Only owner can call it\\n   */\\n  function enableCap(bool _enable) external onlyOwner {\\n    capEnabled = _enable;\\n    emit NewCapEnabled(msg.sender, _enable);\\n  }\\n\\n  /**\\n   * @notice ERC165 Standard for support of interfaces\\n   * @param _interfaceId bytes of interface\\n   * @return bool\\n   */\\n  function supportsInterface(bytes4 _interfaceId)\\n    external\\n    pure\\n    override\\n    returns (bool)\\n  {\\n    return (_interfaceId == _INTERFACE_ID_TCAP ||\\n      _interfaceId == _INTERFACE_ID_ERC165);\\n  }\\n\\n  /**\\n   * @notice executes before each token transfer or mint\\n   * @param _from address\\n   * @param _to address\\n   * @param _amount value to transfer\\n   * @dev See {ERC20-_beforeTokenTransfer}.\\n   * @dev minted tokens must not cause the total supply to go over the cap.\\n   * @dev Reverts if the to address is equal to token address\\n   */\\n  function _beforeTokenTransfer(\\n    address _from,\\n    address _to,\\n    uint256 _amount\\n  ) internal virtual override {\\n    super._beforeTokenTransfer(_from, _to, _amount);\\n\\n    require(\\n      _to != address(this),\\n      \\\"TCAP::transfer: can't transfer to TCAP contract\\\"\\n    );\\n\\n    if (_from == address(0) && capEnabled) {\\n      // When minting tokens\\n      require(\\n        totalSupply().add(_amount) <= cap,\\n        \\\"TCAP::Transfer: TCAP cap exceeded\\\"\\n      );\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x09c7da5d7456ae8635e14b825f004ca449bc303bb432a0276cd612ed16c7b7cb\",\"license\":\"MIT\"},\"contracts/oracles/ChainlinkOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.5;\\n\\nimport \\\"@chainlink/contracts/src/v0.6/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/introspection/IERC165.sol\\\";\\n\\n/**\\n * @title Chainlink Oracle\\n * @author Cryptex.finance\\n * @notice Contract in charge or reading the information from a Chainlink Oracle. TCAP contracts read the price directly from this contract. More information can be found on Chainlink Documentation\\n */\\ncontract ChainlinkOracle is Ownable, IERC165 {\\n  AggregatorV3Interface internal aggregatorContract;\\n\\n  /*\\n   * setReferenceContract.selector ^\\n   * getLatestAnswer.selector ^\\n   * getLatestTimestamp.selector ^\\n   * getPreviousAnswer.selector ^\\n   * getPreviousTimestamp.selector =>  0x85be402b\\n   */\\n  bytes4 private constant _INTERFACE_ID_CHAINLINK_ORACLE = 0x85be402b;\\n\\n  /*\\n   * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\\n   */\\n  bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\\n\\n  /**\\n   * @notice Called once the contract is deployed.\\n   * Set the Chainlink Oracle as an aggregator.\\n   */\\n  constructor(address _aggregator, address _owner) {\\n    require(\\n      _aggregator != address(0) && _owner != address(0),\\n      \\\"address can't be 0\\\"\\n    );\\n    aggregatorContract = AggregatorV3Interface(_aggregator);\\n    transferOwnership(_owner);\\n  }\\n\\n  /**\\n   * @notice Changes the reference contract.\\n   * @dev Only owner can call it.\\n   */\\n  function setReferenceContract(address _aggregator) public onlyOwner {\\n    aggregatorContract = AggregatorV3Interface(_aggregator);\\n  }\\n\\n  /**\\n   * @notice Returns the latest answer from the reference contract.\\n   * @return price\\n   */\\n  function getLatestAnswer() public view returns (int256) {\\n    (\\n      uint80 roundID,\\n      int256 price,\\n      ,\\n      uint256 timeStamp,\\n      uint80 answeredInRound\\n    ) = aggregatorContract.latestRoundData();\\n    require(\\n      timeStamp != 0,\\n      \\\"ChainlinkOracle::getLatestAnswer: round is not complete\\\"\\n    );\\n    require(\\n      answeredInRound >= roundID,\\n      \\\"ChainlinkOracle::getLatestAnswer: stale data\\\"\\n    );\\n    return price;\\n  }\\n\\n  /**\\n   * @notice Returns the latest round from the reference contract.\\n   */\\n  function getLatestRound()\\n    public\\n    view\\n    returns (\\n      uint80,\\n      int256,\\n      uint256,\\n      uint256,\\n      uint80\\n    )\\n  {\\n    (\\n      uint80 roundID,\\n      int256 price,\\n      uint256 startedAt,\\n      uint256 timeStamp,\\n      uint80 answeredInRound\\n    ) = aggregatorContract.latestRoundData();\\n\\n    return (roundID, price, startedAt, timeStamp, answeredInRound);\\n  }\\n\\n  /**\\n   * @notice Returns a given round from the reference contract.\\n   * @param _id of round\\n   */\\n  function getRound(uint80 _id)\\n    public\\n    view\\n    returns (\\n      uint80,\\n      int256,\\n      uint256,\\n      uint256,\\n      uint80\\n    )\\n  {\\n    (\\n      uint80 roundID,\\n      int256 price,\\n      uint256 startedAt,\\n      uint256 timeStamp,\\n      uint80 answeredInRound\\n    ) = aggregatorContract.getRoundData(_id);\\n\\n    return (roundID, price, startedAt, timeStamp, answeredInRound);\\n  }\\n\\n  /**\\n   * @notice Returns the last time the Oracle was updated.\\n   */\\n  function getLatestTimestamp() public view returns (uint256) {\\n    (, , , uint256 timeStamp, ) = aggregatorContract.latestRoundData();\\n    return timeStamp;\\n  }\\n\\n  /**\\n   * @notice Returns a previous answer updated on the Oracle.\\n   * @param _id of round\\n   * @return price\\n   */\\n  function getPreviousAnswer(uint80 _id) public view returns (int256) {\\n    (uint80 roundID, int256 price, , , ) = aggregatorContract.getRoundData(_id);\\n    require(\\n      _id <= roundID,\\n      \\\"ChainlinkOracle::getPreviousAnswer: not enough history\\\"\\n    );\\n    return price;\\n  }\\n\\n  /**\\n   * @notice Returns a previous time the Oracle was updated.\\n   * @param _id of round\\n   * @return timeStamp\\n   */\\n  function getPreviousTimestamp(uint80 _id) public view returns (uint256) {\\n    (uint80 roundID, , , uint256 timeStamp, ) = aggregatorContract.getRoundData(\\n      _id\\n    );\\n    require(\\n      _id <= roundID,\\n      \\\"ChainlinkOracle::getPreviousTimestamp: not enough history\\\"\\n    );\\n    return timeStamp;\\n  }\\n\\n  /**\\n   * @notice ERC165 Standard for support of interfaces.\\n   */\\n  function supportsInterface(bytes4 interfaceId)\\n    external\\n    pure\\n    override\\n    returns (bool)\\n  {\\n    return (interfaceId == _INTERFACE_ID_CHAINLINK_ORACLE ||\\n      interfaceId == _INTERFACE_ID_ERC165);\\n  }\\n}\\n\",\"keccak256\":\"0xb2e5d3dce5cc7b3f35cf34c464d38a023640c1fa463de39a03d5912ee5614164\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526005805460ff60a81b191690553480156200001e57600080fd5b5060405162001a7938038062001a79833981810160405260808110156200004457600080fd5b81019080805160405193929190846401000000008211156200006557600080fd5b9083019060208201858111156200007b57600080fd5b82516401000000008111828201881017156200009657600080fd5b82525081516020918201929091019080838360005b83811015620000c5578181015183820152602001620000ab565b50505050905090810190601f168015620000f35780820380516001836020036101000a031916815260200191505b50604052602001805160405193929190846401000000008211156200011757600080fd5b9083019060208201858111156200012d57600080fd5b82516401000000008111828201881017156200014857600080fd5b82525081516020918201929091019080838360005b83811015620001775781810151838201526020016200015d565b50505050905090810190601f168015620001a55780820380516001836020036101000a031916815260200191505b50604090815260208281015192909101518651929450925085918591620001d29160039185019062000391565b508051620001e890600490602084019062000391565b50506005805460ff191660121790555060006200020462000263565b60058054610100600160a81b0319166101006001600160a01b038416908102919091179091556040519192509060009060008051602062001a59833981519152908290a3506006829055620002598162000267565b505050506200043d565b3390565b6200027162000263565b6001600160a01b0316620002846200037d565b6001600160a01b031614620002e0576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b038116620003275760405162461bcd60e51b815260040180806020018281038252602681526020018062001a336026913960400191505060405180910390fd5b6005546040516001600160a01b03808416926101009004169060008051602062001a5983398151915290600090a3600580546001600160a01b0390921661010002610100600160a81b0319909216919091179055565b60055461010090046001600160a01b031690565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282620003c9576000855562000414565b82601f10620003e457805160ff191683800117855562000414565b8280016001018555821562000414579182015b8281111562000414578251825591602001919060010190620003f7565b506200042292915062000426565b5090565b5b8082111562000422576000815560010162000427565b6115e6806200044d6000396000f3fe608060405234801561001057600080fd5b50600436106101585760003560e01c806347786d37116100c35780639dc29fac1161007c5780639dc29fac14610419578063a457c2d714610445578063a9059cbb14610471578063c4ec3b191461049d578063dd62ed3e146104a5578063f2fde38b146104d357610158565b806347786d371461038357806370a08231146103a0578063715018a6146103c65780638da5cb5b146103ce57806395d89b41146103f2578063979f5f28146103fa57610158565b8063313ce56711610115578063313ce567146102b95780633316b246146102d75780633355fbd2146102fd578063355274ea14610323578063395093511461032b57806340c10f191461035757610158565b806301ffc9a71461015d57806306fdde0314610198578063095ea7b314610215578063165f7a5e1461024157806318160ddd1461026957806323b872dd14610283575b600080fd5b6101846004803603602081101561017357600080fd5b50356001600160e01b0319166104f9565b604080519115158252519081900360200190f35b6101a0610530565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101da5781810151838201526020016101c2565b50505050905090810190601f1680156102075780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6101846004803603604081101561022b57600080fd5b506001600160a01b0381351690602001356105c6565b6102676004803603602081101561025757600080fd5b50356001600160a01b03166105e3565b005b610271610692565b60408051918252519081900360200190f35b6101846004803603606081101561029957600080fd5b506001600160a01b03813581169160208101359091169060400135610698565b6102c161071f565b6040805160ff9092168252519081900360200190f35b610267600480360360208110156102ed57600080fd5b50356001600160a01b0316610728565b6101846004803603602081101561031357600080fd5b50356001600160a01b03166107d4565b6102716107e9565b6101846004803603604081101561034157600080fd5b506001600160a01b0381351690602001356107ef565b6102676004803603604081101561036d57600080fd5b506001600160a01b03813516906020013561083d565b6102676004803603602081101561039957600080fd5b5035610899565b610271600480360360208110156103b657600080fd5b50356001600160a01b0316610939565b610267610954565b6103d6610a06565b604080516001600160a01b039092168252519081900360200190f35b6101a0610a1a565b6102676004803603602081101561041057600080fd5b50351515610a7b565b6102676004803603604081101561042f57600080fd5b506001600160a01b038135169060200135610b33565b6101846004803603604081101561045b57600080fd5b506001600160a01b038135169060200135610b8b565b6101846004803603604081101561048757600080fd5b506001600160a01b038135169060200135610bf3565b610184610c07565b610271600480360360408110156104bb57600080fd5b506001600160a01b0381358116916020013516610c17565b610267600480360360208110156104e957600080fd5b50356001600160a01b0316610c42565b60006001600160e01b0319821663bd11593960e01b148061052a57506001600160e01b031982166301ffc9a760e01b145b92915050565b60038054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156105bc5780601f10610591576101008083540402835291602001916105bc565b820191906000526020600020905b81548152906001019060200180831161059f57829003601f168201915b5050505050905090565b60006105da6105d3610d50565b8484610d54565b50600192915050565b6105eb610d50565b6001600160a01b03166105fc610a06565b6001600160a01b031614610645576040805162461bcd60e51b815260206004820181905260248201526000805160206114df833981519152604482015290519081900360640190fd5b6001600160a01b038116600081815260076020526040808220805460ff191660011790555133917fddc0e64a87ff3cc59e862d6ed2e657e53969f6e844f3939ef3dcda17f12c2cf391a350565b60025490565b60006106a5848484610e40565b610715846106b1610d50565b610710856040518060600160405280602881526020016114b7602891396001600160a01b038a166000908152600160205260408120906106ef610d50565b6001600160a01b031681526020810191909152604001600020549190610f9b565b610d54565b5060019392505050565b60055460ff1690565b610730610d50565b6001600160a01b0316610741610a06565b6001600160a01b03161461078a576040805162461bcd60e51b815260206004820181905260248201526000805160206114df833981519152604482015290519081900360640190fd5b6001600160a01b038116600081815260076020526040808220805460ff191690555133917f1cb9ae25df70c208442e72ac4141a6caac51e91e4bebad30b3893e7e4d8d242591a350565b60076020526000908152604090205460ff1681565b60065481565b60006105da6107fc610d50565b84610710856001600061080d610d50565b6001600160a01b03908116825260208083019390935260409182016000908120918c168152925290205490611032565b3360009081526007602052604090205460ff1661088b5760405162461bcd60e51b81526004018080602001828103825260278152602001806114906027913960400191505060405180910390fd5b6108958282611093565b5050565b6108a1610d50565b6001600160a01b03166108b2610a06565b6001600160a01b0316146108fb576040805162461bcd60e51b815260206004820181905260248201526000805160206114df833981519152604482015290519081900360640190fd5b600681905560408051828152905133917f0679dda594c1faffd39f1bca10100ef5a1c674b21505e3c2629c9ee05891668d919081900360200190a250565b6001600160a01b031660009081526020819052604090205490565b61095c610d50565b6001600160a01b031661096d610a06565b6001600160a01b0316146109b6576040805162461bcd60e51b815260206004820181905260248201526000805160206114df833981519152604482015290519081900360640190fd5b60055460405160009161010090046001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a360058054610100600160a81b0319169055565b60055461010090046001600160a01b031690565b60048054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156105bc5780601f10610591576101008083540402835291602001916105bc565b610a83610d50565b6001600160a01b0316610a94610a06565b6001600160a01b031614610add576040805162461bcd60e51b815260206004820181905260248201526000805160206114df833981519152604482015290519081900360640190fd5b60058054821515600160a81b810260ff60a81b1990921691909117909155604080519182525133917fbd0873ca4da7756522411b8e72aa0a8028d4c760f5903bcd16d6c2ae15dd78ad919081900360200190a250565b3360009081526007602052604090205460ff16610b815760405162461bcd60e51b81526004018080602001828103825260278152602001806114906027913960400191505060405180910390fd5b6108958282611183565b60006105da610b98610d50565b846107108560405180606001604052806025815260200161158c6025913960016000610bc2610d50565b6001600160a01b03908116825260208083019390935260409182016000908120918d16815292529020549190610f9b565b60006105da610c00610d50565b8484610e40565b600554600160a81b900460ff1681565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b610c4a610d50565b6001600160a01b0316610c5b610a06565b6001600160a01b031614610ca4576040805162461bcd60e51b815260206004820181905260248201526000805160206114df833981519152604482015290519081900360640190fd5b6001600160a01b038116610ce95760405162461bcd60e51b81526004018080602001828103825260268152602001806113f16026913960400191505060405180910390fd5b6005546040516001600160a01b0380841692610100900416907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600580546001600160a01b0390921661010002610100600160a81b0319909216919091179055565b3390565b6001600160a01b038316610d995760405162461bcd60e51b81526004018080602001828103825260248152602001806115686024913960400191505060405180910390fd5b6001600160a01b038216610dde5760405162461bcd60e51b81526004018080602001828103825260228152602001806114176022913960400191505060405180910390fd5b6001600160a01b03808416600081815260016020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b6001600160a01b038316610e855760405162461bcd60e51b81526004018080602001828103825260258152602001806115436025913960400191505060405180910390fd5b6001600160a01b038216610eca5760405162461bcd60e51b81526004018080602001828103825260238152602001806113ac6023913960400191505060405180910390fd5b610ed583838361127f565b610f1281604051806060016040528060268152602001611439602691396001600160a01b0386166000908152602081905260409020549190610f9b565b6001600160a01b038085166000908152602081905260408082209390935590841681522054610f419082611032565b6001600160a01b038084166000818152602081815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b6000818484111561102a5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610fef578181015183820152602001610fd7565b50505050905090810190601f16801561101c5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b60008282018381101561108c576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b6001600160a01b0382166110ee576040805162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015290519081900360640190fd5b6110fa6000838361127f565b6002546111079082611032565b6002556001600160a01b03821660009081526020819052604090205461112d9082611032565b6001600160a01b0383166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b6001600160a01b0382166111c85760405162461bcd60e51b81526004018080602001828103825260218152602001806115226021913960400191505060405180910390fd5b6111d48260008361127f565b611211816040518060600160405280602281526020016113cf602291396001600160a01b0385166000908152602081905260409020549190610f9b565b6001600160a01b038316600090815260208190526040902055600254611237908261134e565b6002556040805182815290516000916001600160a01b038516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35050565b61128a838383611349565b6001600160a01b0382163014156112d25760405162461bcd60e51b815260040180806020018281038252603181526020018061145f6031913960400191505060405180910390fd5b6001600160a01b0383161580156112f25750600554600160a81b900460ff165b156113495760065461130c82611306610692565b90611032565b11156113495760405162461bcd60e51b81526004018080602001828103825260238152602001806114ff6023913960400191505060405180910390fd5b505050565b6000828211156113a5576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b5090039056fe45524332303a207472616e7366657220746f20746865207a65726f206164647265737345524332303a206275726e20616d6f756e7420657863656564732062616c616e63654f776e61626c653a206e6577206f776e657220697320746865207a65726f206164647265737345524332303a20617070726f766520746f20746865207a65726f206164647265737345524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63654a5045475a3a3a7472616e736665723a2063616e2774207472616e7366657220746f204a5045475a20636f6e74726163744a5045475a3a3a6f6e6c795661756c743a2063616c6c6572206973206e6f742061207661756c7445524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e63654f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65724a5045475a3a3a5472616e736665723a204a5045475a2063617020657863656564656445524332303a206275726e2066726f6d20746865207a65726f206164647265737345524332303a207472616e736665722066726f6d20746865207a65726f206164647265737345524332303a20617070726f76652066726f6d20746865207a65726f206164647265737345524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa2646970667358221220f6b9e4570982371c6d3627296786d3dca409fbff7fedc2e85763d46dbe33643f64736f6c634300070500334f776e61626c653a206e6577206f776e657220697320746865207a65726f20616464726573738be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101585760003560e01c806347786d37116100c35780639dc29fac1161007c5780639dc29fac14610419578063a457c2d714610445578063a9059cbb14610471578063c4ec3b191461049d578063dd62ed3e146104a5578063f2fde38b146104d357610158565b806347786d371461038357806370a08231146103a0578063715018a6146103c65780638da5cb5b146103ce57806395d89b41146103f2578063979f5f28146103fa57610158565b8063313ce56711610115578063313ce567146102b95780633316b246146102d75780633355fbd2146102fd578063355274ea14610323578063395093511461032b57806340c10f191461035757610158565b806301ffc9a71461015d57806306fdde0314610198578063095ea7b314610215578063165f7a5e1461024157806318160ddd1461026957806323b872dd14610283575b600080fd5b6101846004803603602081101561017357600080fd5b50356001600160e01b0319166104f9565b604080519115158252519081900360200190f35b6101a0610530565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101da5781810151838201526020016101c2565b50505050905090810190601f1680156102075780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6101846004803603604081101561022b57600080fd5b506001600160a01b0381351690602001356105c6565b6102676004803603602081101561025757600080fd5b50356001600160a01b03166105e3565b005b610271610692565b60408051918252519081900360200190f35b6101846004803603606081101561029957600080fd5b506001600160a01b03813581169160208101359091169060400135610698565b6102c161071f565b6040805160ff9092168252519081900360200190f35b610267600480360360208110156102ed57600080fd5b50356001600160a01b0316610728565b6101846004803603602081101561031357600080fd5b50356001600160a01b03166107d4565b6102716107e9565b6101846004803603604081101561034157600080fd5b506001600160a01b0381351690602001356107ef565b6102676004803603604081101561036d57600080fd5b506001600160a01b03813516906020013561083d565b6102676004803603602081101561039957600080fd5b5035610899565b610271600480360360208110156103b657600080fd5b50356001600160a01b0316610939565b610267610954565b6103d6610a06565b604080516001600160a01b039092168252519081900360200190f35b6101a0610a1a565b6102676004803603602081101561041057600080fd5b50351515610a7b565b6102676004803603604081101561042f57600080fd5b506001600160a01b038135169060200135610b33565b6101846004803603604081101561045b57600080fd5b506001600160a01b038135169060200135610b8b565b6101846004803603604081101561048757600080fd5b506001600160a01b038135169060200135610bf3565b610184610c07565b610271600480360360408110156104bb57600080fd5b506001600160a01b0381358116916020013516610c17565b610267600480360360208110156104e957600080fd5b50356001600160a01b0316610c42565b60006001600160e01b0319821663bd11593960e01b148061052a57506001600160e01b031982166301ffc9a760e01b145b92915050565b60038054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156105bc5780601f10610591576101008083540402835291602001916105bc565b820191906000526020600020905b81548152906001019060200180831161059f57829003601f168201915b5050505050905090565b60006105da6105d3610d50565b8484610d54565b50600192915050565b6105eb610d50565b6001600160a01b03166105fc610a06565b6001600160a01b031614610645576040805162461bcd60e51b815260206004820181905260248201526000805160206114df833981519152604482015290519081900360640190fd5b6001600160a01b038116600081815260076020526040808220805460ff191660011790555133917fddc0e64a87ff3cc59e862d6ed2e657e53969f6e844f3939ef3dcda17f12c2cf391a350565b60025490565b60006106a5848484610e40565b610715846106b1610d50565b610710856040518060600160405280602881526020016114b7602891396001600160a01b038a166000908152600160205260408120906106ef610d50565b6001600160a01b031681526020810191909152604001600020549190610f9b565b610d54565b5060019392505050565b60055460ff1690565b610730610d50565b6001600160a01b0316610741610a06565b6001600160a01b03161461078a576040805162461bcd60e51b815260206004820181905260248201526000805160206114df833981519152604482015290519081900360640190fd5b6001600160a01b038116600081815260076020526040808220805460ff191690555133917f1cb9ae25df70c208442e72ac4141a6caac51e91e4bebad30b3893e7e4d8d242591a350565b60076020526000908152604090205460ff1681565b60065481565b60006105da6107fc610d50565b84610710856001600061080d610d50565b6001600160a01b03908116825260208083019390935260409182016000908120918c168152925290205490611032565b3360009081526007602052604090205460ff1661088b5760405162461bcd60e51b81526004018080602001828103825260278152602001806114906027913960400191505060405180910390fd5b6108958282611093565b5050565b6108a1610d50565b6001600160a01b03166108b2610a06565b6001600160a01b0316146108fb576040805162461bcd60e51b815260206004820181905260248201526000805160206114df833981519152604482015290519081900360640190fd5b600681905560408051828152905133917f0679dda594c1faffd39f1bca10100ef5a1c674b21505e3c2629c9ee05891668d919081900360200190a250565b6001600160a01b031660009081526020819052604090205490565b61095c610d50565b6001600160a01b031661096d610a06565b6001600160a01b0316146109b6576040805162461bcd60e51b815260206004820181905260248201526000805160206114df833981519152604482015290519081900360640190fd5b60055460405160009161010090046001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a360058054610100600160a81b0319169055565b60055461010090046001600160a01b031690565b60048054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156105bc5780601f10610591576101008083540402835291602001916105bc565b610a83610d50565b6001600160a01b0316610a94610a06565b6001600160a01b031614610add576040805162461bcd60e51b815260206004820181905260248201526000805160206114df833981519152604482015290519081900360640190fd5b60058054821515600160a81b810260ff60a81b1990921691909117909155604080519182525133917fbd0873ca4da7756522411b8e72aa0a8028d4c760f5903bcd16d6c2ae15dd78ad919081900360200190a250565b3360009081526007602052604090205460ff16610b815760405162461bcd60e51b81526004018080602001828103825260278152602001806114906027913960400191505060405180910390fd5b6108958282611183565b60006105da610b98610d50565b846107108560405180606001604052806025815260200161158c6025913960016000610bc2610d50565b6001600160a01b03908116825260208083019390935260409182016000908120918d16815292529020549190610f9b565b60006105da610c00610d50565b8484610e40565b600554600160a81b900460ff1681565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b610c4a610d50565b6001600160a01b0316610c5b610a06565b6001600160a01b031614610ca4576040805162461bcd60e51b815260206004820181905260248201526000805160206114df833981519152604482015290519081900360640190fd5b6001600160a01b038116610ce95760405162461bcd60e51b81526004018080602001828103825260268152602001806113f16026913960400191505060405180910390fd5b6005546040516001600160a01b0380841692610100900416907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600580546001600160a01b0390921661010002610100600160a81b0319909216919091179055565b3390565b6001600160a01b038316610d995760405162461bcd60e51b81526004018080602001828103825260248152602001806115686024913960400191505060405180910390fd5b6001600160a01b038216610dde5760405162461bcd60e51b81526004018080602001828103825260228152602001806114176022913960400191505060405180910390fd5b6001600160a01b03808416600081815260016020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b6001600160a01b038316610e855760405162461bcd60e51b81526004018080602001828103825260258152602001806115436025913960400191505060405180910390fd5b6001600160a01b038216610eca5760405162461bcd60e51b81526004018080602001828103825260238152602001806113ac6023913960400191505060405180910390fd5b610ed583838361127f565b610f1281604051806060016040528060268152602001611439602691396001600160a01b0386166000908152602081905260409020549190610f9b565b6001600160a01b038085166000908152602081905260408082209390935590841681522054610f419082611032565b6001600160a01b038084166000818152602081815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b6000818484111561102a5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610fef578181015183820152602001610fd7565b50505050905090810190601f16801561101c5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b60008282018381101561108c576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b6001600160a01b0382166110ee576040805162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015290519081900360640190fd5b6110fa6000838361127f565b6002546111079082611032565b6002556001600160a01b03821660009081526020819052604090205461112d9082611032565b6001600160a01b0383166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b6001600160a01b0382166111c85760405162461bcd60e51b81526004018080602001828103825260218152602001806115226021913960400191505060405180910390fd5b6111d48260008361127f565b611211816040518060600160405280602281526020016113cf602291396001600160a01b0385166000908152602081905260409020549190610f9b565b6001600160a01b038316600090815260208190526040902055600254611237908261134e565b6002556040805182815290516000916001600160a01b038516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35050565b61128a838383611349565b6001600160a01b0382163014156112d25760405162461bcd60e51b815260040180806020018281038252603181526020018061145f6031913960400191505060405180910390fd5b6001600160a01b0383161580156112f25750600554600160a81b900460ff165b156113495760065461130c82611306610692565b90611032565b11156113495760405162461bcd60e51b81526004018080602001828103825260238152602001806114ff6023913960400191505060405180910390fd5b505050565b6000828211156113a5576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b5090039056fe45524332303a207472616e7366657220746f20746865207a65726f206164647265737345524332303a206275726e20616d6f756e7420657863656564732062616c616e63654f776e61626c653a206e6577206f776e657220697320746865207a65726f206164647265737345524332303a20617070726f766520746f20746865207a65726f206164647265737345524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63654a5045475a3a3a7472616e736665723a2063616e2774207472616e7366657220746f204a5045475a20636f6e74726163744a5045475a3a3a6f6e6c795661756c743a2063616c6c6572206973206e6f742061207661756c7445524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e63654f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65724a5045475a3a3a5472616e736665723a204a5045475a2063617020657863656564656445524332303a206275726e2066726f6d20746865207a65726f206164647265737345524332303a207472616e736665722066726f6d20746865207a65726f206164647265737345524332303a20617070726f76652066726f6d20746865207a65726f206164647265737345524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa2646970667358221220f6b9e4570982371c6d3627296786d3dca409fbff7fedc2e85763d46dbe33643f64736f6c63430007050033",
  "devdoc": {
    "author": "Cryptex.finance",
    "kind": "dev",
    "methods": {
      "addVaultHandler(address)": {
        "details": "Only owner can call it",
        "params": {
          "_vaultHandler": "address of a contract with permissions to mint and burn tokens"
        }
      },
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "burn(address,uint256)": {
        "details": "Only vault can call it",
        "params": {
          "_account": "address of the account which is burning tokens.",
          "_amount": "uint of tokens to burn"
        }
      },
      "constructor": {
        "params": {
          "_cap": "uint256",
          "_name": "uint256",
          "_orchestrator": "address",
          "_symbol": "uint256"
        }
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is called. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "enableCap(bool)": {
        "details": "When capEnabled is true, minting will not be allowed above the max capacity. It can exist a supply above the cap, but it prevents minting above the cap.Only owner can call it",
        "params": {
          "_enable": "value"
        }
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "mint(address,uint256)": {
        "details": "Only vault can call it",
        "params": {
          "_account": "address of the receiver of tokens",
          "_amount": "uint of tokens to mint"
        }
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "removeVaultHandler(address)": {
        "details": "Only owner can call it",
        "params": {
          "_vaultHandler": "address of the contract to be removed as vault"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setCap(uint256)": {
        "details": "When capEnabled is true, mint is not allowed to issue tokens that would increase the total supply above or equal the specified capacity.Only owner can call it",
        "params": {
          "_cap": "value"
        }
      },
      "supportsInterface(bytes4)": {
        "params": {
          "_interfaceId": "bytes of interface"
        },
        "returns": {
          "_0": "bool"
        }
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "stateVariables": {
      "_INTERFACE_ID_ERC165": {
        "details": "bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7"
      },
      "_INTERFACE_ID_JPEGZ": {
        "details": "the computed interface ID according to ERC-165. The interface ID is a XOR of interface method selectors. mint.selector ^ burn.selector ^ setCap.selector ^ enableCap.selector ^ transfer.selector ^ transferFrom.selector ^ addVaultHandler.selector ^ removeVaultHandler.selector ^ approve.selector => 0xbd115939"
      },
      "vaultHandlers": {
        "details": "Only vault handlers can mint and burn JPEGZ"
      }
    },
    "title": "JPEGZ Token",
    "version": 1
  },
  "userdoc": {
    "events": {
      "NewCap(address,uint256)": {
        "notice": "An event emitted when the cap value is updated"
      },
      "NewCapEnabled(address,bool)": {
        "notice": "An event emitted when the cap is enabled or disabled"
      },
      "VaultHandlerAdded(address,address)": {
        "notice": "An event emitted when a vault handler is added"
      },
      "VaultHandlerRemoved(address,address)": {
        "notice": "An event emitted when a vault handler is removed"
      }
    },
    "kind": "user",
    "methods": {
      "addVaultHandler(address)": {
        "notice": "Adds a new address as a vault"
      },
      "burn(address,uint256)": {
        "notice": "Burns JPEGZ Tokens"
      },
      "cap()": {
        "notice": "Maximum value the total supply of JPEGZ"
      },
      "capEnabled()": {
        "notice": "if enabled JPEGZ can't be minted if the total supply is above or equal the cap value"
      },
      "constructor": {
        "notice": "Constructor"
      },
      "enableCap(bool)": {
        "notice": "Enables or Disables the Total Supply Cap."
      },
      "mint(address,uint256)": {
        "notice": "Mints JPEGZ Tokens"
      },
      "removeVaultHandler(address)": {
        "notice": "Removes an address as a vault"
      },
      "setCap(uint256)": {
        "notice": "Sets maximum value the total supply of JPEGZ can have"
      },
      "supportsInterface(bytes4)": {
        "notice": "ERC165 Standard for support of interfaces"
      },
      "vaultHandlers(address)": {
        "notice": "Address to Vault Handler"
      }
    },
    "notice": "ERC20 token on the Ethereum Blockchain that provides total exposure to the cryptocurrency sector.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1956,
        "contract": "contracts/JPEGZ.sol:JPEGZ",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1962,
        "contract": "contracts/JPEGZ.sol:JPEGZ",
        "label": "_allowances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 1964,
        "contract": "contracts/JPEGZ.sol:JPEGZ",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 1966,
        "contract": "contracts/JPEGZ.sol:JPEGZ",
        "label": "_name",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 1968,
        "contract": "contracts/JPEGZ.sol:JPEGZ",
        "label": "_symbol",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 1970,
        "contract": "contracts/JPEGZ.sol:JPEGZ",
        "label": "_decimals",
        "offset": 0,
        "slot": "5",
        "type": "t_uint8"
      },
      {
        "astId": 674,
        "contract": "contracts/JPEGZ.sol:JPEGZ",
        "label": "_owner",
        "offset": 1,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 7011,
        "contract": "contracts/JPEGZ.sol:JPEGZ",
        "label": "capEnabled",
        "offset": 21,
        "slot": "5",
        "type": "t_bool"
      },
      {
        "astId": 7014,
        "contract": "contracts/JPEGZ.sol:JPEGZ",
        "label": "cap",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 7019,
        "contract": "contracts/JPEGZ.sol:JPEGZ",
        "label": "vaultHandlers",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}