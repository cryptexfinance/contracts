// SPDX-License-Identifier: MIT
pragma solidity 0.7.5;

import "../ITreasury.sol";
import "./PolygonL2Messenger.sol";

/**
 * @title TCAP Polygon Treasury
 * @author Cryptex.finance
 * @notice This contract will hold the assets generated by the polygon network.
 */
contract PolygonTreasury is ITreasury {
  /// @notice Address of the polygonMessenger contract.
  PolygonL2Messenger public polygonMessenger;

  /// @notice event emitted when polygonMessenger is updated.
  event UpdatedPolygonMessenger(
    PolygonL2Messenger oldPolygonMessenger,
    PolygonL2Messenger newPolygonMessenger
  );

  /**
   * @notice Constructor
   * @param _owner the owner of the contract
   * @param _polygonMessenger address of the polygon PolygonL2Messenger
   */
  constructor(address _owner, address _polygonMessenger) ITreasury(_owner) {
    require(
      _polygonMessenger != address(0),
      "PolygonTreasury::constructor: address can't be zero"
    );
    polygonMessenger = PolygonL2Messenger(_polygonMessenger);
  }

  // @notice Throws if called by an account different from the owner
  // @dev call needs to come from PolygonL2Messenger
  modifier onlyOwner() override {
    require(
      msg.sender == address(polygonMessenger) &&
        polygonMessenger.xDomainMessageSender() == owner,
      "PolygonTreasury: caller is not the owner"
    );
    _;
  }

  /**
   * @notice updates the polygonMessenger instance
   * @param newPolygonMessenger address of the new PolygonL2Messenger contract
   **/
  function updatePolygonMessenger(address newPolygonMessenger)
    external
    onlyOwner
  {
    require(
      newPolygonMessenger != address(0),
      "PolygonTreasury: new owner is the zero address"
    );
    emit UpdatedPolygonMessenger(
      polygonMessenger,
      PolygonL2Messenger(newPolygonMessenger)
    );
    polygonMessenger = PolygonL2Messenger(newPolygonMessenger);
  }
}
